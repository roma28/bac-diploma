%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.3 (Build 18D109) Quartz PS Context)
%%Title: one-pot.eps
%%Creator: ChemDraw Professional(tm) 16.0.1.4
%%CreationDate: 2020-02-22 06:30:52 +0000
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 414 115
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: © 1985–2017 PerkinElmer Informatics, Inc.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 414 115
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: NOGPDF+Helvetica
%!FontType1-1.0: NOGPDF+Helvetica 1.0000.0.0000
14 dict begin/FontName /NOGPDF+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /O put
dup 34 /H put
dup 35 /R put
dup 36 /one put
dup 37 /two put
dup 38 /N put
dup 39 /space put
dup 40 /equal put
dup 41 /comma put
dup 42 /four put
dup 43 /hyphen put
dup 44 /M put
dup 45 /e put
dup 46 /C put
dup 47 /l put
dup 48 /t put
dup 49 /B put
dup 50 /u put
dup 51 /K put
dup 52 /plus put
dup 53 /r put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<





FEFEFEBFA95991E89DBD9BCD01AC0145D0E20000000100A10000052F05BD000B003F402108091E0302020401020A070804072506051A0D010A250B00190C0C0DA0217670182B2B104EF43C4DFD3C4E10F63C4DFD3C003F3C3F3C392F3CFD3C3130133311211133112311211123A1C902FCC9C9FD04C905BDFDA1025FFA4302AFFD5100000001009C0000054E05BD000B00BA407A06052505270848075807770588039803B803C803E7070BA603A60402050528082909A809F9020507050708050903D4020105050608080709020228030325120404090605052512080807050409080705040302070609080502040A040301020A0706086B067B06E80603061A0D010A250B00190C0DD621765E182B2B4EF43C4DFD3C194E10E65D18003F3C3C3F3C3C1217390111173908874D2E2B057D10C5872E182B04104B52787AC510083C083C31300072715D01715D1333110121090121010711239CC202CC0113FD9D0274FEFDFDFEEBC205BDFD3402CCFDB0FC9302E1E1FE0000000100970000061705BD001300CB405944014B03020601090316011903D7010513011C03140B1B0C57015803D401DB03D40BDB0C0A040A040D45028602045102970202290A280D380A380D4702570276020725640D0A0203120301020B0C120306081517171A040405B8019B400D0A1F030B06FD0C0102FD0D1F12B8019BB6130019147670182B4E10F43C4DFDE419F43939F4393918E4FD3C4E10456544E6003F173C3F3C1217394B5279B10D0CB801AAB40201020A0BB801AAB202020387054D2E7AFD047DC487052E7AFD047DC43130005D727101725D71132109012111231134363501230115141615112397011D01A601A3011ABD04FE5DC5FE5A05BE05BDFB2604DAFA4303632DD077FB2904D72D36DD34FC9D00000002009C0000052A05BD0009000A007640143701380602070117012701470158020507010202B8019B4017120606070207080301020806080A030A0A010608020302B8019BB505041A0C0708B8019B400A0900190B0CA0217670182B2B4EF43C4DFD3C4E10F63C4DFD3C11123939392F003F3F3C3F3C12393904872E2B877DC53130005D015D13330111331123011123019CEB02E6BDDFFD0FBE023A05BDFB5A04A6FA4304A5FB5B05BD000000030050FFD505E805E5000F001B001C008A402C8705C700C701C302C808C90A064308153A0F031B3A07091C021C1C0B1231031A1E18310B191D1ED8216A66182B2B4EF44DED4E10F64DED12392F003F3FED3FED313043794032001A0D26012509250526160E18320014001232011A081832001006123201170C1532011302153201190A1B320011041B32002B2B2B2B012B2B2B2B2B2B2B2B81005D0017161110070221202726111037122100123510002322001114122103049BBB92A7C4FE95FEADC2



00>] def
/CharStrings 23 dict dup begin
/.notdef 0 def
/space 1 def
/plus 2 def
/comma 3 def
/hyphen 4 def
/one 5 def
/two 6 def
/four 7 def
/equal 8 def
/B 9 def
/C 10 def
/H 11 def
/K 12 def
/M 13 def
/N 14 def
/O 15 def
/R 16 def
/e 17 def
/l 18 def
/r 19 def
/t 20 def
/u 21 def
/u20B8 22 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4179358 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C92615E2133941906A02CAE799EFE07355B68024211C14942A28E4AFD6A33F2B739747BF2E0C821B20260BB648C4140B04B018DD3A084B4A52803BE09AD5435A38F656ADA33DBA7827A4172F05E55D5C6B2F9C7A61C4D256D892ADFB82400690D4485578B79F86759DEC245EC3214B5D25C71856C91C93018AE585FC99DEC7F748940067FE749E506CF13E8C8113754CD54A5E05ED8069B77ABB6AA577137628EC6D90E38D71C0E4C9CAD6266EF18EEE44287D4CAF180201DE5C934035385808BC25CFD4CF4FD4DD371F0FCB49251160844411986ABE6B5130470BB50A6C563D1343D83258C508942D54BFAEC3FD3E26481FF56CBA86B95CE5CF57C75B24D25490AEA6D0367DE310ACC7B72C64972ED58E0133E6B5C53AB16FA4FBE2F7096E3CDCCB646C45E3490FDAD3DFE7FDAF7DADEA261CAEDF1533E4551728AD4CC2A0F347BCB3C6081E7F64DB00E7D7473B774F0DC57D86E8A0218637426B8809D30800AA61E60F8E8DA952C1AC761A0D05A0408B8E0D47E872ACBE188BEEEDD42268B1E634BD67378D73514E189AD95CAEB408A011D9DE8B79162FAB58C2D95B73BBC592B51FFD8740C5278C4B46E67AE9569DBD729CFA6603D078F7352D1A09923E18048EE3E3C708AE30A6BB0D4FCEE0CC214E0700560B83F0E6793D7EF9E7F39EEF3B0F6955DC568DA0AC62AD9D8E3A44DEB8A1C3F2440C2706678074E77159451DE301DF03B8BB6A46F54E1F3CF543819194307FD1A60ABFC1350B3C5FDB0FF2ABD9A
ECEB57E2600E49F6573C4CB77B900CD9ECABAB3278E1A1C18CE4D2CC92186CDC6C3DEF546D7B74510134A2AA78F01344BE2EE8318232DA09B4C163C085F44C41B8D3287E5D8E962F053273F2072204594C935630115CD0E35CBC3644487DE6D66D3A9E4FCCDE48BBD172CC8E93F739980E8754F2EFF7696EFFF2292F800F5FBF84BC4C57A3BA6F9257C87A9E92EA23B924A703B1AB5277BC5CA26ED50AA4F5E0CE1DBF787620EB4785ACC9718982890DA8CFC426EE7F75B7151F7EBD20686360340FAA34C1265FC647389C83759E1BEF624340D7B18B1BC30B2267FC75CA750D342A4B7210E497347123124A2B861FA6D8A490E2731DF9F99A2DFF2E1C4E5795ED2B293567B921645947539B9C3A7F6063B1A9F9FF2DA73EF5AA74A19C681043476940CC9EFE87083CE29ACB690C2A97A360D8D629AF1F4B7FCB6C2EF74EAEE3ABE621EE9088AC7343842D2AD1C68D127F4944316E492B1B5B37EBE37E3C1578C240E1675DC6BC40893610847F13B835A1C026515970EE6C96A6FDA890B59703DB810DD1B33472FA01AD71A0216EF2B2CB1CB05A2FE57494D17DC2728F0C6F2275BBB076A5A6E5A21E424F7F4230F322209E357C1D7CF7F6030DF2C4ED4ABAD3A40ACAB09957BAFA2EC9934A24BE4DA2C0B7F0A25FEC48400B729A2A3BF7A927B5AE73E7A6CCB9533C635C95DC905AC5FE75C23172DC20F55CBCC6262A8668721916BD4033EFE66AFB6E47155B7E64D4F4FD4FB51D5AFD7BC390076027782A9CDC11E4F428C7D188AE5F8354C44208920F5890F48538E07A717FC3A163DDA747C84FD7BD7C26F0D320D089B08ADF080E01172FB4B9F65900C4401B46A9C9747580E6BDA94792F9CCE6736C70191962F1D0941F4154C89E6FDB4D0E12DD538151AFCAE22ABDE09DC171B67044F9ED6DDFDA2D201940FF931FEB373AE7EEFA9CF7A9F6EDC748BCB8B055F0CFF1EE7F62E4146EC1BBC6EB7C1DFF65911F89214E921D6717B49511411A017C7C5A8A3D78C9D5ACDFFE3DA2180F3FF6C079519DE532F3F44F4DB4A954C5E2C01C696E170D0B3206BA450D455764F3781205C630D87069D2573C822BE96CD975FC4811868C2181AA203EC42E9EF3DE39B6B5259A1AEDC780DDE0B181E91ED735356FA9B556F7C89B0FF56A146C39884811A4E89CF230F416D824D411D02FDCE446B4F125560A7AC17E0CCFDCF0DF8A737E60A096D00E50F26D22505EAFCA02AC7CDA4F61923F932E2031499341E1AF88078E54C7F3DD278C02F732166D61755CE5B0E878B3DA5186069EDEA9194CDE9B7375D7B57BA2BEBA039A0A9AC131A6D1F2E4A50BE4591D3C2EA66BE37D0879C474FBCBBFA6730B09BBE81D6915EABA603FECCB372C7209B209F3CBDA8C629E804EFEBD80B6A3A53C2BB937E3B381DA14DF2002E185F3268802CC95EEC9FBDA668A4F984EFB92
297F7305001A57739C4ECF052B6404BAB3B9B6BFE84F82EFB0C026BB080DE4DA69E1645FB57BA1DB4AF0BEB712ED4515043C290B139FBBAA12FE39B69DD434DD20B2D8ABF7CD54B208E6FE0AA9FB5A60FCD8C6F9129BF779D3E77B2E0E5FEAB536710CC3C5B4C3DF387CFA9EC4AADB80A1B7921B19E3A752F2B4EE9C72DF9FF806798BD1FC9D25664E87A599723488A4141668CDF6B9113ABED1978D71D65E9D11FBCB7D8082562D825A830386BEE5F1B45D5389561DE49ACC760C0A39DF5BE1F106E111CCC9A45167A1878981353EBF6C17745BC23995A5B039BDC076B3FC4646F051864B08BF1A28D6BF1F409ECAD5725245A5921ACADFF59373A71494937E20201F011608FBE20570AB6940225B8B2001EA9B0C904E0A95CA0A15E141DAEF35E4A42277F477F86B0213F9FE8FBD9A55B70CC0E8E7D96EFA71A89984BC904F26628BDD74365344E6F7111C14070661E25583A3425CB4BE8831F403B3B810ACEDCBCEF3B39B83DE43BB144836EA5A2883EF669E0E847D15C4AD6610994273F90514DC7B5F62FACE2757E05776B6FDC2E8796148635ABC64B8EE91AC1549CEA67C7C5055D2D1FEB3FA9AE93AAA4F12AE4DF33CFC87A67ED59816014DC610D878B0CC2C37F58005A5EE77B06E6C22D3585F60AB7CE236574D0EFA376BE7FDCC0C8D024BE2BECFBB08458C5D5AEB86E4BBAE3AB9DFCA0C2F6AA4D9E96F52C282CCD9E628B84DCF46D002A1A9992A4665323F3A19305AC8F118C6769E8450129475C9C462097E10DA8FD655EEE480689CF3A0DB63ABB3321E2E95688F0E77511273FDB41F92D8E03162BF1598247F4656C5DC6DC8841B1235275B650965FBAFAE4E96EEBDE2E1FF607C2DB46C3961728474EFD6AC705D94D9B311742F9D8516177CECCB8D83980BC49B69649CB72303EA2DB55B63FA1CD5AED0C35D4D36D8B1AEC2F93C363331542F838274317187527374312896D520CEF259B0995E2C3E213AAD30903103944A800CC470319B504AD943F73833E29E749B7E682D83BFD2C2E985E12DABEC13384C4C6428F0F424B68D284C574ABDAB6520A0BCFFE4FA5F25F7D966E7E9059D3D1C1ABE38512F7A0EB4C96512EFE2D581CB842C44654351A60102D314570F19C99B4D7F9725374E5D0A5B6E6FF5295E2E4A4D32B65293D68ECB1E85BAF867FC63F751E95D6D36349DFEF8D7294E7448A06C0EF777113FD4C73899FB8D0C65A2FA320ADC242EEC13C3BDDCFEAA009A86668CA1A556EF61E969C0DFB288889BDD052B9B5156552EB775FBEC43588AA64549264327564CD149354CEE193AFE063BA1D83840EF9D73170DBEE50866A981CFAB2C2D5EC0E17229
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/NOGPDF+Helvetica cguidfix
/F1.1/NOGPDF+Helvetica renmfont
%RBIBeginFontSubset: KIMKKF+Helvetica-Bold
%!FontType1-1.0: KIMKKF+Helvetica-Bold 1.0000.1.0000
14 dict begin/FontName /KIMKKF+Helvetica-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /R put
dup 34 /one put
dup 35 /two put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -2084 1 index div -985 2 index div 2942 3 index div 2374 5 -1 roll div]cvx def
/sfnts [<





B141B80401B61FA437811FA384B80401B21FA22AB80401B21FA124B8019AB21FA024B8019AB61F9F243F1F9683B80401B21F9527B80401B21F8227B80401B21F7084B80801B21F6FB3B80801B21F6EB3B802ABB61F6D24261F6224B80101400B1F5D246C1F5C24391F5441B80125B21F4D27B80401B61F4C27CD1F4B41B80401B21F4024B8019AB21F3683B80401B21F3524B80201B21F3224B8019AB61F2C24BB1F2884B80801B21F2241B8040140131F20244C1F1D24261F2CA0961F2C245E1F412AB801A8B748282A2448279636B801F4B21F4D27B801F4B21F9527B801F4B21F6E27B801F4B21F6327BD01A700470029015A00250199B348296FB3B80190B21F83B3B8019AB348283725B803E840121FB327482784274827362748272527482755B80154402C0797076407550733072B072907260721071E071B071408120810080E080C080A080808060804080208000814B8FFE0402B00000100140610000001000604000001000410000001001002000001000200000001000002010802004A00B806008516763F183F123E113946443E113946443E113946443E113946443E11394660443E11394660442B2B2B2B2B2B2B2B2B2B2B182B2B2B2B2B2B2B2B2B2B2B18011DB0964B5358B0AA1D59B0324B5358B0FF1D592B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B65422B2B2B4B5279B35279EB56456523456023456560234560B08B766818B080622020B1EB794565234520B003266062636820B003266165B079236544B0EB234420B152564565234520B003266062636820B003266165B056236544B0522344B10056455458B156406544B25240524523614459B35045484E456523456023456560234560B089766818B080622020B148454565234520B003266062636820B003266165B045236544B048234420B1504E4565234520B003266062636820B003266165B04E236544B0502344B1004E455458B14E406544B250405045236144592B2B4569534200
00>] def
/CharStrings 5 dict dup begin
/.notdef 0 def
/one 1 def
/two 2 def
/R 3 def
/u20B8 4 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-2084 -985 2942 2374}def
/UniqueID 4037662 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C959DCA2B25064CB2EE653C8C5E0D08068DD956094993D87692D189384B9AF89DBB8BFB662B7E2C8075BA0694D7CB7F6EE43BE246691CE17FB2B2EE343E468E9396334D1DF6C592807B305D948C8953A682F9DC0D573A7A9107E1F886325E988E7B37DE09B98D9C596FA27E0C160BAFA1A1B28FF665E71388AA3AE47563F5D36FB176EED3AA33E2B605A0AF185AD40D4401BBD784116CA5C8EAE66FD8E7AECFF29356620D52EF49FC7671B3C34C831212294C6EA450169601C7A3280C0499471CFD814403BE1D882B60BE5C8693214DDE082344A51D9873BBF1175A2679982734B5C1266B1EB2ED19B1B65283827265058835B943931CBA4AF60D3599AF366B705AE5C0225E473708BADC68F6ACC2F4A9D6B9A4A1756A02D366C080EBD0E91998D1328FBBA00422145BE314EC78224CF8C5C422651F644E718511F1B421FD2CB123FF1F344A22B7A96BA462D19C881153496EC3FD74903B2227B2F3F0BFB1488921AEFE1D9DE8CF6274A1939C330644DCE6DBE27C90C2A64B311C67D41B466C4D2B031DFC62297BC372FAD6EE9024536A3E1063C8E9F3F329B4B1AECD388CC6061EC478612737D9540FCC900B0795C8B314FEFE63FEDF85FD1BD8094E78BE6A2529E4FDDF96883E7D9C44A3198958B70B1B5A58D23C58060804CC96B8BC1436F59509347B72A5874596821054B63343933454A7D3D9554B9C3E8275CB394C7C5AB12D5E9CC664CF333688EBB46708B8567471B03B26E52703941B3DAB86F2EC8D6B
C295106A0007E78D7589157826E74E3AC29B4CFD978BB74361B1D2E6E8D9E33597BBA9631EBB491F1A8BA4BCB6391B65BE9ECDF325531A3CB98214121D1128D9C3348458ACFA747425861E3D1FC56FE0C161D32FFD94BFFFB4645B2751D7E89A4577B2B360FFABFB18E71BB5B571DD410542E689E26DCADABFE5A9488DCF9DE3B22D87A62A03567CC98C4EAB5776556F80A90DBD7B39FDB842957AAFFA82D282DEDA556FD88A0FF581006274
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/KIMKKF+Helvetica-Bold cguidfix
/F2.1/KIMKKF+Helvetica-Bold renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 sc
q
0 115 m
414 115 l
414 0 l
0 0 l
h
0 115 m
W
0 0 414 115 rc
-1 115 m
415 115 l
415 -1 l
-1 -1 l
h
f
20 w
1 J
0 sc
0.050000001 0 0 -0.050000001 -17 123 cm
903.5788 1017.2689 m
1152.9669 873.28448 l
S
1152.9669 873.28448 m
1402.3553 1017.2689 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 36.759186 97.918297 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.3681641 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -17 123 cm
1127.0497 888.24774 m
1127.0497 683.66534 l
S
1178.8842 888.24774 m
1178.8842 683.66534 l
S
2631.1675 987.26886 m
2880.5557 843.28448 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 135.88637 77.722984 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -17 123 cm
2880.5557 843.28448 m
3028.7744 928.85846 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 123.13863 99.418297 cm
0 7.3681641 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -17 123 cm
2854.6384 858.24774 m
2854.6384 653.66534 l
S
2906.4729 858.24774 m
2906.4729 653.66534 l
S
903.5788 1017.2689 m
654.19037 873.28448 l
S
851.74438 1047.1954 m
654.19037 933.1377 l
S
654.19037 873.28448 m
404.80225 1017.2689 l
S
404.80225 1017.2689 m
404.80225 1305.2375 l
S
456.63663 1047.1954 m
456.63663 1275.3109 l
S
404.80225 1305.2375 m
654.19037 1449.2217 l
S
824.89581 1350.665 m
903.5788 1305.2375 l
S
654.19037 1449.2217 m
758.87738 1388.7808 l
S
796.27618 1307.3354 m
851.74445 1275.3109 l
S
654.19037 1389.3685 m
730.25775 1345.4512 l
S
903.5788 1305.2375 m
903.5788 1017.2689 l
S
2631.1675 987.26886 m
2631.1675 1275.2373 l
S
2579.3333 1017.1954 m
2579.3333 1245.3108 l
S
2631.1675 1275.2373 m
2381.7795 1419.2219 l
S
2225.6206 1329.0635 m
2132.3911 1275.2373 l
S
2381.7795 1419.2219 m
2291.5212 1367.1112 l
S
2251.229 1283.9952 m
2184.2256 1245.3107 l
S
2381.7795 1359.3687 m
2317.1296 1322.043 l
S
2132.3911 1275.2373 m
2132.3911 987.26886 l
S
2132.3911 987.26886 m
2381.7795 843.28418 l
S
2184.2256 1017.1954 m
2381.7795 903.13745 l
S
2381.7795 843.28418 m
2631.1675 987.26886 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 24.297897 50.554359 cm
0 7.1728516 m
(#)s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 9.4726562 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -17 123 cm
654.19037 1161.2532 m
830.93811 1428.8462 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 86.2789 49.054359 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(#)s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 9.4726562 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -17 123 cm
2381.7791 1131.2529 m
2190.6187 1467.6764 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 178.42155 89.503975 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
("&)[ 7.221680 0.000000 ] xS
1 0 0 -1 198.1579 96.624229 cm
0 7.1728516 m
(&")[ 7.221680 0.000000 ] xS
/F1.1[ 7.5 0 0 -7.5 0 0]sf
14.443359 9.4726562 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -17 123 cm
4228.3784 692.87781 m
4275.1421 666.27148 l
S
4124.5737 831.94922 m
4123.2612 1039.6122 l
S
4123.2612 1039.6122 m
4371.7344 1185.1702 l
S
4122.8828 1099.4642 m
4319.7119 1214.7686 l
S
4371.7344 1185.1702 m
4369.9141 1473.1333 l
S
4369.9141 1473.1333 m
4119.6211 1615.5385 l
S
4318.27 1442.8798 m
4119.999 1555.6865 l
S
4119.6211 1615.5385 m
3871.1477 1469.9807 l
S
3871.1477 1469.9807 m
3872.968 1182.0181 l
S
3923.1702 1440.3824 m
3924.6121 1212.2716 l
S
3872.968 1182.0181 m
4123.2612 1039.6122 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 342.90512 82.292046 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(&)s
1 0 0 -1 357.30243 82.472054 cm
0 7.1728516 m
(&)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -17 123 cm
7243.8442 980.97455 m
7184.7632 1170.8531 l
S
7293.3384 996.37469 m
7245.4458 1150.2939 l
S
7184.7632 1170.8531 m
7419.8325 1337.191 l
S
7419.8325 1337.191 m
7650.6699 1165.028 l
S
7650.6699 1165.028 m
7587.6436 978.99976 l
S
7469.2632 893.40033 m
7365.356 894.69946 l
S
7641.0449 775.30322 m
7724.6035 657.21796 l
S
7184.7632 1170.8531 m
6912.0225 1263.2577 l
S
7650.6699 1165.028 m
7925.6357 1250.5844 l
S
6912.0225 1263.2577 m
6662.6338 1119.2733 l
S
6860.188 1293.1843 m
6662.6338 1179.1265 l
S
6662.6338 1119.2733 m
6413.2456 1263.2577 l
S
6413.2456 1263.2577 m
6413.2456 1551.2264 l
S
6465.0801 1293.1842 m
6465.0801 1521.2998 l
S
6413.2456 1551.2264 m
6662.6338 1695.2104 l
S
6833.3394 1596.6539 m
6912.0225 1551.2264 l
S
6662.6338 1695.2104 m
6767.3208 1634.7697 l
S
6804.7197 1553.3243 m
6860.188 1521.2998 l
S
6662.6338 1635.3573 m
6738.7012 1591.4399 l
S
6912.0225 1551.2264 m
6912.0225 1263.2577 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 324.72006 38.254917 cm
0 7.1728516 m
(#)s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 9.4726562 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -17 123 cm
6662.6338 1407.2421 m
6830.1841 1660.91 l
S
7925.6357 1250.5844 m
7925.6357 1538.5527 l
S
7977.4697 1280.5109 m
7977.4697 1508.6262 l
S
7925.6357 1538.5527 m
8175.0234 1682.5375 l
S
8331.1826 1592.3789 m
8424.4121 1538.5527 l
S
8175.0234 1682.5375 m
8265.2822 1630.4268 l
S
8305.5742 1547.3107 m
8372.5781 1508.6262 l
S
8175.0239 1622.6842 m
8239.6738 1585.3585 l
S
8424.4121 1538.5527 m
8424.4121 1250.5844 l
S
8424.4121 1250.5844 m
8175.0234 1106.5996 l
S
8372.5781 1280.511 m
8175.0239 1166.4529 l
S
8175.0234 1106.5996 m
7925.6357 1250.5844 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 400.33957 35.888584 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(#)s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 9.4726562 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -17 123 cm
8175.0239 1394.5684 m
8359.0391 1718.4164 l
S
7724.6035 657.21796 m
7724.6035 369.24918 l
S
7776.438 627.29132 m
7776.438 399.17581 l
S
7724.6035 369.24918 m
7973.9922 225.26482 l
S
7973.9922 225.26482 m
8223.3799 369.24918 l
S
7973.9922 285.11795 m
8171.5459 399.17575 l
S
8223.3799 369.24918 m
8223.3799 657.21796 l
S
8223.3799 657.21796 m
7973.9922 801.20203 l
S
8171.5459 627.29132 m
7973.9922 741.34894 l
S
7973.9922 801.20203 m
7724.6035 657.21796 l
S
5882.396 1080 m
4957.1909 1080 l
S
CM
288.96307 69 m
288.96307 69 275.42792 65.613708 275.42792 65.613708 c
275.42792 65.613708 277.11981 67.518501 277.11981 69 c
277.11981 70.918999 275.42792 73.386292 275.42792 73.386292 c
275.42792 73.386292 288.96307 69 288.96307 69 c
288.96307 69 288.96307 69 288.96307 69 c
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 5 28.200195 cm
/F2.1[ 10 0 0 -10 0 0]sf
0 7.7001953 m
(!)s
/F2.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 10 m
(")s
/F1.1[ 10 0 0 -10 0 0]sf
11.392822 7.7001953 m
('\('"\)'*+,-\)'*+./\)'*+!,-)[ 2.778320 5.839844 2.778320 7.221680 2.778320 2.778320 5.561523 3.330078 8.330078 5.561523 2.778320 2.778320 5.561523 3.330078 7.221680 2.221680 2.778320 2.778320 5.561523 3.330078 7.778320 8.330078 0.000000 ] xS
1 0 0 -1 245.14569 81.009766 cm
0 7.7001953 m
(012!3)[ 2.778320 6.669922 5.561523 7.778320 0.000000 ] xS
1 0 0 -1 245.22137 66.232422 cm
0 7.7001953 m
(012!")[ 2.778320 6.669922 5.561523 7.778320 0.000000 ] xS
1 0 0 -1 156.31508 74.648926 cm
0 7.7001953 m
(4)s
1 0 0 -1 67.217377 74.648926 cm
0 7.7001953 m
(4)s
1 0 0 -1 5 13.200195 cm
/F2.1[ 10 0 0 -10 0 0]sf
0 7.7001953 m
(!)s
/F2.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 10 m
(#)s
/F1.1[ 10 0 0 -10 0 0]sf
11.392822 7.7001953 m
('\('"\)'*+15\)'*+./\)'*+!,-\)'*+&!)[ 2.778320 5.839844 2.778320 7.221680 2.778320 2.778320 5.561523 3.330078 6.669922 2.783203 2.778320 2.778320 5.561523 3.330078 7.221680 2.221680 2.778320 2.778320 5.561523 3.330078 7.778320 8.330078 5.561523 2.778320 2.778320 5.561523 3.330078 7.221680 0.000000 ] xS
/F1.1[ 7.5 0 0 -7.5 0 0]sf
143.37036 10 m
(%)s
ep
end
%%Trailer
%%EOF
