%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.3 (Build 18D109) Quartz PS Context)
%%Title: pyrazolines_cycloaddition.eps
%%Creator: ChemDraw Professional(tm) 16.0.1.4
%%CreationDate: 2019-10-19 04:24:03 +0000
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 351 73
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: © 1985–2017 PerkinElmer Informatics, Inc.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 351 73
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: PTYFRA+Helvetica
%!FontType1-1.0: PTYFRA+Helvetica 1.0000.0.0000
14 dict begin/FontName /PTYFRA+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /R put
dup 34 /one put
dup 35 /N put
dup 36 /two put
dup 37 /O put
dup 38 /three put
dup 39 /X put
dup 40 /Y put
dup 41 /C put
dup 42 /u put
dup 43 /I put
dup 44 /H put
dup 45 /hyphen put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<




B70342750128F6E37946B5896238641A030EFC29B90112706F4B35536B7D938C4B85BB76D0FEF6A3AC7A47654C3631576AAA000000010031FFD9041A059A003100C4401F490C532D6529632D7529752D069626014B082B0A182B140D03F93114350D20B8012340141135107F0D0D311B3524050735310D1896274411B8014A400F0A382E6F021F2920810327023347321076C418D4EDF4ED10F5EDEDF4ED003FED3FED12392FF4FDE610ED10ED111239011112393130437940362F301926000905261D2522260600032800040308300A28011C231F28001A251828010401072800092F0728001E211B280119261B2801002B2B2B2B012B2B2B103C2B2B2B2B818181005D015D0402353316171633323635342623220607351E013332373635342623220706072334373621321615140706071E01151400230116E5BC0C2846B78EACB5A11225131C26166541729865B4452605B2406E0115DBF0472C46717FFEF2F8270117C88B3F719878947601019F03022038906B7478427AA070C8C3B98452331D1FB180CDFEFE0000000002005AFFDA057105E5001D001E00B1403B1B0597019605031F011F0482018705891305530803861D111115063A1D030C3A15091E021E1E190331023B1031111A20093119191F20A1216A66182B2B4EF44DED4E10F64DEDF4ED12392F003F3FED3FED12392F10ED31304379403A001C172513260E251B260B160932000D1410320112110F10071C0932000500033201010204030A180C32000F120C3200081A06320104010632012B2B2B2B01103C103C2B2B103C103C2B2B2B2B2B2B815D015D080117232E0123220011101233323736373306070621202726111037362123041E013411C221C5B2D9FEF5F1EFDC733D1EC21A92AFFED7FF00AEE5ACBA01472805E5FEDABB8EA6FECFFEC5FEFEFEBFA95991E89DBD9BCD01AC0145D0E20000000100A10000052F05BD000B003F402108091E0302020401020A070804072506051A0D010A250B00190C0C0DA0217670182B2B104EF43C4DFD3C4E10F63C4DFD3C003F3C3F3C392F3CFD3C3130133311211133112311211123A1C902FCC9C9FD04C905BDFDA1025FFA4302AFFD510000000100C90000019205BD00030017B8002B2BBA00010000002E2B00B800002FB800022F303113331123C9C9C905BDFA430002009C0000052A05BD0009000A007640143701380602070117012701470158020507010202B8019B4017120606070207080301020806080A030A0A010608020302B8019BB505041A0C0708B8019B400A0900190B0CA0217670182B2B4EF43C4DFD3C4E10F63C4DFD3C11123939392F003F3F3C3F3C12393904872E2B877DC53130005D015D13330111331123011123019CEB02E6BDDFFD0FBE023A05BDFB5A04A6FA4304A5FB5B05BD000000030050FFD505E8
05E5000F001B001C008A402C8705C700C701C302C808C90A064308153A0F031B3A07091C021C1C0B1231031A1E18310B191D1ED8216A66182B2B4EF44DED4E10F64DED12392F003F3FED3FED313043794032001A0D26012509250526160E18320014001232011A081832001006123201170C1532011302153201190A1B320011041B32002B2B2B2B012B2B2B2B2B2B2B2B81005D0017161110070221202726111037122100123510002322001114122103049BBB92A7C4FE95FEADC2AD94BE0174011BEBFEF1EBE4FEE0F701150E05E5FAC3FED0FEB7DAFF00E0D8014A012AD40110FAA20179F50103013CFEC7FECFF4FEB1055E000200B40000057805BD0009002700944012070D49014805590158056905641478050816BB01300119001B011C40422321202660127112751403121E1F141C1503211E161404261224251E0009091B071E0B02261C1B082025151F251603310F691B1A29082625270A192829D6219566182B2B4EF43C4DFD3C4E10F64DF4EDD4EDD4ED003F3C3C3FFD12392F3CFD3C3911173901111239391239395D1112392B3130015D013236353427262321110321321716151406071E011F011617161715232E012F012627262321112303478CA3723D66FE1AC702A8A86DCF6D6256570507030B122EF40A0C040C0764397AFE3BC7031C70929D391EFE0A02A1315EFD84A833237280C55429461421133C56F590311BFD8A0001002A0000053405BD000B00BC4070280136024702570357046703670476027808880186040B270B3702370538086805050203020103251204040508070809072512060506080907080925120A0B0A0201020301251200000B0205080B040301070604030201090A0300080A0604000205080B08090107091A0D0301190C0DB8010CB3218E5E182B2B194EF44D18C4104E19F64D18C411121739003F173C3F3C3C3C1112173901874D2E2B0810C005872E2B0810C00587102B0810C00587102B0810C03130005D015D212309013309013309012301011AF0020EFE13F901770174EDFE130205F7FE7402F102CCFDCE0232FD34FD0F025C0002002A0000054705BD00080009008F402A8804011428042512030203002512010102050802080701030403000207080903090904000B17171A0304B801004009060202050625010807B80100B500190A8E5E182B194E10F44DF43C3918FD3C393D2F1019F4394E456544E6111239182F003F3F3F173C1239392E3C05874D2E2B872E182B4B5279B7050402030800010204877D10C404877D10C43130015D133309013301112311132AE801A601A6E9FDD5C76605BDFD3E02C2FC93FDB00250036D000000020080FFE303DE044900170018005E403AB814C81402091308141913191428067703D707070800050E0A00060D0A051D120B180718180B160D2E0A


00>] def
/CharStrings 15 dict dup begin
/.notdef 0 def
/hyphen 1 def
/one 2 def
/two 3 def
/three 4 def
/C 5 def
/H 6 def
/I 7 def
/N 8 def
/O 9 def
/R 10 def
/X 11 def
/Y 12 def
/u 13 def
/u20B8 14 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4179358 def
currentdict currentfile eexec

ED2D29E689B1D2AD93DBA1B71F5B52623046BDD0E27ABE5035C2123013C8790578DAD836C7E33E52646395AF27AB9B80F25DC3A044B6A7935FF26A100638652464F675A6E16E6546D50C1450C716CF2AA44F7E708715712AAEB8BBC9D9EFEEC6DD70336A87A4DB26DC814402F5508DDA18184CD93A89BD8D7A15F28A1C0FF2184D9341179FF8E0A8860C0BAD85A69525B866C0F522332897F36B801A3ED541F698DBC669008345DDD852467DC9609E32F8C9BCE743E22D56671937D328B30E10D8DFD3B00927F3E2BF65ABD374CBAD2F4F0643B9F9577B4EA236DF149CAF7B80AE290145382FE4D257F873F677A126409AD1FC393E820C003A0098217E7193BDE1A2655567C93562504F1289DCF7B931239AA14CB8C5BA291A7C2D893F4824B93C62F651A80A741A36F2439D0610FF01AE30347768C0A2587CFD10CFDB9D3BBDE54A26540FCA6B7D72A85915824F4B62391A6AF142796DF3D212297607C23F84FD75A3A646204AC7E44557E7DF60309A43D3E2F46500D8041D3FBAC81CB066FCA851AFEDCD60623AF6B1FBC5FA0E22D9AF4786E8BA9BEA3F4A478327E050E0A94FFA3DF1C8469F9FA21BCE2A45F7C8841255F6BC9F75E4FC90E2A44F3A75A98B87B5F72AA674279C5D80381F89036432DCF01F3930B760A5A06B0B065FBB909F939E329E7D482252F82F1D45A168A87FDAF4B175167F093954891C032B86993F47816D05710E94C6773C7F9AD926E3E40C85165AB425C2614E3D5D82D2192080D7C6FA47F871CA76367BB6DF0CD232C1A8B0274767B71A70F9E28730CD6D379AD13D425D1393CC32C0842CA2F0FFB8C38C220915CBCDDC02809E5277A0F4036505ED623848F979D10ABEEC6A79DE6E332EA410ED75C77AEC27740A377AE5BD679B8ED7E7ABA2C48A2BEAC0DC4B8B051492D8526B015F92177A54B00D7544CF515A8DE2597451C12A33FE867983FA2D476B55E3EFD82A200AF53FD97AF566469F6A8517B4C76AD287C85A49E9577F73C564826873DDCFB8A3A5D8B4555D8CB33E721F542D8737CC68C59F049645411A63FC742AE16F01AE92007E94A9650FDD63DC1ADFC4B380ADEBBEE2DA9704353FC8FE1D92DB84DB50864D09E3479A1C9B06AC01DDAB29946B24C20F7A85C079EC47F3646958C270F1C372904515F33CEC237276541A5C27F9B8484C97FCF1F64A90C749BD18E26D5471A8D23206093A5814327F6CCE043C29A63F7E6F89B493C6201BE687B66049393C0018A0351AB5BA913541905029ABF3933B90737E5B791EC89681AE68ED9A2EB8CD670C0348AC01C35D0656B1390EC57633FE64FADBFF9E4A4A9BF49042E6D7BB9EB611DC19B07AABFFE293C706315A203B33FF8EDF6CB10FE624F5E5F9EAEDF7BC84B4E733828CD124F5A7EAD9447BE0C2BEE9783EF0B73CA7BA4644113E8E26783F69803E104AD2
2B74BC7B9D9BA66404EA78B92B3DF11A67B249DF27499C7132DDA1F3DE8A5AE01BB1BB3883576D2E46A15618E24C52230F14D44B167958319F735DF8AF82E1F58DD1DCA8627F99A740642F1D61215E302485E4F3A6E9BEAD8380280A4F77CCCC9B8A8291A9B6D5CD8BE7B3CEAE3D5735C553A12A8B933391BCA2704C37E2A526472042FFB782229D477E0854553A7A90778AB505FD463C36F4716DC0CA2D19D9123A138B1163AF6517CA866556051CD46CA359D15F7F635D35E38E7274D94908AB24C01C15A9B3859A1C937C683015726BEADE9D0BE7A383B966A04BC360303DE44C2239E039B3C42715848165E3A41CEB9804A27C522ADF2F8B2B4083
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/PTYFRA+Helvetica cguidfix
/F1.1/PTYFRA+Helvetica renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 sc
q
0 73 m
351 73 l
351 0 l
0 0 l
h
0 73 m
W
0 0 351 73 rc
-1 73 m
352 73 l
352 -1 l
-1 -1 l
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 1.9167948 25.006233 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 8.8085938 m
(!)s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.222168 m
(")s
20 w
1 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -153 99 cm
3330.0288 1485.8877 m
3419.9409 1433.9769 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 14.386208 45.786018 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(#)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -153 99 cm
3419.9409 1433.9769 m
3419.9409 1246.3109 l
S
3368.1067 1404.0503 m
3368.1067 1246.3109 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 26.855619 52.985237 cm
0 7.1728516 m
(#)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -153 99 cm
3502.343 1098.4332 m
3554.29 1068.4417 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 1.9167948 53.82325 cm
0 8.848877 m
(!)s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.2624512 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -153 99 cm
3303.4048 1078.726 m
3279.0547 1064.6675 l
S
3629.238 1246.615 m
3629.238 1282.41 3600.2205 1311.4275 3564.4255 1311.4275 c
3528.6306 1311.4275 3499.613 1282.41 3499.613 1246.615 c
3499.613 1210.8201 3528.6306 1181.8025 3564.4255 1181.8025 c
3600.2205 1181.8025 3629.238 1210.8201 3629.238 1246.615 c
h
S
0 J
3528.1338 1241.8025 m
3591.092 1241.8025 l
S
3559.613 1210.3234 m
3559.613 1273.2817 l
S
1 J
3758.8948 1053.7344 m
3918.7175 1146.0082 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 51.516125 53.082893 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.3681641 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -153 99 cm
3892.8003 1131.0448 m
4061.2124 1033.812 l
S
3918.7175 1175.9347 m
4087.1296 1078.7019 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 39.325031 32.2201 cm
0 8.8378906 m
(!)s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.2514648 m
(&)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -153 99 cm
3918.7175 1146.0082 m
3918.7175 1315.139 l
S
3893.0261 904.88354 m
3893.0261 940.67847 3864.0085 969.69604 3828.2136 969.69604 c
3792.4187 969.69604 3763.4011 940.67847 3763.4011 904.88354 c
3763.4011 869.08856 3792.4187 840.07104 3828.2136 840.07104 c
3864.0085 840.07104 3893.0261 869.08856 3893.0261 904.88354 c
h
S
0 J
3791.9221 900.07104 m
3854.8804 900.07104 l
S
1 J
5856.7158 1249.4497 m
4525.9473 1249.4497 l
S
CM
151.67906 36.527512 m
151.67906 36.527512 138.14391 33.141224 138.14391 33.141224 c
138.14391 33.141224 139.8358 35.046013 139.8358 36.527512 c
139.8358 38.446514 138.14391 40.913803 138.14391 40.913803 c
138.14391 40.913803 151.67906 36.527512 151.67906 36.527512 c
151.67906 36.527512 151.67906 36.527512 151.67906 36.527512 c
h
f
0.050000001 0 0 -0.050000001 -153 99 cm
5163.9565 1051.0522 m
5451.9111 1048.2074 l
S
5164.4688 1102.8842 m
5452.4233 1100.0392 l
S
5164.9805 1154.7159 m
5452.9355 1151.8711 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 87.490738 47.799973 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(')s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -153 99 cm
5164.4688 1102.8842 m
4985.9385 1104.6479 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 130.68394 48.226707 cm
0 7.1728516 m
(\()s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -153 99 cm
5452.4233 1100.0392 m
5645.7568 1098.1292 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 104.89544 33.759933 cm
0 7.7001953 m
(\)*+)[ 7.221680 5.561523 0.000000 ] xS
1 0 0 -1 176.84717 42.414268 cm
0 7.1728516 m
(#)s
1 0 0 -1 190.54089 46.863628 cm
0 7.1728516 m
(#)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -153 99 cm
6669.1602 1313.7458 m
6669.1602 1501.4119 l
S
6669.1602 1501.4119 m
6943.0347 1590.3992 l
S
6943.0347 1590.3992 m
7112.2983 1357.4275 l
S
6923.2358 1529.4642 m
7048.2275 1357.4275 l
S
7112.2983 1357.4275 m
7009.1895 1215.5101 l
S
6828.7534 1161.5883 m
6753.7358 1185.9628 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 213.67841 35.21505 cm
0 7.1728516 m
(')s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -153 99 cm
7112.2983 1357.4275 m
7305.6382 1357.4275 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 195.26614 9.8727407 cm
0 7.1728516 m
(\()s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -153 99 cm
6943.0347 1590.3992 m
6989.188 1732.444 l
S
6978.1211 1016.4708 m
7032.022 850.58136 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 185.0775 71.355141 cm
0 7.3681641 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -153 99 cm
7022.7739 879.04327 m
6897.874 740.32764 l
S
7061.2944 844.35925 m
6936.3945 705.64368 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 209.07405 64.383484 cm
0 8.8378906 m
(!)s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.2514648 m
(&)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -153 99 cm
7032.022 850.58136 m
7223.3394 809.91559 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 165.19859 51.715469 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 8.848877 m
(!)s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.2624512 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -153 99 cm
6558.752 1133.2268 m
6526.6494 1109.9031 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 165.19859 20.370512 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 8.8085938 m
(!)s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.222168 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -153 99 cm
6669.1602 1501.4119 m
6595.0815 1555.2334 l
S
8425.8682 1249.4497 m
7751.6147 1249.4497 l
S
CM
280.13666 36.527512 m
280.13666 36.527512 266.6015 33.141224 266.6015 33.141224 c
266.6015 33.141224 268.2934 35.046013 268.2934 36.527512 c
268.2934 38.446514 266.6015 40.913803 266.6015 40.913803 c
266.6015 40.913803 280.13666 36.527512 280.13666 36.527512 c
280.13666 36.527512 280.13666 36.527512 280.13666 36.527512 c
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 248.58856 48.537277 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.7001953 m
(%,)[ 7.778320 0.000000 ] xS
/F1.1[ 7.5 0 0 -7.5 0 0]sf
15 4.1137695 m
(-)s
1 0 0 -1 305.30475 51.278908 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(#)s
1 0 0 -1 318.99847 55.728264 cm
0 7.1728516 m
(#)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -153 99 cm
9238.3115 1136.453 m
9238.3115 1324.119 l
S
9238.3115 1324.119 m
9512.1865 1413.1064 l
S
9512.1865 1413.1064 m
9681.4502 1180.1346 l
S
9681.4502 1180.1346 m
9578.3408 1038.2173 l
S
9617.3799 1180.1348 m
9536.4062 1068.6848 l
S
9397.9053 984.29547 m
9322.8877 1008.67 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 342.13599 44.079689 cm
0 7.1728516 m
(')s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -153 99 cm
9681.4502 1180.1346 m
9874.79 1180.1346 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 323.72372 18.737375 cm
0 7.1728516 m
(\()s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -153 99 cm
9512.1865 1413.1064 m
9558.3398 1555.1512 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 293.65619 60.580101 cm
0 8.848877 m
(!)s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.2624512 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -153 99 cm
9127.9033 955.93396 m
9108.8916 942.12097 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 293.65619 29.235147 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 8.8085938 m
(!)s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.222168 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -153 99 cm
9238.3115 1324.119 m
9164.2334 1377.9406 l
S
ep
end
%%Trailer
%%EOF
