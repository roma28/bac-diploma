%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.3 (Build 18D109) Quartz PS Context)
%%Title: chromophore_shapes.eps
%%Creator: ChemDraw Professional(tm) 16.0.1.4
%%CreationDate: 2020-01-12 10:55:55 +0000
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 335 276
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: © 1985–2017 PerkinElmer Informatics, Inc.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 335 276
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: GJRMHM+Helvetica
%!FontType1-1.0: GJRMHM+Helvetica 1.0000.0.0000
14 dict begin/FontName /GJRMHM+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /N put
dup 34 /R put
dup 35 /B put
dup 36 /u put
dup 37 /P put
dup 38 /F put
dup 39 /six put
dup 40 /hyphen put
dup 41 /O put
dup 42 /two put
dup 43 /E put
dup 44 /t put
dup 45 /one put
dup 46 /four put
dup 47 /three put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<








00>] def
/CharStrings 17 dict dup begin
/.notdef 0 def
/hyphen 1 def
/one 2 def
/two 3 def
/three 4 def
/four 5 def
/six 6 def
/B 7 def
/E 8 def
/F 9 def
/N 10 def
/O 11 def
/P 12 def
/R 13 def
/t 14 def
/u 15 def
/u20B8 16 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4179358 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B322782D282AC603D1F5A452D1E7AE90B2FF78B151C731C717F5B5A2ECE57D3BD22888D365366CD700C67657245FE4E64FD98C2089406F6AF616EE272D822AE1D0F5FA55576E84178659053C4226366C59D493E2F81CDF74C30028211AA0261F28BCEE4518C5E1EA309FC8A428B147E1987A8F8BAF6E7D9D13339B9C9C0D153EDB2F9AB044CCBD4E4D4A283601A5A78C2A8330C1080FAE7F02EBE10CF50AA7C5F46235FA65C94F901A42EE7186D1762C708D2EE31294A2BD737962FC41CF7B704BBAFD5DA1DDC79593229B45CD85FA4282C7325E81845F0A9E30B91AE6D544A359C036A44572871575B29255E0C342D77B8FB19CFFFA19235CDCAB71D711EAB67891830D5A0DDA914C5DECFC26C3B4861667D1743C01D77263545138F4742659C5EB1F85FE30171763A1E7B890B157FA32693B4ADEDDA32FD8F7B4D02129DF395F80E46D2F620AF70C14BB7345FFDD534859C7CE231B21918DA3196DB26B04D8C98E7CD3203C5EBDD71567963BB4B5262BED5BD8CD706693E95A4E62D0CC6D45C5AF7D7DD45F774CA24869F8DA27DA12E5ACCC2A9DAFDD39476966BCDE7A0BC3438F71C870A596959FC6FCF4B01EC53C4A971AE87EA9644B47E06E838B6398FA5B80BA9D30BE197D555784069CEED38BAD2430623D172CFF61FEA18CDC5B5607D00472C49DD5026D2AC7BE3A59639D3F0353795D9922151DD278A75F19E51F5F4A62AD9B8DC1ED3EB1B580B875EB7425B8AE98A02E68754D9AA51B29035719BA
CCAAD9648388571A24BD9FB01BF50F386A1203EDDFE8FA266FFE3E708BF67944AA5DC7C406989771B9EB393C7539E7CFD3BF158853BEEFD7AB705587FD7A20AB209317D56C7B0807B5725670EAF1D9534E8368A899B8DC55FBF2D9090E47D81CBCB9F5C00CB9123D5D1EB6C9A484981DF9354D924787EF702537BA808AA5BDA09457312C3B5DD1742CB11486582851DD8F2AA995ED0F7E1898D2187E5B5E5CE39286A11FE90703FC6CE2D6CD4D49BD92C40CC02326B466606E1B5A85EA8E40E4C6E234E494515E1BABC731E92F86881C1892C6229A81D6F2E0A99A12C35A424BE306478BDE6FD0E48F460E2EEA7AE6D36AC060704326E15ACF60941930ED1FE1EEA15A85682E1DA25634E8ED50A1DCBE9EEE642E6E1B9737179173B607FBE5E0D70ECC675805D3AB3E05842009A0D48EE762A19EF65FD826BE099D77C961581047A90B17EA8913D6166F3F9295FA122CFFDB99DFE7F4358455359F2D805255087F97E88B9178B314069CAF1FAC2542E5717F395F0DE4240CDF75CDF9EDFDA4653448008508B5C17AF6117F73AF74EBC1BE1F40DCD7177BD90D44BADA2596EB430557A4885C5C50DE55A586DCCD2869A2BA6ECEC1CE7F1C5B2453B6B2C9B5600113DBDDEE1BB09CD132A4ED152F71BDFB6620D0371A70A422EF4035CB5C6158D1B59DEC1314A06A60869B23A4CFA21D38AF318D1EAFDA9CD84EF7FE4C4E5294008599F0D7BD81F21E044D720630DAA5516D4338CD7FE2494346AAFC9880D0E6993B1B7A496E2E6447376C2548684CE176DCACCEF08D5080F13CE68446423D2B3B91E83E52091591F9CD3B29F5C8F65F7C82506256427ACE98F8C267BE65A2F64B7077DC22C89CC231F42B0C810A7C659AE806F828945068D4843DED10D7D0D0767053E300AE5EDE3B7B13EF3699BE2EC8DFCEC06377776ED289F726466F304FB721595C26E545800C247B1676F77217DA5A5C6BE281D141559E0A628C701696DC9E03942E93812A314D64DF8F10DA3CEB28EFBB51B71771ACC5ECC9B8890ABDBA719FCEFF06C8FAA1DFAEC5C77EF1C62EDF2A6F3CF4D8965699B2C382214555BA0BC2A1BB82EEC135AF6F83127FEC8D6A7D85089615613CAC0A15883B0E300E20B05051B88DA96A8764F46AD8014F47D179C7D148988EE4B8C8FD627CF3997923DA63747D814B6A83B378712705ED8553D6852888E31D9FC3172335B60FDF6FCF72B54936D44C0210551D66268B41D758DC8B684F0E5ABB512BADC6B843E10DF6930EBC3AC69B3EC3DCD78BE48209FA7870DB47C1B5C605FCA4F5809AD2E8D700E12603C3B2800CAA46AFEC85332CD73FA676E267B18CACDBD47D15A9EFE9E8FC50586162F336F6B70C3F62D79888D63A724FB14E584C2C192711B1537923F1581007FD6AE40DF09B4D735A90548586268A55E0FAFFC417C552F17D06C022A971

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/GJRMHM+Helvetica cguidfix
/F1.1/GJRMHM+Helvetica renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 sc
q
0 276 m
335 276 l
335 0 l
0 0 l
h
0 276 m
W
0 0 335 276 rc
-1 276 m
336 276 l
336 -1 l
-1 -1 l
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 72.441956 60.643948 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!)s
20 w
1 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -7 279 cm
1226.2458 4693.2227 m
1514.1953 4696.5552 l
S
1256.7703 4641.7383 m
1484.8706 4644.3779 l
S
1514.1953 4696.5552 m
1599.9504 4551.9146 l
S
1601.0477 4342.0781 m
1519.9669 4197.812 l
S
1555.861 4367.4741 m
1489.4425 4249.2964 l
S
1519.9669 4197.812 m
1232.0173 4194.48 l
S
1232.0173 4194.48 m
1085.1569 4442.1851 l
S
1261.3422 4246.6567 m
1145.0061 4442.8779 l
S
1085.1569 4442.1851 m
1226.2458 4693.2227 l
S
1232.0173 4194.48 m
1090.9285 3943.4421 l
S
1045.7416 3968.8381 m
904.65265 3717.8005 l
S
1090.9285 3943.4421 m
949.83942 3692.4045 l
S
1136.1152 3918.0461 m
995.02618 3667.0085 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 29.826683 111.01808 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -7 279 cm
949.83942 3692.4045 m
860.7511 3533.8909 l
S
1226.2458 4693.2227 m
1079.3854 4940.9282 l
S
1123.9724 4967.3633 m
977.11188 5215.0688 l
S
1079.3854 4940.9282 m
932.5249 5188.6338 l
S
1034.7985 4914.4937 m
887.93793 5162.1987 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 28.672382 11.269462 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -7 279 cm
932.5249 5188.6338 m
854.03754 5321.0161 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 87.115303 60.477337 cm
0 7.1728516 m
(#$)[ 6.669922 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -7 279 cm
1756.0941 4449.9492 m
1865.03 4451.21 l
S
1531.2885 4444.5107 m
1531.2885 4480.3057 1502.271 4509.3232 1466.476 4509.3232 c
1430.681 4509.3232 1401.6635 4480.3057 1401.6635 4444.5107 c
1401.6635 4408.7153 1430.681 4379.6982 1466.476 4379.6982 c
1502.271 4379.6982 1531.2885 4408.7153 1531.2885 4444.5107 c
h
S
0 J
1430.1843 4439.6982 m
1493.1427 4439.6982 l
S
1461.6635 4408.2188 m
1461.6635 4471.1772 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 80.772102 75.118103 cm
0 7.7001953 m
(%&)[ 6.669922 0.000000 ] xS
/F1.1[ 7.5 0 0 -7.5 0 0]sf
12.77832 10 m
(')s
16.949463 4.1137695 m
(\()s
1 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -7 279 cm
3205.7568 372.36508 m
3200.2786 660.28174 l
S
3257.0125 403.27234 m
3252.6731 631.34662 l
S
3200.2786 660.28174 m
3446.8828 808.98425 l
S
3446.8828 808.98425 m
3698.9648 669.77014 l
S
3448.0212 749.14191 m
3647.7092 638.86292 l
S
3698.9648 669.77014 m
3704.4431 381.85355 l
S
3704.4431 381.85355 m
3457.8391 233.15099 l
S
3652.0488 410.78864 m
3456.7004 292.99335 l
S
3457.8391 233.15099 m
3205.7568 372.36508 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 161.45938 228.24138 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -7 279 cm
3446.8828 808.98425 m
3443.3782 993.17291 l
S
3545.2388 1159.5131 m
3688.0085 1245.6034 l
S
3340.8081 1152.4559 m
3189.3223 1236.115 l
S
3688.0085 1245.6034 m
3682.5305 1533.5201 l
S
3739.2644 1276.5107 m
3734.9248 1504.585 l
S
3682.5305 1533.5201 m
3929.1345 1682.2227 l
S
3929.1345 1682.2227 m
4181.2168 1543.0085 l
S
3930.2732 1622.3802 m
4129.9609 1512.1013 l
S
4181.2168 1543.0085 m
4186.6948 1255.0919 l
S
4186.6948 1255.0919 m
3940.0908 1106.3894 l
S
4134.3008 1284.027 m
3938.9521 1166.2317 l
S
3940.0908 1106.3894 m
3688.0085 1245.6034 l
S
3189.3223 1236.115 m
2942.7183 1087.4125 l
S
3136.928 1265.05 m
2941.5796 1147.2548 l
S
2942.7183 1087.4125 m
2690.6362 1226.6266 l
S
2690.6362 1226.6266 m
2685.158 1514.5432 l
S
2741.8918 1257.5338 m
2737.5522 1485.608 l
S
2685.158 1514.5432 m
2931.762 1663.2457 l
S
2931.762 1663.2457 m
3183.8442 1524.0316 l
S
2932.9006 1603.4033 m
3132.5886 1493.1244 l
S
3183.8442 1524.0316 m
3189.3223 1236.115 l
S
2685.158 1514.5432 m
2433.0757 1653.7573 l
S
4181.2168 1543.0085 m
4427.8208 1691.7111 l
S
2458.1343 1699.1321 m
2206.052 1838.3462 l
S
2433.0757 1653.7573 m
2180.9937 1792.9714 l
S
2408.0173 1608.3824 m
2155.9351 1747.5966 l
S
4454.5874 1647.3224 m
4701.1914 1796.0249 l
S
4427.8208 1691.7111 m
4674.4248 1840.4136 l
S
4401.0542 1736.0999 m
4647.6582 1884.8024 l
S
2180.9937 1792.9714 m
1928.9114 1932.1854 l
S
1928.9114 1932.1854 m
1682.3073 1783.4829 l
S
1682.3073 1783.4829 m
1430.2251 1922.697 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 48.291893 194.48436 cm
0 7.3681641 m
(\))s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -7 279 cm
1430.2251 1922.697 m
1274.0453 1828.5204 l
S
1090.8259 1825.2412 m
931.53888 1913.2086 l
S
931.53888 1913.2086 m
684.93481 1764.506 l
S
879.14453 1942.1437 m
683.7962 1824.3484 l
S
684.93481 1764.506 m
432.8526 1903.7201 l
S
432.8526 1903.7201 m
427.37445 2191.6367 l
S
484.10831 1934.6273 m
479.76877 2162.7017 l
S
427.37445 2191.6367 m
673.97852 2340.3394 l
S
673.97852 2340.3394 m
926.06073 2201.1252 l
S
675.11713 2280.4971 m
874.80499 2170.218 l
S
926.06073 2201.1252 m
931.53888 1913.2086 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 23.909809 209.25696 cm
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -7 279 cm
684.93481 1764.506 m
688.50513 1576.8616 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 22.814177 151.77129 cm
0 7.3681641 m
(!\))[ 7.221680 0.000000 ] xS
/F1.1[ 7.5 0 0 -7.5 0 0]sf
15 9.6679688 m
(*)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -7 279 cm
673.97852 2340.3394 m
670.51111 2522.5754 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 11.579607 216.69208 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -7 279 cm
589.47589 1415.7242 m
547.64319 1390.499 l
S
562.70941 1460.1129 m
520.87671 1434.8877 l
S
445.78256 1224.1588 m
449.28708 1039.9702 l
S
449.28708 1039.9702 m
701.36932 900.7561 l
S
450.42572 980.12787 m
650.11359 869.84888 l
S
701.36932 900.7561 m
706.84747 612.83948 l
S
706.84747 612.83948 m
460.24341 464.13693 l
S
654.45312 641.7746 m
459.1048 523.97925 l
S
460.24341 464.13693 m
208.16121 603.35101 l
S
208.16121 603.35101 m
202.68304 891.26764 l
S
259.4169 634.25824 m
255.07735 862.33258 l
S
202.68304 891.26764 m
449.28708 1039.9702 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 12.675239 274.27542 cm
0 7.1728516 m
(!+,)[ 7.221680 6.669922 0.000000 ] xS
/F1.1[ 7.5 0 0 -7.5 0 0]sf
16.669922 9.4726562 m
(*)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -7 279 cm
460.24341 464.13693 m
464.19409 256.49976 l
S
4674.4248 1840.4136 m
4921.0288 1989.1162 l
S
4921.0288 1989.1162 m
5173.1108 1849.9021 l
S
5173.1108 1849.9021 m
5419.7148 1998.6046 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 272.70071 190.21455 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.3681641 m
(\))s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -7 279 cm
5419.7148 1998.6046 m
5579.002 1910.6372 l
S
5762.2217 1913.9164 m
5918.4014 2008.093 l
S
5918.4014 2008.093 m
5912.9233 2296.0098 l
S
5969.6572 2039.0004 m
5965.3174 2267.0747 l
S
5912.9233 2296.0098 m
6159.5273 2444.7122 l
S
6159.5273 2444.7122 m
6411.6094 2305.498 l
S
6160.666 2384.8699 m
6360.3535 2274.5908 l
S
6411.6094 2305.498 m
6417.0874 2017.5815 l
S
6417.0874 2017.5815 m
6170.4834 1868.879 l
S
6364.6934 2046.5166 m
6169.3447 1928.7213 l
S
6170.4834 1868.879 m
5918.4014 2008.093 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 298.18726 204.03831 cm
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -7 279 cm
6170.4834 1868.879 m
6174.0537 1681.2346 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 297.09161 146.55264 cm
0 7.3681641 m
(!\))[ 7.221680 0.000000 ] xS
/F1.1[ 7.5 0 0 -7.5 0 0]sf
15 9.6679688 m
(*)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -7 279 cm
6159.5273 2444.7122 m
6156.0601 2626.9485 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 310.79135 210.99901 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -7 279 cm
6282.6455 1522.0453 m
6327.4473 1497.3032 l
S
6257.5874 1476.6705 m
6302.3892 1451.9285 l
S
6430.0176 1338.0203 m
6433.522 1153.8315 l
S
6433.522 1153.8315 m
6685.6045 1014.6175 l
S
6434.6606 1093.9893 m
6634.3486 983.71027 l
S
6685.6045 1014.6175 m
6691.0825 726.70087 l
S
6691.0825 726.70087 m
6444.4785 577.99835 l
S
6638.688 755.63599 m
6443.3398 637.8407 l
S
6444.4785 577.99835 m
6192.396 717.2124 l
S
6192.396 717.2124 m
6186.918 1005.1291 l
S
6243.6519 748.11969 m
6239.3125 976.19397 l
S
6186.918 1005.1291 m
6433.522 1153.8315 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 311.88699 268.58234 cm
0 7.1728516 m
(!+,)[ 7.221680 6.669922 0.000000 ] xS
/F1.1[ 7.5 0 0 -7.5 0 0]sf
16.669922 9.4726562 m
(*)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -7 279 cm
6444.4785 577.99835 m
6448.0488 390.35391 l
S
4226.749 4244.3438 m
4219.6997 4532.2261 l
S
4277.835 4275.5303 m
4272.251 4503.5776 l
S
4219.6997 4532.2261 m
4465.4883 4682.2725 l
S
4465.4883 4682.2725 m
4718.3267 4544.4365 l
S
4466.9536 4622.4375 m
4667.2402 4513.25 l
S
4718.3267 4544.4365 m
4725.376 4256.5537 l
S
4725.376 4256.5537 m
4479.5874 4106.5078 l
S
4672.8247 4285.2026 m
4478.1221 4166.3428 l
S
4479.5874 4106.5078 m
4226.749 4244.3438 l
S
4725.376 4256.5537 m
4978.2144 4118.7178 l
S
4718.3267 4544.4365 m
4964.1152 4694.4824 l
S
4226.749 4244.3438 m
3980.9602 4094.2976 l
S
4219.6997 4532.2261 m
3966.8613 4670.0625 l
S
3953.9519 4138.5396 m
3708.1631 3988.4934 l
S
3980.9602 4094.2976 m
3735.1714 3944.2515 l
S
4007.9685 4050.0557 m
3762.1797 3900.0095 l
S
4953.4038 4073.2068 m
5206.2417 3935.3706 l
S
4978.2144 4118.7178 m
5231.0522 3980.8813 l
S
5003.0249 4164.2285 m
5255.8628 4026.3923 l
S
4991.1235 4650.2407 m
5236.9126 4800.2866 l
S
4964.1152 4694.4824 m
5209.9043 4844.5288 l
S
4937.1069 4738.7246 m
5182.896 4888.7705 l
S
3991.6719 4715.5732 m
3738.8335 4853.4097 l
S
3966.8613 4670.0625 m
3714.0229 4807.8989 l
S
3942.0508 4624.5518 m
3689.2124 4762.3877 l
S
5231.0522 3980.8813 m
5483.8906 3843.0452 l
S
5209.9043 4844.5288 m
5455.6929 4994.5752 l
S
3714.0229 4807.8989 m
3461.1848 4945.7349 l
S
3735.1714 3944.2515 m
3489.3826 3794.2051 l
S
5483.8906 3843.0452 m
5729.6797 3993.0913 l
S
5536.4419 3814.3965 m
5731.1445 3933.2561 l
S
5729.6797 3993.0913 m
5982.5176 3855.2551 l
S
5982.5176 3855.2551 m
5989.5674 3567.3728 l
S
5931.4316 3824.0686 m
5937.0156 3596.0215 l
S
5989.5674 3567.3728 m
5743.7783 3417.3264 l
S
5743.7783 3417.3264 m
5490.9399 3555.1626 l
S
5742.313 3477.1616 m
5542.0264 3586.3491 l
S
5490.9399 3555.1626 m
5483.8906 3843.0452 l
S
5455.6929 4994.5752 m
5448.6436 5282.4575 l
S
5506.7793 5025.7617 m
5501.1948 5253.8086 l
S
5448.6436 5282.4575 m
5694.4321 5432.5034 l
S
5694.4321 5432.5034 m
5947.2705 5294.6675 l
S
5695.8975 5372.6685 m
5896.1841 5263.481 l
S
5947.2705 5294.6675 m
5954.3198 5006.7852 l
S
5954.3198 5006.7852 m
5708.5312 4856.7388 l
S
5901.7686 5035.4336 m
5707.0659 4916.5742 l
S
5708.5312 4856.7388 m
5455.6929 4994.5752 l
S
3461.1848 4945.7349 m
3215.396 4795.689 l
S
3408.6333 4974.3838 m
3213.9307 4855.5239 l
S
3215.396 4795.689 m
2962.5576 4933.5249 l
S
2962.5576 4933.5249 m
2955.5083 5221.4072 l
S
3013.644 4964.7114 m
3008.0598 5192.7588 l
S
2955.5083 5221.4072 m
3201.2971 5371.4536 l
S
3201.2971 5371.4536 m
3454.1353 5233.6177 l
S
3202.7622 5311.6187 m
3403.0491 5202.4312 l
S
3454.1353 5233.6177 m
3461.1848 4945.7349 l
S
3489.3826 3794.2051 m
3496.4319 3506.3228 l
S
3438.2964 3763.0186 m
3443.8806 3534.9714 l
S
3496.4319 3506.3228 m
3250.6433 3356.2766 l
S
3250.6433 3356.2766 m
2997.8049 3494.1128 l
S
3249.178 3416.1118 m
3048.8911 3525.2993 l
S
2997.8049 3494.1128 m
2990.7556 3781.9951 l
S
2990.7556 3781.9951 m
3236.5444 3932.0415 l
S
3043.3069 3753.3464 m
3238.0095 3872.2061 l
S
3236.5444 3932.0415 m
3489.3826 3794.2051 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 301.50943 112.42747 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 8.8085938 m
(")s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.222168 m
(-)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -7 279 cm
5989.5674 3567.3728 m
6141.5244 3484.5325 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 299.04211 11.688756 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 8.848877 m
(")s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.2624512 m
(*)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -7 279 cm
5947.2705 5294.6675 m
6105.1475 5391.0464 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 126.98997 116.71928 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 8.8452148 m
(")s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.2587891 m
(.)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -7 279 cm
2997.8049 3494.1128 m
2859.5557 3409.7158 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 124.52266 15.956762 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 8.8378906 m
(")s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.2514648 m
(/)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -7 279 cm
2955.5083 5221.4072 m
2870.928 5267.5171 l
S
ep
end
%%Trailer
%%EOF
