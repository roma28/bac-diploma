%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.3 (Build 18D109) Quartz PS Context)
%%Title: azomethine_resonance.eps
%%Creator: ChemDraw Professional(tm) 16.0.1.4
%%CreationDate: 2019-10-26 05:05:39 +0000
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 380 52
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: © 1985–2017 PerkinElmer Informatics, Inc.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 380 52
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: ZFOSWB+Helvetica
%!FontType1-1.0: ZFOSWB+Helvetica 1.0000.0.0000
14 dict begin/FontName /ZFOSWB+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /N put
dup 34 /R put
dup 35 /three put
dup 36 /four put
dup 37 /one put
dup 38 /two put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<




059A003100C4401F490C532D6529632D7529752D069626014B082B0A182B140D03F93114350D20B8012340141135107F0D0D311B3524050735310D1896274411B8014A400F0A382E6F021F2920810327023347321076C418D4EDF4ED10F5EDEDF4ED003FED3FED12392FF4FDE610ED10ED111239011112393130437940362F301926000905261D2522260600032800040308300A28011C231F28001A251828010401072800092F0728001E211B280119261B2801002B2B2B2B012B2B2B103C2B2B2B2B818181005D015D0402353316171633323635342623220607351E013332373635342623220706072334373621321615140706071E01151400230116E5BC0C2846B78EACB5A11225131C26166541729865B4452605B2406E0115DBF0472C46717FFEF2F8270117C88B3F719878947601019F03022038906B7478427AA070C8C3B98452331D1FB180CDFEFE000000000200340000042F059C0002000D005C402209020A080D010202BE12060607020601050708030106070A02750B05EF030C070403B80117B501960D08AC0AB80158B3050F470E1076C418D4F5F43CFDE4003F3FF43CFD3C1139390111123911123939872E2B047D10C50F3130011109011121350133113315231102A5FE3501CEFD8C029098D3D301FB0289FD77FE05015EB0038EFC5F9DFEA20000000002009C0000052A05BD0009000A007640143701380602070117012701470158020507010202B8019B4017120606070207080301020806080A030A0A010608020302B8019BB505041A0C0708B8019B400A0900190B0CA0217670182B2B4EF43C4DFD3C4E10F63C4DFD3C11123939392F003F3F3C3F3C12393904872E2B877DC53130005D015D13330111331123011123019CEB02E6BDDFFD0FBE023A05BDFB5A04A6FA4304A5FB5B05BD0000000200B40000057805BD0009002700944012070D49014805590158056905641478050816BB01300119001B011C40422321202660127112751403121E1F141C1503211E161404261224251E0009091B071E0B02261C1B082025151F251603310F691B1A29082625270A192829D6219566182B2B4EF43C4DFD3C4E10F64DF4EDD4EDD4ED003F3C3C3FFD12392F3CFD3C3911173901111239391239395D1112392B3130015D013236353427262321110321321716151406071E011F011617161715232E012F012627262321112303478CA3723D66FE1AC702A8A86DCF6D6256570507030B122EF40A0C040C0764397AFE3BC7031C70929D391EFE0A02A1315EFD84A833237280C55429461421133C56F590311BFD8A0002002F0000044205930007000B00001335211521112311013521152F0413FE4FB2FE50041303A6A8A8FC5A03A60146A7A7000000010000000000004E8ABC9E5F0F3CF500110800000000005F4D8F0000000000

44B072234420B1625D4565234520B003266062636820B003266165B05D236544B0622344B1005D455458B15D406544B262406245236144592B2B2B2B456953427374B8019A2045694B20B02853B049515A58B020615944B801A6204569447500
00>] def
/CharStrings 8 dict dup begin
/.notdef 0 def
/one 1 def
/two 2 def
/three 3 def
/four 4 def
/N 5 def
/R 6 def
/u20B8 7 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4179358 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C980943B128E467A4B303542E85E0849534105E9F083E4E3373F14A64BC3AB0F9692F6BC106AE217BF94B71975CBCEAD28FD587E1BFB01FDF6931915C89E8032677890B9B723498510FBFA80C605F161F06E859104BA241B4B3BC00C6076F11588273FB9DBC7689A0627FC6F7592815286736CE3AA8C34113A398031A9DD4F0058D3FFAEABD3B763049E956FA8789A1BDD12F6C5F6D1EA92744BBC0B31B0E3C44DDC68A10DDCA78B0FA6883EDF43E07DF7A384787EAE3408D413C6B4FE70FC3A5BFCDF307B99521065545DA0ECD93DF31829729F39C211A5A953FC2C205A599D02EA914888EAEBCE4C5EEB2D742CA3203957DDB840470580BA9FDC6E5DFC09ED5E775E02CD02FC3F8AFC3C973BEA02B1032A894614CD86740899F3AD7485E04F97B68D4A827511BC420E7AA2E565E401355109B2E2A657FEA8F4969EAB7AB5FDDB7B42C082DBC01DC94C4CEBC4A44CC04EFA72486F76FB3BEB4CD8BAE0C5A53E95BD301BB227171A44266BC5E44D6ECBFD88EC2887189773CE06DDFCB8D9FF37C19D0CE1C592331183EC60C67A0623FEF2254D278563795CCB24A69195841E5BEA3415DE4B158C5C559AF4EA78C3CD86943AFD9CB8C2090311A3E1AE72DC870E2426F27D036471BD2E44BD86330CB9861E4820DD26F218AE9621CB2AA823E2D9F3ABFB9617283E5F1999109AD3877914940AA030CE6CC138471D57EF6E80E9A6421A20AC5F2D8D48124141676E27C2EDAA84DED2CC78C2E0F02D1D3CCB37B1C95A6
4CD80FF80B5E7F65434454A65608221F6AC1A7B079319B7B7A36FF4A6CD6A912F4B1B44452446A88A5FFCF8BB331C0FFD12BAE6B0E409EFDD54BDDE458E2D0D2BD8596FAB00949A66FA4E722C5589E75043457D46B5ED0B74675543CE14633F01A7B778E998083855B21E263DE8DD79FDC2239A5F7155A00DC6B42D6AA5EA7EC2B2569A4A6120E26A92BD8AF48A6151AEBC52AC808987909BC3505180D54A81CE46380AA66522D93B9941651208737C7805B4DE1ACEF7A29D82A69C7B873747C17666D43641707049DEEDB9B7427673667B9E8EE8CCB75FAC4CF7D11A1DE2B5B89005ED10C7BE96F43488B4BBABE42638C70067836E9B8DC6F222E94330B9627AC873BBDBD24C0EF6220BB970ED195A11491AE7F4F2B118C597816873C41C7385A500EAC2CEEB78CCA03351FDDC69688752717D581F879A2AA763B005836C4E5FD8F7FE7F725EB2AD9CA5EFB636B7255088B430F0C330EA4CD253227776ACB23CD5AA2872840B35B00A627EE175B51E4C455C1DBB82BFAB861899861DEE01EEDF28BD5AD7D29B4BF481071A55857A6EA58846A1BA8B352A7C2E634408AB576F9A54A1767BD274A75D8A1A1B637717D7E1D31E4BA88BCCDE201926B44C413B156C7519DE961A81800E85A2F5BCC22F4CB115F99B6D8FED75FA1B4C98DD97E6FD3EBDB362F28146B54242544FC82AEDD92AF7F6E88F4EC2FFF3A269221B8C9EBE500E66262DBF0DA6E88DEF4205B4D76D8640D920804DDC02BE5FFB3EB7AF706B98111732F2538B6A5707A46D5B21B8999930CEDD6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/ZFOSWB+Helvetica cguidfix
/F1.1/ZFOSWB+Helvetica renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 sc
q
0 52 m
380 52 l
380 0 l
0 0 l
h
0 52 m
W
0 0 380 52 rc
-1 52 m
381 52 l
381 -1 l
-1 -1 l
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 26.858572 32.560146 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!)s
20 w
1 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -82 257 cm
2000 4714.5098 m
2149.3491 4628.2832 l
S
2051.8345 4744.4365 m
2175.2664 4673.1729 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 26.858572 47.791103 cm
0 8.8378906 m
(")s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.2514648 m
(#)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -82 257 cm
2249.3882 4466.7656 m
2249.3882 4407.7812 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 39.327984 25.360928 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -82 257 cm
2353.9536 4630.8965 m
2397.2405 4655.8882 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 39.327984 11.798672 cm
0 8.8452148 m
(")s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.2587891 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -82 257 cm
2498.7766 4814.8125 m
2498.7766 4903.7139 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 14.38916 11.780361 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 8.8085938 m
(")s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.222168 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -82 257 cm
2000 4714.5098 m
2000 4903.3477 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 1.9197475 33.398159 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 8.848877 m
(")s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.2624512 m
(&)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -82 257 cm
2000 4714.5098 m
1859.1139 4633.1694 l
S
2321.6511 4751.2505 m
2321.6511 4787.0454 2292.6335 4816.063 2256.8386 4816.063 c
2221.0437 4816.063 2192.0261 4787.0454 2192.0261 4751.2505 c
2192.0261 4715.4556 2221.0437 4686.438 2256.8386 4686.438 c
2292.6335 4686.438 2321.6511 4715.4556 2321.6511 4751.2505 c
h
S
0 J
2220.5469 4746.438 m
2283.5054 4746.438 l
S
2252.0261 4714.959 m
2252.0261 4777.9175 l
S
1 J
2710.4829 4599.582 m
2710.4829 4635.377 2681.4653 4664.3945 2645.6704 4664.3945 c
2609.8755 4664.3945 2580.8579 4635.377 2580.8579 4599.582 c
2580.8579 4563.7871 2609.8755 4534.7695 2645.6704 4534.7695 c
2681.4653 4534.7695 2710.4829 4563.7871 2710.4829 4599.582 c
h
S
0 J
2609.3787 4594.7695 m
2672.3369 4594.7695 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 136.20541 32.560146 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!)s
1 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -82 257 cm
4186.937 4714.5098 m
4336.2861 4628.2832 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 136.20541 47.791103 cm
0 8.8378906 m
(")s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.2514648 m
(#)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -82 257 cm
4436.3252 4466.7656 m
4436.3252 4407.7812 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 148.67482 25.360928 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -82 257 cm
4540.8906 4630.8965 m
4584.1772 4655.8882 l
S
4514.9736 4675.7866 m
4558.2603 4700.7778 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 148.67482 11.798672 cm
0 8.8452148 m
(")s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.2587891 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -82 257 cm
4685.7134 4814.8125 m
4685.7134 4923.7139 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 123.73602 11.780361 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 8.8085938 m
(")s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.222168 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -82 257 cm
4186.937 4714.5098 m
4186.937 4903.3477 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 111.26659 33.398159 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 8.848877 m
(")s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.2624512 m
(&)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -82 257 cm
4186.937 4714.5098 m
4046.0508 4633.1694 l
S
4508.5879 4751.2505 m
4508.5879 4787.0454 4479.5708 4816.063 4443.7754 4816.063 c
4407.9805 4816.063 4378.9629 4787.0454 4378.9629 4751.2505 c
4378.9629 4715.4556 4407.9805 4686.438 4443.7754 4686.438 c
4479.5708 4686.438 4508.5879 4715.4556 4508.5879 4751.2505 c
h
S
0 J
4407.4839 4746.438 m
4470.4424 4746.438 l
S
4438.9629 4714.959 m
4438.9629 4777.9175 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 241.47229 32.560146 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!)s
1 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -82 257 cm
6292.2744 4714.5098 m
6441.6235 4628.2832 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 241.47229 47.791103 cm
0 8.8378906 m
(")s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.2514648 m
(#)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -82 257 cm
6541.6626 4466.7656 m
6541.6626 4407.7812 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 253.9417 25.360928 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -82 257 cm
6646.228 4630.8965 m
6689.5146 4655.8882 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 253.9417 11.798672 cm
0 8.8452148 m
(")s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.2587891 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -82 257 cm
6791.0508 4814.8125 m
6791.0508 4923.7139 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 229.00288 11.780361 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 8.8085938 m
(")s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.222168 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -82 257 cm
6292.2744 4714.5098 m
6292.2744 4903.3477 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 216.53346 33.398159 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 8.848877 m
(")s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.2624512 m
(&)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -82 257 cm
6292.2744 4714.5098 m
6151.3882 4633.1694 l
S
7002.7573 4599.582 m
7002.7573 4635.377 6973.7397 4664.3945 6937.9448 4664.3945 c
6902.1499 4664.3945 6873.1323 4635.377 6873.1323 4599.582 c
6873.1323 4563.7871 6902.1499 4534.7695 6937.9448 4534.7695 c
6973.7397 4534.7695 7002.7573 4563.7871 7002.7573 4599.582 c
h
S
0 J
6901.6528 4594.7695 m
6964.6113 4594.7695 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 350.81912 32.560146 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!)s
1 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -82 257 cm
8479.2109 4714.5098 m
8628.5605 4628.2832 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 350.81912 47.791103 cm
0 8.8378906 m
(")s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.2514648 m
(#)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -82 257 cm
8728.5996 4466.7656 m
8728.5996 4407.7812 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 363.28854 25.360928 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -82 257 cm
8833.165 4630.8965 m
8876.4512 4655.8882 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 363.28854 11.798672 cm
0 8.8452148 m
(")s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.2587891 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -82 257 cm
8977.9873 4814.8125 m
8977.9873 4903.7139 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 338.34973 11.780361 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 8.8085938 m
(")s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.222168 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -82 257 cm
8479.2109 4714.5098 m
8479.2109 4903.3477 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 325.88031 33.398159 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 8.848877 m
(")s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 5.2624512 m
(&)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -82 257 cm
8479.2109 4714.5098 m
8338.3252 4633.1694 l
S
6248.853 4765.6851 m
6248.853 4801.48 6219.8354 4830.4976 6184.0405 4830.4976 c
6148.2451 4830.4976 6119.228 4801.48 6119.228 4765.6851 c
6119.228 4729.8901 6148.2451 4700.8726 6184.0405 4700.8726 c
6219.8354 4700.8726 6248.853 4729.8901 6248.853 4765.6851 c
h
S
0 J
6147.7485 4760.8726 m
6210.707 4760.8726 l
S
6179.228 4729.3931 m
6179.228 4792.3516 l
S
1 J
4142.5977 4764.0654 m
4142.5977 4799.8604 4113.5801 4828.8779 4077.7852 4828.8779 c
4041.99 4828.8779 4012.9727 4799.8604 4012.9727 4764.0654 c
4012.9727 4728.2705 4041.99 4699.2529 4077.7852 4699.2529 c
4113.5801 4699.2529 4142.5977 4728.2705 4142.5977 4764.0654 c
h
S
0 J
4041.4934 4759.2529 m
4104.4517 4759.2529 l
S
1 J
8446.9746 4781.7715 m
8446.9746 4817.5664 8417.957 4846.584 8382.1621 4846.584 c
8346.3672 4846.584 8317.3496 4817.5664 8317.3496 4781.7715 c
8317.3496 4745.9766 8346.3672 4716.959 8382.1621 4716.959 c
8417.957 4716.959 8446.9746 4745.9766 8446.9746 4781.7715 c
h
S
0 J
8345.8701 4776.959 m
8408.8291 4776.959 l
S
1 J
9162.3301 4568.6367 m
9162.3301 4604.4316 9133.3125 4633.4492 9097.5176 4633.4492 c
9061.7227 4633.4492 9032.7051 4604.4316 9032.7051 4568.6367 c
9032.7051 4532.8418 9061.7227 4503.8242 9097.5176 4503.8242 c
9133.3125 4503.8242 9162.3301 4532.8418 9162.3301 4568.6367 c
h
S
0 J
9061.2256 4563.8242 m
9124.1836 4563.8242 l
S
9092.7051 4532.3447 m
9092.7051 4595.3032 l
S
1 J
3437.031 4623.3403 m
3156.9138 4623.3403 l
S
CM
97.747063 25.832973 m
97.747063 25.832973 88.723625 23.574614 88.723625 23.574614 c
88.723625 23.574614 89.851555 24.844942 89.851555 25.832973 c
89.851555 27.258507 88.723625 29.091333 88.723625 29.091333 c
88.723625 29.091333 97.747063 25.832973 97.747063 25.832973 c
97.747063 25.832973 97.747063 25.832973 97.747063 25.832973 c
h
f
68.950188 25.832973 m
68.950188 25.832973 77.973625 22.574614 77.973625 22.574614 c
77.973625 22.574614 76.845695 24.407442 76.845695 25.832973 c
76.845695 26.821007 77.973625 28.091333 77.973625 28.091333 c
77.973625 28.091333 68.950188 25.832973 68.950188 25.832973 c
68.950188 25.832973 68.950188 25.832973 68.950188 25.832973 c
h
f
0.050000001 0 0 -0.050000001 -82 257 cm
5542.3086 4623.3403 m
5262.3115 4623.3403 l
S
CM
203.01393 25.832973 m
203.01393 25.832973 193.99049 23.574614 193.99049 23.574614 c
193.99049 23.574614 195.11542 24.844564 195.11542 25.832973 c
195.11542 27.259048 193.99049 29.091333 193.99049 29.091333 c
193.99049 29.091333 203.01393 25.832973 203.01393 25.832973 c
203.01393 25.832973 203.01393 25.832973 203.01393 25.832973 c
h
f
174.21706 25.832973 m
174.21706 25.832973 183.24049 22.574614 183.24049 22.574614 c
183.24049 22.574614 182.11557 24.406898 182.11557 25.832973 c
182.11557 26.821383 183.24049 28.091333 183.24049 28.091333 c
183.24049 28.091333 174.21706 25.832973 174.21706 25.832973 c
174.21706 25.832973 174.21706 25.832973 174.21706 25.832973 c
h
f
0.050000001 0 0 -0.050000001 -82 257 cm
7729.2451 4623.3403 m
7449.248 4623.3403 l
S
CM
312.36078 25.832973 m
312.36078 25.832973 303.33734 23.574614 303.33734 23.574614 c
303.33734 23.574614 304.46225 24.844564 304.46225 25.832973 c
304.46225 27.259048 303.33734 29.091333 303.33734 29.091333 c
303.33734 29.091333 312.36078 25.832973 312.36078 25.832973 c
312.36078 25.832973 312.36078 25.832973 312.36078 25.832973 c
h
f
283.5639 25.832973 m
283.5639 25.832973 292.58734 22.574614 292.58734 22.574614 c
292.58734 22.574614 291.4624 24.406898 291.4624 25.832973 c
291.4624 26.821383 292.58734 28.091333 292.58734 28.091333 c
292.58734 28.091333 283.5639 25.832973 283.5639 25.832973 c
283.5639 25.832973 283.5639 25.832973 283.5639 25.832973 c
h
f
ep
end
%%Trailer
%%EOF
