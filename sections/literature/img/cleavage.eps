%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.3 (Build 18D109) Quartz PS Context)
%%Title: cleavage.eps
%%Creator: ChemDraw Professional(tm) 16.0.1.4
%%CreationDate: 2020-04-02 08:08:49 +0000
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 390 53
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: © 1985–2017 PerkinElmer Informatics, Inc.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 390 53
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: EAJFYJ+Helvetica
%!FontType1-1.0: EAJFYJ+Helvetica 1.0000.0.0000
14 dict begin/FontName /EAJFYJ+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /N put
dup 34 /B put
dup 35 /n put
dup 36 /z put
dup 37 /P put
dup 38 /h put
dup 39 /H put
dup 40 /two put
dup 41 /d put
dup 42 /slash put
dup 43 /C put
dup 44 /E put
dup 45 /t put
dup 46 /O put
dup 47 /A put
dup 48 /c put
dup 49 /S put
dup 50 /m put
dup 51 /I put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<







0106B3216242182B2B4EF43C4DFDE44E10F64DED12392F003F3F3C3F3FED1139390112393130005D015D1333153E01333217161511231134272623220706070E011511230184AB4CAA68E4502CB71D307E40294A382D1BB401A7042F985E529F57A2FD5102A3623C640D1642357169FDCF04490000010017FFEF0209055A00180052B50D2E0AC00E01B8013F40250416391703060E0A111A17171A0301062900150E150F031F030203FC1619191AFC21677D182B2B4EF44DFD5D39C42F3CFD3C104E456544E6002F3F3F3C4DFD3CED10FDE431301333113315231114171633323637150E012322263511233533A8B6ABAB2615310D1E141F43277E5A9191055AFED593FD4538130B01028E0908816702C593000000020034000003B404490009000A006C4042370648005700580157066700680167067705090105060629120000010A0A01060503050102390403060007063908090A0A07053E071A0C034A00190B0CB221725D182B2B4EF44DE44E10F64DE4003F3F3CFD3C393F3CFD3C390111123939392F872E2B877DC53130015D370121352115012115210134027BFDB4033EFD89028AFC8001CF8E0300A193FD05A104490002002F0000044205930007000B00001335211521112311013521152F0413FE4FB2FE50041303A6A8A8FC5A03A60146A7A7000000010000000000004E8ABC9E5F0F3CF500110800000000005F4D8F0000000000D7C5A882F865FC270B9108F9000000090001000000000000000100000629FE2900000C01F865FCED0B910001000000000000000000000000000000150512004202390000047300400556001E0556009705C7005A055600AF05C700A1023900C905C7009C06390050055600AF055600600400003B047300380473008406AA00840473008402390017040000340473002F00000036005A00E6017201F6028602CA0302031A037003EE04440510059205FE064E06CA0726077607C607E000010000001500920009006B0007000200100010005D000007E80A1D00040001B800532BB800492BB8003F2BB800352BB8002B2B4118008001A6009001A600A001A600030069018B0079018B0089018B0099018B00040089018B0099018B00A9018B00B9018BB2040840BA0179001A014A400B041F5414191F180A0B1FD2B80106B49E1FD918E3BB0119000D00E10119B20D0009410A01A0019F0064001F01A50025017A00480028019AB3296C1F60410A01A9007001A9008001A90003008001A9000101A9B21E321FBE012C00250401001F0126001E0401B61FE7312D1FE531B80201B21FC227B80401B21FC11EB80201400F1FC01D9E1FBF1D671FBE1D671FAB27B80401B21FAA29B80401B61FA91D6C1F931EB8019AB21F921DB80101B21F911DB80101B21F751DB80201B61F6D29961F6431B8019AB21F4C96B8

00>] def
/CharStrings 21 dict dup begin
/.notdef 0 def
/slash 1 def
/two 2 def
/A 3 def
/B 4 def
/C 5 def
/E 6 def
/H 7 def
/I 8 def
/N 9 def
/O 10 def
/P 11 def
/S 12 def
/c 13 def
/d 14 def
/h 15 def
/m 16 def
/n 17 def
/t 18 def
/z 19 def
/u20B8 20 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4179358 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C92633B2598E0B1EDFA3C2732C9D3498122A5E23C1999619F9F2A05B057FF2148EC959C8A2C02A2A019957BFFE16C5880F5564968C1625987940DE6BD70F90A24E5C1472AC5B757411251CCBEBE4DFC7671C4AF15535CAEA09C978A0672FCB4EE95E2A1D88F5FDE80BA7C79E79A432EA11343293B1BA4DE2CBB605DF3CD9782FD6B2C46E95080CAA3F7082543EF596377A1F2670A4B96350543CD018D6AD43663EDBE98ED8ABDDDF6858ABDDE2A4A2FCD7AA2CD3C432CFE81E0042BF20353FE1BC619F5B7CF1D18F5DE54105E0828C4063AA492E4A2F92EB467FE477D72B8E59AED09A463AA83D3AD8CF60EE2461C622FCCF2953F85017602AE71913A8869100E36A58FFAA050F9758FF465B937E2FE3F4FCE208379855033236D7E4B13D548576BD40D0AF8C13EB88E834F239A10B8914909139408C88B8C8B8C929CC97B6AEB7556AF256883D643E4FBD76D5114035970E66293FD46EEEAA7C701FCCF1AABE2403AFEDC6611FB3B692A4D613387EE82645D1A9F50452017E1749AF72CE37CD459A225356175925DDCEDFDCC0B712825CCF84F1980AD877DDFFB890A2FBED4A227218C2A7D29B8954C71B766341A2F6AD3A414C139D67BDC3A401E54E6A73E308DF7BB4EDB5E9E18836BDAA7891F7192766AEC627E5345E9092A3B8FE6C83746D25DE65B1C82430FDC0F6390F28BD9D5AB0F9F4B9EF3584286052F5688EA9E2ECB260C77BFCF564366CD14C8AED0B51A053AEC6443012ECAA0173222F5B98EFF93


F1CB508EA0081A67EFEE63B545746D5569B2FCB1F7280F1BBDF7CC19AD6B7AB952C4DFCABFD720FD3295539DB4DA9D6A267A6C8549E04E769F3FFD1297DE7645311BDAAD81
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/EAJFYJ+Helvetica cguidfix
/F1.1/EAJFYJ+Helvetica renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 sc
q
0 53 m
390 53 l
390 0 l
0 0 l
h
0 53 m
W
0 0 390 53 rc
-1 53 m
391 53 l
391 -1 l
-1 -1 l
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 41.599934 25.47213 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!)s
1 0 0 -1 33.165215 37.081524 cm
0 7.1728516 m
(!)s
20 w
1 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -49 111 cm
1715.5211 2024.4738 m
1813.236 1889.9807 l
S
1811.592 1692.3284 m
1788.5857 1660.6627 l
S
1619.3298 1591.3525 m
1442.5679 1648.7859 l
S
1442.5679 1648.7859 m
1442.5679 1935.7859 l
S
1442.5679 1935.7859 m
1715.5211 2024.4738 l
S
1494.2279 1898.2527 m
1695.7887 1963.7438 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 37.875488 50.729183 cm
0 7.1728516 m
("#)[ 6.669922 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -49 111 cm
1752.5175 1446.2351 m
1769.2852 1394.6292 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 56.225811 25.47213 cm
0 7.1728516 m
("$)[ 6.669922 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -49 111 cm
1979.2643 1792.2859 m
2087.2312 1792.2859 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 2.0683169 9.8746185 cm
0 7.1972656 m
(%&)[ 6.669922 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -49 111 cm
1442.5679 1935.7859 m
1282.964 2051.7449 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 2.0683169 41.094055 cm
0 7.1972656 m
(%&)[ 6.669922 0.000000 ] xS
0 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -49 111 cm
1330.109 1575.2834 m
1412.5679 1618.7859 l
S
CM
15.123774 32.522301 m
16.887129 34.949352 l
23.203531 28.901377 l
23.128395 28.560703 l
22.827614 28.383968 l
15.123774 32.522301 l
h
f
1 J
0.050000001 0 0 -0.050000001 -49 111 cm
3513.6863 1695.9347 m
2618.4617 1695.9347 l
S
CM
138.52757 26.203268 m
138.52757 26.203268 124.99242 22.816978 124.99242 22.816978 c
124.99242 22.816978 126.68431 24.721767 126.68431 26.203268 c
126.68431 28.122271 124.99242 30.589558 124.99242 30.589558 c
124.99242 30.589558 138.52757 26.203268 138.52757 26.203268 c
138.52757 26.203268 138.52757 26.203268 138.52757 26.203268 c
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 104.29149 40.302879 cm
0 7.7001953 m
(')s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.2216797 10 m
(\()s
1 0 0 -1 98.892319 22.035299 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.7001953 m
(%\)*+)[ 6.669922 5.561523 2.778320 0.000000 ] xS
1 0 0 -1 95.467026 10.881979 cm
0 7.7001953 m
(,-./0)[ 6.669922 2.778320 7.778320 6.669922 0.000000 ] xS
1 0 0 -1 191.60313 25.472136 cm
0 7.1728516 m
(!)s
1 0 0 -1 183.16841 37.081528 cm
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -49 111 cm
4715.585 2024.4736 m
4813.2998 1889.9806 l
S
4811.6562 1692.3284 m
4788.6494 1660.6627 l
S
4619.3936 1591.3524 m
4442.6318 1648.7858 l
S
4442.6318 1648.7858 m
4442.6318 1935.7859 l
S
4442.6318 1935.7859 m
4715.585 2024.4736 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 187.87868 50.729187 cm
0 7.1728516 m
("#)[ 6.669922 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -49 111 cm
4752.5811 1446.235 m
4769.3491 1394.6292 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 206.229 25.472136 cm
0 7.1728516 m
("$)[ 6.669922 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -49 111 cm
4979.3281 1792.2858 m
5087.2949 1792.2858 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 152.07152 9.8746166 cm
0 7.1972656 m
(%&)[ 6.669922 0.000000 ] xS
0 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -49 111 cm
4313.0278 2021.7449 m
4412.6318 1965.7859 l
S
CM
166.03308 7.1992283 m
164.26971 9.6262789 l
172.83081 14.385124 l
173.13159 14.210707 l
173.20453 13.870749 l
166.03308 7.1992283 l
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 152.07152 41.094055 cm
0 7.1972656 m
(%&)[ 6.669922 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -49 111 cm
4330.1729 1575.2834 m
4412.6318 1618.7858 l
S
CM
165.12697 32.522301 m
166.89034 34.949352 l
173.20673 28.901386 l
173.13159 28.560713 l
172.83081 28.383978 l
165.12697 32.522301 l
h
f
1 J
0.050000001 0 0 -0.050000001 -49 111 cm
6380.9863 1695.9347 m
5618.5254 1695.9347 l
S
CM
281.89258 26.203268 m
281.89258 26.203268 268.35742 22.816978 268.35742 22.816978 c
268.35742 22.816978 270.04932 24.721767 270.04932 26.203268 c
270.04932 28.122271 268.35742 30.589558 268.35742 30.589558 c
268.35742 30.589558 281.89258 26.203268 281.89258 26.203268 c
281.89258 26.203268 281.89258 26.203268 281.89258 26.203268 c
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 245.85596 40.302879 cm
0 7.7001953 m
(123)[ 6.669922 8.330078 0.000000 ] xS
/F1.1[ 7.5 0 0 -7.5 0 0]sf
17.77832 10 m
(\()s
1 0 0 -1 313.54025 42.245522 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(')s
0 15.541179 m
(!)s
1 0 0 -1 363.25012 42.245522 cm
0 7.1728516 m
(')s
0 15.541179 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -49 111 cm
7571.5713 1767.6846 m
7424.3975 1682.7139 l
S
8205.3701 1688.7609 m
8068.6699 1767.6846 l
S
8068.6699 1767.6846 m
7820.1206 1624.1846 l
S
7820.1206 1624.1846 m
7571.5713 1767.6846 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 375.95346 26.702194 cm
0 7.1728516 m
("#)[ 6.669922 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -49 111 cm
8403.5947 1674.0537 m
8468.0039 1711.2405 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 295.55371 26.702194 cm
0 7.1728516 m
("$)[ 6.669922 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -49 111 cm
7226.1724 1680.1006 m
7139.4619 1730.163 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 338.67105 48.239403 cm
0 7.1972656 m
(%&)[ 6.669922 0.000000 ] xS
0 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -49 111 cm
7820.1206 1447.2433 m
7820.1206 1594.1846 l
S
CM
340.50601 40.13784 m
343.50601 40.13784 l
342.32568 29.953533 l
342.00601 29.790768 l
341.68637 29.953533 l
340.50601 40.13784 l
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 351.09854 12.364401 cm
0 7.1972656 m
(%&)[ 6.669922 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -49 111 cm
8068.6699 1900.6808 m
8068.6699 1797.6846 l
S
CM
355.9335 14.465963 m
352.9335 14.465963 l
354.10916 22.455709 l
354.4335 22.615768 l
354.75781 22.455709 l
355.9335 14.465963 l
h
f
ep
end
%%Trailer
%%EOF
