%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.3 (Build 18D109) Quartz PS Context)
%%Title: reductiveNN.eps
%%Creator: ChemDraw Professional(tm) 16.0.1.4
%%CreationDate: 2020-06-06 08:24:53 +0000
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 462 105
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: © 1985–2017 PerkinElmer Informatics, Inc.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 462 105
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: IVHZXH+Helvetica
%!FontType1-1.0: IVHZXH+Helvetica 1.0000.0.0000
14 dict begin/FontName /IVHZXH+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /H put
dup 34 /N put
dup 35 /O put
dup 36 /M put
dup 37 /e put
dup 38 /B put
dup 39 /r put
dup 40 /two put
dup 41 /one put
dup 42 /parenright put
dup 43 /a put
dup 44 /T put
dup 45 /i put
dup 46 /C put
dup 47 /l put
dup 48 /three put
dup 49 /comma put
dup 50 /space put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<




1C19040100051F0F0F22130A351305201F7521220C217F0738166F220E270F811F38222447231076C418D4EDF4ED10F5EDE4003F3CFD3C3FED1112392F1217390111123912393911391239005D31304379401C04190C2511260B120E2800091407280119040D100A280108150A2801002B2B1010012B2B2B2B81005D36123F01363736353426232207060723363736213212151407060F01060706072115214A85C1C0813452967DB9472604B70342750128F6E37946B5896238641A030EFC29B90112706F4B35536B7D938C4B85BB76D0FEF6A3AC7A47654C3631576AAA000000010031FFD9041A059A003100C4401F490C532D6529632D7529752D069626014B082B0A182B140D03F93114350D20B8012340141135107F0D0D311B3524050735310D1896274411B8014A400F0A382E6F021F2920810327023347321076C418D4EDF4ED10F5EDEDF4ED003FED3FED12392FF4FDE610ED10ED111239011112393130437940362F301926000905261D2522260600032800040308300A28011C231F28001A251828010401072800092F0728001E211B280119261B2801002B2B2B2B012B2B2B103C2B2B2B2B818181005D015D0402353316171633323635342623220607351E013332373635342623220706072334373621321615140706071E01151400230116E5BC0C2846B78EACB5A11225131C26166541729865B4452605B2406E0115DBF0472C46717FFEF2F8270117C88B3F719878947601019F03022038906B7478427AA070C8C3B98452331D1FB180CDFEFE000000000300970000050405BD000A00150028008240385A0D5A116A026A0D6A117A02772107490D4811021D081F0F041F131E000027081E17020B1E270804311B690F31231A2A091525281619292AB8015FB3217666182B2B4EF43C4DFD3C4E10F64DEDF4ED003FFD3FED12392FFD3901111239313043794012181A0508192506260718042B01051A082B01002B012B2B2B8181015D5D013237363534272623211101323736353427262321110321201716151407060716171615140706290102C47E466E754282FE9D01ADB74E318F4C7DFE75C3027701026D404F294D7138635985FEDEFD93035023378F90321CFE39FD5A6A435FA03A1FFDFB05139A5B778B592F272B3660A98E73AC0002005AFFDA057105E5001D001E00B1403B1B0597019605031F011F0482018705891305530803861D111115063A1D030C3A15091E021E1E190331023B1031111A20093119191F20A1216A66182B2B4EF44DED4E10F64DEDF4ED12392F003F3FED3FED12392F10ED31304379403A001C172513260E251B260B160932000D1410320112110F10071C0932000500033201010204030A180C32000F120C3200081A06320104010632012B2B2B2B01103C103C2B2B103C103C2B2B2B2B2B2B815D01



5358B0FF1D592B2B2B2B2B2B2B2B182B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B74752B2B2B65422B2B4B5279B376706A66456523456023456560234560B08B766818B080622020B16A704565234520B003266062636820B003266165B070236544B06A234420B176664565234520B003266062636820B003266165B066236544B0762344B10066455458B166406544B27640764523614459B36242725D456523456023456560234560B089766818B080622020B172424565234520B003266062636820B003266165B042236544B072234420B1625D4565234520B003266062636820B003266165B05D236544B0622344B1005D455458B15D406544B262406245236144592B2B2B2B456953427374B8019A2045694B20B02853B049515A58B020615944B801A6204569447500
00>] def
/CharStrings 20 dict dup begin
/.notdef 0 def
/space 1 def
/parenright 2 def
/comma 3 def
/one 4 def
/two 5 def
/three 6 def
/B 7 def
/C 8 def
/H 9 def
/M 10 def
/N 11 def
/O 12 def
/T 13 def
/a 14 def
/e 15 def
/i 16 def
/l 17 def
/r 18 def
/u20B8 19 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4179358 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C92626C4DEA81D313B50D8F4EBFA95F2709469CAA9CCEDFB298F70C76D4064066B51A3E7122D8445FB76D103843B97FD9754E265280DDC6F446953A9588395A909112BC984513D851EFA38997C3C0657D846C0C0BB258F96A087EC8D2D74EFE2D6B52CC24835129D46D142F6A85D55BA65DDB75E8E38BEA1C55456244327DB14FD9735D2682767FE6C5BA5472A99660A44961D323004A52F5D112D8D85A055B038B0D0F28ED1325CCB3157A174C4F9335239BEEE3BEB18164A986694979D8DCD8949D9A552A83B87534DB8402810476135A15AD79DDF7963696B0BBE3E47F45B6CB3FCFCEBA21B8A0E85F3F711FEA2F012CD456E911DB1EBABCFD2E26AD3E4236495811B0CED5C2667F029495E9E7BF4C09DE8AE62DBCEFC044C8696DE1BA70DDCB9726200E1AAC6CBB348E2F5FE2BB6067CFAC6EDE2539E994FFD5324B64D41E1A4DAC7FCA7CEDD97D54CD72540F77D74506D9F965C6BCE11D0403B54BC14A62FE7814BBBA8AAF9840542DBBF4F796659EC6EFDA576F909A2B221C9E3CBA1DF6DBE4A99475DEECE99C2661659558B1C1965CA2D88E161E556C1FBE1D0A504E12A4A64373682E7FF0B77E7B720009FC237B457FBAB5708A06FE7752671097DCB37DF259E358EC3CA8EB100ECC4D278D2CAF7C3FE900B206C1BE18B13188B5738CC2E85B254BFBC46D12208EF464B5653FC21AF168E94DD137516F210AADA9F8BC4B8478931279DA7D7FD15C6FF8206196A838A0FC1D269B52EC96DA9AF432B3109F
AC916B2ABA510E29E4BDE739B7396C97CA5730F71D7D20A21E1247CD0996C037CF8160486C8C78A9DBDE987058D9EF0AC52159BB40E46AF97F67863334C4408A30BC6BB90E3D613260692EA6F31DCC8EF1F6D1F78C9BCF53CA2B69C5554EE5EC8602861F41553DD6B93D6002D6CB2E0934EE32CC3430636DFD9B5003DE7C269F89326D85BA14FCFA31576721BA17F73F2DD6B28D04C2A66CEEAE6D5AED3A2B91006F738D2ECD6E0AA1A3ACCB1DEB919824554D28E4E7FC742BDBA72ABCD6A595EA87317F1E38458D8EA00A507E58C1887EB15D539134FBD157A28224DD71F43D903490D6DAE80E4BA5AE43134DA0201233F45466E3A25C7977A258FFC3D485B73167A3665BC2027356BFBD042B1DFD757751EA3D2DB3DEF8A602BC4A8435514FAF52223D13C0E4FB408F224FC6C543B3F0A5D46F5B47FACECB0748078882D0248B2A0B423ABAA8CB6BF6A5F19BFB7AB430B04CC923CE482786D92FE9D84B0F61858184E773B81E124CC259B6E238980A598688A21D0FE34AF0FD732D26F7C8C10905C6B803C537993FAF51797086B7DC8CEC3A922E08570805CFAA90014C332F150D8B3023DF8253A678828536CB030E33B0B8BA7DA0AA79D5BC2983F996CF070E59DE0C02EF13D89419211A2B0C33662D7E55C8AE3243944BF7131C4C123B7FBD24B7F50727FEFAADD4C4F6F013CA1AFB45EEEB1E579B6419EAD326F5EB15542872266C418EB95A8C29FEBC13273BC0FDAE4A6F176E7AD59AEFC2576AF02216DC4C88786693E7193681ED6B7B3673F659AC44C90208C27E193F42E0669D20486E46F34F6A2ED885C0591E40A91868538FC0E494946BDD636E95C053C06D1145A6D18A4F64D5D0665C4DDBFE7D1D54FFBA77B08B110810341726408A563B7C98B7E2D0236115A58670B101A288B7E4DAFB8DF4BAE1D5CDFC36BE2016A0A155495FEBD4F49C7112C2DE1C26E550D21EB4C98D182B370E6A203B222D22FC59433195AF59DD83BB4EF8689450798FEB398A5656863F6C2F5477B8D8A0FEE2D83DF71977E7F6590F914D3890000A742EA63F20033FBCE1E79C13CC56376A0E6AEFC3904B94147E46F5587121D21EB546B84FCF4F1681C0E3F221EE05D0B742122DAEC285CFC8D7F57796F71289C8DED918247C1B647280C88A1C33F2DBD28BC7C3BC27E17E664FAC65DEE4CAC747EC27B53866286E8F2E119A2752C201E417FF604FE16CE6A45CAB5F39389CEB8BCEABB02B763522D7FFB95F357D5123EDA4054E5BC7E57759DC389F055871E5B0DBB7824B3C2E12E71CF282C1E664E9F0A3DE56B9C0AC554EA68CBAD09FCA1A28056473563DE9D6DC36D1A4933076BC21291C51E1A55610C6592ED90C705FC4C5DF0F76B546937F4481F6E088269D365258A14645B3C8E5E0DA199072C341CF42964B5AE01C5F99167A930D8295C0A858BB833AE9
955825708449EE44BBCF8A8AEAFF7257FAC435F83DB34AD496868ACFD5C3DA3C7E80954ED047DD957D06E591ADA63A0891016B556FBC18C54F8220B86251FCFE5BFB45AFB8E3B9D3AF1FB7E66B7319E5A156A8BA0AE0E2A978AD294DB73FB52D6F14FDC14BC2DF93C65C3D984C931C20D06A5D477020A8ED4F60AADE7F7F7A9F140D2037BF52344C8EB38380A7008E2C3A407F009A724BF2045158096A01B73BBBCF1878509C91927994921AE8317EBC05B8E36C7D7D6EA447FC916F7BD1A42B578A332B554589DA8E8DA5172627A41831F44085B01473C64322C25C74C8A85C99A8723828D2F04AD4C3AE612BBD580A088ECCEC775F27A73A05BC2493477F9D6E4E78B6F43235EDC55258CE19D01E484FC2AC7592B0FF12FD6AF2F703FE748702E6790EF8C4EB45E95C7D0FD6BCB70077AE92BD6F8BA83C10C0A04A2023689FFE33698318E9BE04A4709C9A04A484AAD6AA3D21A85E8C449597CF5F35A121C035246C8F5F49AD971CD329BE526AB7862C1ACA6D10D944711A144C99849DA0DA18E1E9D608EB050E7EDB3F5C391E8755FCA6B559F3B0124018F852D93C04DDC350B3A5DD354AB891615929656DE28559EDE15F5B078323B84FC262CEBC929E92B47E3801086D86EF5C4DE948191BE607FD4B24FC407304391D95F440597D4E289971BFEB4DC10661CD0A1F0EB39781046B67F36833733241237EE5347D3B4981D09DB1D7622B680574047C621AC06E61D1B70C1D1ED384D15914544AEBA3B226C7B16CB3DCB5A004FB7387128AE63AF293C3B7170B2A8EC5FAA5E54D6AF696DB71D19851B55FE364497D42733F9BC5EC7A9019DBAA2295269CF1F4B1B412362C6A1CF2A9DD3CE84B6AF034E98928ED6782F4A4CF8D0399B637B78BC526171F76BF03B6995369039B2B11F5E3E016DDDF6846653BD756DD8E56FB96E38A91C4850DBE12D338E3E129E563B84D55B9F07ED23248D1B10C388ABF07678FE2BC0429EA375FE988A4DB545F63B990855DED35E277B98133E5D36003B3FCEE95722A8B7FDB00088CB510B690327950E7B0124D26F1F07E82EAC1FB5EAE0C1F474E983127346BDA237F208F0DA701B2CCCF0B2411065DDF5E271A0958571FFE54DD1539D27A094EADD8EA3CCF4E01BC790BB178FDE85128BB498B608C62D9EC35F5109C2FC399092F566E73ACCC091962D6D94977E559D49494253A42C39403435BBAACD3005A7C0362E827448EACCC6E896124FB515F3423B4B0D76E19053CB4EF82299BBBCB1794CFF137DE4A2839C1F9CAE08E5FAE1DE1B9200571FCF6E28FBFC3233595B3E6303AE309E73E49DC16EF6CA03F0F99D21F5D4D1361C5A086CF1F0A199CC3A78D0FF9300D1FCAAABF88968F82D9BF9E71E43AA5FA75ACD471E75EC0E7CAE0D3BE216FA179
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/IVHZXH+Helvetica cguidfix
/F1.1/IVHZXH+Helvetica renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 sc
q
0 105 m
462 105 l
462 0 l
0 0 l
h
0 105 m
W
0 0 462 105 rc
-1 105 m
463 105 l
463 -1 l
-1 -1 l
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 190.12024 69.767929 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!")[ 7.221680 0.000000 ] xS
20 w
1 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -29 213 cm
4787.9336 2522.1414 m
4539.3843 2665.6416 l
S
4539.3843 2665.6416 m
4576.0391 2838.0874 l
S
4689.3379 2955.8591 m
4884.4829 2976.3696 l
S
4884.4829 2976.3696 m
5001.2163 2714.1819 l
S
5001.2163 2714.1819 m
4787.9336 2522.1414 l
S
4884.4829 2976.3696 m
4884.4829 3263.3694 l
S
0 J
5103.0322 3376.8696 m
4914.4829 3293.3694 l
S
CM
228.89638 43.722504 m
227.65161 42.656525 l
227.35083 41.04554 l
215.2103 49.476223 l
215.22414 49.831528 l
215.52492 50.021172 l
228.89638 43.722504 l
h
f
1 J
0.050000001 0 0 -0.050000001 -29 213 cm
4884.4829 3263.3694 m
4635.9336 3406.8696 l
S
5099.1353 3066.5491 m
5069.9072 3117.1743 l
S
5044.8862 3043.866 m
5023.1382 3081.5347 l
S
4990.6367 3021.1826 m
4976.3691 3045.895 l
S
4936.3872 2998.4995 m
4929.6001 3010.2554 l
S
5133.0322 3119.8694 m
5381.5815 2976.3696 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 248.61737 61.190613 cm
0 7.3681641 m
(#)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -29 213 cm
5381.5815 2946.5437 m
5548.2432 3042.7659 l
S
5355.7515 2991.2825 m
5522.4131 3087.5046 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 236.46823 82.61795 cm
0 7.1728516 m
("!$%)[ 7.221680 7.221680 8.330078 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -29 213 cm
5381.5815 2976.3696 m
5381.5815 2789.6724 l
S
5133.0322 3406.8696 m
5133.0322 3693.8696 l
S
5184.6924 3436.6953 m
5184.6924 3664.0437 l
S
5133.0322 3693.8696 m
5381.5815 3837.3694 l
S
5381.5815 3837.3694 m
5630.1309 3693.8696 l
S
5381.5815 3777.7175 m
5578.4707 3664.0437 l
S
5630.1309 3693.8696 m
5630.1309 3406.8696 l
S
5630.1309 3406.8696 m
5381.5815 3263.3694 l
S
5578.4707 3436.6953 m
5381.5815 3323.0212 l
S
5381.5815 3263.3694 m
5133.0322 3406.8696 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 206.88918 25.217957 cm
0 7.1728516 m
(&')[ 6.669922 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -29 213 cm
5133.0322 3693.8696 m
4955.6567 3796.2771 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 261.59906 25.217957 cm
0 7.1728516 m
(&')[ 6.669922 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -29 213 cm
5630.1309 3693.8696 m
5780.916 3780.9253 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 261.04486 54.01561 cm
0 7.3681641 m
(#$%)[ 7.778320 8.330078 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -29 213 cm
5630.1309 3406.8696 m
5778.4058 3321.2629 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 174.76697 54.039825 cm
0 7.3681641 m
(#)s
/F1.1[ 7.5 0 0 -7.5 0 0]sf
7.7783203 9.6679688 m
(\()s
/F1.1[ 10 0 0 -10 0 0]sf
11.949463 7.3681641 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -29 213 cm
4635.9336 3406.8696 m
4485.457 3319.9917 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 371.9754 69.611145 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -29 213 cm
8280.6035 2525.2771 m
8032.0537 2668.7771 l
S
8032.0537 2668.7771 m
8063.9468 2818.8225 l
S
8185.9092 2959.4048 m
8377.1523 2979.5054 l
S
8377.1523 2979.5054 m
8493.8857 2717.3179 l
S
8493.8857 2717.3179 m
8280.6035 2525.2771 l
S
0 J
8655.3721 3373.7339 m
8466.8232 3290.2339 l
S
CM
406.51337 43.879288 m
405.26862 42.813309 l
404.96783 41.20232 l
392.8273 49.633007 l
392.84116 49.988312 l
393.10461 50.195538 l
406.51337 43.879288 l
h
f
1 J
0.050000001 0 0 -0.050000001 -29 213 cm
8591.6523 3069.5989 m
8562.4258 3120.2214 l
S
8537.5049 3046.9729 m
8515.7568 3084.6409 l
S
8483.3574 3024.3472 m
8469.0889 3049.0603 l
S
8429.209 3001.7214 m
8422.4209 3013.4797 l
S
8625.7012 3123.0054 m
8874.251 2979.5054 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 423.25085 61.033813 cm
0 7.3681641 m
(#)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -29 213 cm
8874.251 2949.6794 m
9040.9131 3045.9016 l
S
8848.4209 2994.4182 m
9015.083 3090.6406 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 411.10168 82.461166 cm
0 7.1728516 m
("!$%)[ 7.221680 7.221680 8.330078 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -29 213 cm
8874.251 2979.5054 m
8874.251 2772.8079 l
S
8685.3721 3403.7339 m
8685.3721 3690.7339 l
S
8737.0322 3433.5598 m
8737.0322 3660.908 l
S
8685.3721 3690.7339 m
8933.9219 3834.2339 l
S
8933.9219 3834.2339 m
9182.4707 3690.7339 l
S
8933.9219 3774.582 m
9130.8105 3660.908 l
S
9182.4707 3690.7339 m
9182.4707 3403.7339 l
S
9182.4707 3403.7339 m
8933.9219 3260.2339 l
S
9130.8105 3433.5598 m
8933.9219 3319.8857 l
S
8933.9219 3260.2339 m
8685.3721 3403.7339 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 384.5062 25.374725 cm
0 7.1728516 m
(&')[ 6.669922 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -29 213 cm
8685.3721 3690.7339 m
8507.9971 3793.1416 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 439.21606 25.374725 cm
0 7.1728516 m
(&')[ 6.669922 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -29 213 cm
9182.4707 3690.7339 m
9333.2559 3777.7898 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 438.66187 54.172394 cm
0 7.3681641 m
(#$%)[ 7.778320 8.330078 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -29 213 cm
9182.4707 3403.7339 m
9322.0859 3323.1272 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 366.13873 56.50177 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -29 213 cm
8051.3086 3040.21 m
8032.5073 3082.4561 l
S
8057.6006 3286.0754 m
8188.2734 3403.7339 l
S
8092.168 3247.6846 m
8194.9482 3340.2283 l
S
8188.2734 3403.7339 m
8436.8232 3260.2339 l
S
8436.8232 3260.2339 m
8377.1523 2979.5054 l
S
7564.2676 3223.998 m
6378.5068 3223.998 l
S
CM
361.05817 51.800095 m
361.05817 51.800095 347.52301 48.410797 347.52301 48.410797 c
347.52301 48.410797 349.21338 50.317089 349.21338 51.800095 c
349.21338 53.720657 347.52301 56.189392 347.52301 56.189392 c
347.52301 56.189392 361.05817 51.800095 361.05817 51.800095 c
361.05817 51.800095 361.05817 51.800095 361.05817 51.800095 c
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 297.48126 66.818146 cm
0 7.7001953 m
(\)*"+#$%)[ 5.561523 3.330078 7.221680 5.561523 7.778320 8.330078 0.000000 ] xS
1 0 0 -1 291.85748 46.570953 cm
0 7.7001953 m
(\(*,-./)[ 5.561523 3.330078 5.742188 2.221680 7.221680 0.000000 ] xS
/F1.1[ 7.5 0 0 -7.5 0 0]sf
26.298828 10 m
(0)s
/F1.1[ 10 0 0 -10 0 0]sf
30.469971 7.7001953 m
(12!)[ 2.778320 2.778320 0.000000 ] xS
/F1.1[ 7.5 0 0 -7.5 0 0]sf
43.248291 10 m
(\()s
/F1.1[ 10 0 0 -10 0 0]sf
47.419434 7.7001953 m
(#)s
1 0 0 -1 36.083206 24.454956 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -29 213 cm
1100.0063 3475.6736 m
1100.0063 3763.6423 l
S
1100.0063 3763.6423 m
1276.6737 3821.0449 l
S
0 J
1513.1448 3649.658 m
1488.1 3706.7119 l
S
CM
47.913906 32.193901 m
48.157242 32.017105 l
48.202068 31.443686 l
45.118526 25.282726 l
42.691475 27.046083 l
47.913906 32.193901 l
h
f
1 J
0.050000001 0 0 -0.050000001 -29 213 cm
1383.257 3449.322 m
1430.5537 3414.959 l
S
1423.7151 3492.2786 m
1458.9055 3466.7112 l
S
1464.1733 3535.2351 m
1487.2574 3518.4636 l
S
1504.6316 3578.1917 m
1515.6093 3570.2158 l
S
1373.8809 3386.6865 m
1100.0063 3475.6736 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 66.703308 28.904312 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -29 213 cm
1543.1448 3619.658 m
1712.4084 3852.6294 l
S
1712.4084 3852.6294 m
1890.0917 3794.8967 l
S
1986.283 3639.8826 m
1986.283 3475.6736 l
S
1986.283 3475.6736 m
1712.4084 3386.6865 l
S
1712.4084 3386.6865 m
1543.1448 3619.658 l
S
2076.3967 3829.1138 m
2219.2549 3932.9062 l
S
1402.0735 3939.3975 m
1462.868 4126.5044 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 48.281906 10.858871 cm
0 7.3681641 m
(#)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -29 213 cm
1742.876 3842.73 m
1684.4 4022.7007 l
S
1693.5785 3826.7122 m
1635.1025 4006.6829 l
S
0 J
1623.4214 3142.8115 m
1712.4084 3356.6865 l
S
CM
50.532932 57.400116 m
52.171066 57.359421 l
53.472427 58.355217 l
56.873272 43.899784 l
56.620422 43.66568 l
56.278259 43.706451 l
50.532932 57.400116 l
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 78.073578 51.863602 cm
0 7.3681641 m
(#!)[ 7.778320 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -29 213 cm
2095.5188 3404.5127 m
2016.283 3445.6736 l
S
CM
76.394264 45.487888 m
78.157616 43.060837 l
70.614929 39.039097 l
70.314148 39.216324 l
70.238541 39.557152 l
76.394264 45.487888 l
h
f
1 J
0.050000001 0 0 -0.050000001 -29 213 cm
1623.4214 3112.8115 m
1816.1099 2898.8091 l
S
1604.9257 3055.8879 m
1757.5647 2886.365 l
S
1816.1099 2898.8091 m
1727.1228 2624.9346 l
S
1727.1228 2624.9346 m
1445.4468 2565.0625 l
S
1687.0732 2669.4143 m
1463.9425 2621.9863 l
S
1445.4468 2565.0625 m
1252.7582 2779.0652 l
S
1252.7582 2779.0652 m
1341.7454 3052.9397 l
S
1311.3033 2791.5095 m
1381.7949 3008.4602 l
S
1341.7454 3052.9397 m
1623.4214 3112.8115 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 30.488022 102.52702 cm
0 7.1728516 m
(&')[ 6.669922 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -29 213 cm
1445.4468 2565.0625 m
1385.2809 2379.8909 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 72.554337 69.152359 cm
0 7.1728516 m
(&')[ 6.669922 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -29 213 cm
1816.1099 2898.8091 m
2010.2948 2940.0845 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 1.7733459 81.224426 cm
0 7.3681641 m
($%#)[ 8.330078 5.561523 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -29 213 cm
1252.7582 2779.0652 m
1068.408 2739.8804 l
S
2733.2681 3211.9224 m
3973.8772 3211.9224 l
S
CM
96.818634 52.403885 m
96.818634 52.403885 110.35379 56.793182 110.35379 56.793182 c
110.35379 56.793182 108.6634 54.324448 108.6634 52.403885 c
108.6634 50.920879 110.35379 49.014587 110.35379 49.014587 c
110.35379 49.014587 96.818634 52.403885 96.818634 52.403885 c
96.818634 52.403885 96.818634 52.403885 96.818634 52.403885 c
h
f
0.050000001 0 0 -0.050000001 -29 213 cm
3119.6531 3327.3943 m
3255.125 3076.4504 l
S
3255.125 3327.3943 m
3390.5969 3076.4504 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 116.72336 72.441864 cm
0 7.7001953 m
(\)*"+#$%)[ 5.561523 3.330078 7.221680 5.561523 7.778320 8.330078 0.000000 ] xS
1 0 0 -1 111.09958 42.016754 cm
0 7.7001953 m
(\(*,-./)[ 5.561523 3.330078 5.742188 2.221680 7.221680 0.000000 ] xS
/F1.1[ 7.5 0 0 -7.5 0 0]sf
26.298828 10 m
(0)s
/F1.1[ 10 0 0 -10 0 0]sf
30.469971 7.7001953 m
(12!)[ 2.778320 2.778320 0.000000 ] xS
/F1.1[ 7.5 0 0 -7.5 0 0]sf
43.248291 10 m
(\()s
/F1.1[ 10 0 0 -10 0 0]sf
47.419434 7.7001953 m
(#)s
ep
end
%%Trailer
%%EOF
