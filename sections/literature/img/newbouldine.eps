%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.3 (Build 18D109) Quartz PS Context)
%%Title: newbouldine.eps
%%Creator: ChemDraw Professional(tm) 16.0.1.4
%%CreationDate: 2020-05-20 16:01:10 +0000
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 406 169
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: © 1985–2017 PerkinElmer Informatics, Inc.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 406 169
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: YRFKVG+Helvetica
%!FontType1-1.0: YRFKVG+Helvetica 1.0000.0.0000
14 dict begin/FontName /YRFKVG+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /N put
dup 34 /H put
dup 35 /P put
dup 36 /h put
dup 37 /O put
dup 38 /two put
dup 39 /T put
dup 40 /i put
dup 41 /C put
dup 42 /l put
dup 43 /three put
dup 44 /I put
dup 45 /parenleft put
dup 46 /parenright put
dup 47 /M put
dup 48 /e put
dup 49 /hyphen put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<
74727565000900000000000063767420000000000000009C0000036C6670676D000000000000040800000A1D676C79660000000000000E2800000CBC686561640000000000001AE400000036686865610000000000001B1C00000024686D74780000000000001B400000004C6C6F63610000000000001B8C000000286D6178700000000000001BB400000020707265700000000000001BD4000003CF05C0001005BD00280580001A042F001F0000FFD90000FFDA0000FFD9FE55FFE605C70010FE6DFFF1033B000000B9000000B902FE3F3C00C0008D009B00AF000600A800C00028005E009800C9016A00B9015C00B400D6011E002E0080000400B8004C00CC01FFFFD1006600A400AF007400C2009500B1000C0028006D0015004C008E0125FF7A000C0040004C00620084FFA200240038008600BD0039005E008E00EDFFA9FFB300400052005500AA00AB00C200CB012302B10413FFAEFFE4000800510074008400AA00D1FF4CFFAF0012002C004200500051008400BE012503DAFF680018003B0098009C009F00A100C100EC018201B4FF68FF76FFD0FFE100020018001C00530053007D01B401E103AF0486FF9CFFEAFFFE001F0028002A00520060009300A300AA00AF00AF00C001000145016B0174019301950240028202B404850517FEFD00060029004700470048006F008800B400B900C400F200F901EF02180310037403C5FF35FFF3000B004B004C0052005500650076007600870087008E00AB00BB0106013001430150017D0194019501D3022A025502580277027802E6034E035C037903D3047304B2058C0598060BFEF5FFBBFFC7FFD50017001D005B0072007E009C00C200D000F400FA01030106011C0125013B0142015E015E0180019B02B901A101B9025001C001D002AA01DF01E301EF01FB0205020C0215022B0274029302AB02C202CE03690395039903DF03F5043E050205A105E5062507DBFE62FE89FECEFF3BFFE1FFF800030008002100390042004E005F0061006F00700034007F008E00AD00AD00AF00BD00C400C500C900C900C900E3011C00ED00F800F901000112011A0132014D014D014E014F01660169019E01BA01BA01BE01E301EF01F602000200020902110217021C02530262026D028002D50280031B032A034A035A03AF03AF03C803D603FB03FB04050413041504470449008C046D049A049A04A604A804B204CF0539053E054E055605800589058C036305D105D6067E068E06B206EF06F00728074C076F078C00B400C900C000C10000000000000000000000000004012400AF0032006E0063014401620096014301A10161008A00740064018801EF01700028FF5D037E0347023000AA00BE007B0062009A007D0089035C00A1FFD803AA00D70093006C0000008000A70442001D0597001D00820030002A







00>] def
/CharStrings 19 dict dup begin
/.notdef 0 def
/parenleft 1 def
/parenright 2 def
/hyphen 3 def
/two 4 def
/three 5 def
/C 6 def
/H 7 def
/I 8 def
/M 9 def
/N 10 def
/O 11 def
/P 12 def
/T 13 def
/e 14 def
/h 15 def
/i 16 def
/l 17 def
/u20B8 18 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4179358 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91BD326F6E6A1837BE2706B92FCAA32341FE90C82594E2DAAEF640CEE7C829F74199BEB91DB68E41A499587CED5A856443AD12FA7631214AFE1C70F3E7FD54114126E2FEFAF34858ADC23924206EDD9FFF1C250C313D111342B0E659172681EBE0B15D6AC67399B7E199E404C7B349567017AF4294D409DE887C8F0BAC5E47BA167FD6F00C0E77E1C8D75D1A93738EA6FE87A7086BC73ED0BA7CAF646B047FA635D393ECB1ECDDE6CBE3BFAF81A96C629D9C457AB078A72E74DE3412D282815EA60C9FC21A4DCD1D961B203451CB5D41EE29330A47443AE200B7F60C52F19A67978B7E21323E36F5B3880D88B57C152A214B85BF894F25F3AAB28454C0BB8DBB319DC589F0647EA97A58846AC6BDE2225994E3721D2E159BD27CD5F1310BA512807463BE96B8172ACEA743E071AD64DAE63103213093B370EEC32CC63D51EBF2B1C072B16BFD7F1BF08DD6C772A80ED9C5B763C29D9700532476E9A0E0B2C86215902FD3F8BB9E44E8A89E0B04C32515A73A6A40EBF89D7182E02E51A6F958ECC4214A8A2E00BA28F9BBC1ACF3336B8B07A5AF0781263CB7AFF47F2E8E080989A09A5C1A067CD16B479EB1947CB384253AF553CCC895542E03484BAFD1458CC524C514FF340CEA526C1433742B723A8929AE96094B682490E4400C330A28EF3944C809A012BDCCC919DA84945DF3CE6101F2E8F0478D4FEDFC9F6842BB1412D8303CD76B00E48862D63CF89445F2F357E3A339075E3213CCB4C34C79FAB7BF246F
7A7E47E3AB3AD80B99A2CCF32CCA0AAB6E08518FEBB952C6E9139A1312A13F4239C7B57CA4205A0BAB4C99F43F979519471E327C6177CC9AC25B7968980683469EBF72411FDC9D5B45811B8780843012064D150E2E5A3EE2D033824D55E23AE04EA8615DA5F98A09C217C86A8B5F4FB842B43B424A65914A4FB751A5AF8792B33C3D639F11FDA119062D67EC80A3E954029A123E85ACACDAF26B512C81ECCC8B9312DDB64D1216D0E1EA6E39BB0ABA56BAD4F17D29A402AFB1EB0CDD220D3153CF249061AEE257446DF5BCA15C4C3953E3255B2CDDF523C77DDB37F08457608AE6373421FC05A552A54186A4942CDCDA870A0040BE038B20D13058BF08488D6893F6102C6DA4D53AD415EEF284AD1E241499E5D5E0EDB2AD5B7E079F693EF08CFC2B6D44E91F0D05D5D800E6F9213714CC80F8FC714C5088F30413AC96453296F4E5189772918A4A90AF9D13E6F004B0D38B8F0445EDE3BB226463395B16C127F83C29AB2442B54FF3D646FA377FD9DF00D48ED916C5DD440198AD5D5FD58A6D6B75060071258EAD30D3FBBF735F944E74D822C39D2BAB53B0DDF2115094D0CA55E854D41ECDD17758EE7BC5F583606C6F007B9F705EFC4E2B6B177ABA905F0ECC9B3DCF8DB92631C16133364FDD1F983A6C046B3F80AE7C4650726A4E4E54DC9B040680307FBB9055FD3127B11C159516799189B150A2C614536CDA90779F163814AE0C4336EB32690D9FB55747AC9DB181F67AABAD70BB2181155721D0B6ABDF8794FAEEB43EE3F09F7A039AA4C5B405C0927276CD654A5842893DE87DBB75A8E4F3963B3CBD422C0B1BAB134891A3E628D6BCD6D27FA0B9C4DAFBA3AA4C33D61B11D91AB1D5D4313B134554FF2322D688394624728300E514CE6D14C0B6EE79ACA26819FA62527231617B89AC72448F196FCCAA860EEB2469FCA4336A64C77EE123784BC5407F191DE2B60E628F2A3F9172060F2803B17ED8041FA4DA11EA6E1A7CDE0A780C782247DDF4457AEAF45362B5DCCD3A9FCB4DDD0125B8B392E2B28271395CE982D0997A2D7798CECF7A8019B52352937C97CBB0F6BE84CE829706C2B020C9495B90EA71BB457368EEA1D5E1A2B8C588DFC3E1B349DB6E7E2E58EFD0809511290A7B38CFB80B7746EEAE091A56722D886B2ED41E733AFC6A4E86EA8A44E7CC55AFC78EAB583B4E3343124FD2F67DF32727E79A0B15F69D3E1FA167B1E1487D24FAB04BD79C7B2DF4B59909447EC773BF263465C1F2F67FD627520A49F6329A93365C9937841F7213B4D51A6DA158927E55D621C8498F205C1B8640EC1112A4A18396011B6978C8BB190DA8DD46CD2C41EA23A86F31D70C5CF6A69FD9BD86911DAE0F11072C4F3F7C1EA470C14ACCC1B01984E03D6943F98DF28B8F4BA4BC87263DC2DAD5F52EF7780B34424A006BBA04768AC1769765409C81A9
7FE61C3414E458344C013C193AEA632D5B7399C3406FADC61ABAFECAFD18CF81F1C7463F180C1CD479962D83CD6862997A67B0D39F06D20E0D98867DE99B197F4266491C898ADC2D91FAD9AEBB6BC1E875B115310E0082DF0668EB0388FED182A9C527A35AB242DA77863DB794AA8AC431D52D959293A9E6D9C1684912F4A57886DF569EEB03EBC2A36A0CF1DBDBC233BB2FCE4683F950F04BAAAADD404E75E8D1E28D1EB6B7BA2EF74BAB71C88F16C678884B51CA19F043AA6B152C006F9B27B6040B01423F599475AE0078F1BAF05569C2C2B3A6F7D4539131199C5CC4ED494EFB951E4BFC7887BCB50B6231D12C2799CDE8E07FE6B25AADBADE6ABA7977B45B30BE5DCDE78DE617C275EF300E00D25CB6AE5841FF4896DA57C34E1A3E6506875097F0A561E30D9C4101175A4BB966F3E0AC092E162DB6EC7E411EE3BED1DF9B789E41119792BCF8FC89AECFD1F74374320F718E134816F36E49E4F691692918CBA33CABE98FAC72F6CD5EEB8EF438CAFDDC684BEB07E56EFA7A66EACB04A1D2B8380AA430E744CC911DAD5CA30C772881934CFDEB6963D0AB1D693F64810306E33B64CB9CA933B610D2C2216700E805BF4ACEF2D98BA5338D8CF730E04F38A89F655C879DF57B552015E9520D4C7CD19EE74147AD8229B62D616C78721927AFFE2ECFFBD35A9DA0E3F01E5BC24677E3A991173FC659625629AB871DCE1D94157FA0C6AB91D3A16BB76901468D8DE7FA772F68EF1EF8F55C07208336CF3FEDB02BFDD54082AD9DB2BDE00DF758692A916C397813635E8AD334B7B073B0B2B8C7176DD5855E4327B4D270FF5799B9D03A39DD3101F991F626538E2BBCB4B625E8ED1D1F5043B043B4B5CDAABFBF9F259F2A855D142C7AB875FD8BEF6F73CE0BF566ED069BDCFF017D8D20F4E640CC669441A606B0F1DAFA19CB62C09E7B3164AA5525372F6B7B1EC73B37E2BA7708EBEDE6496B7F36A3D98D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/YRFKVG+Helvetica cguidfix
/F1.1/YRFKVG+Helvetica renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 sc
q
0 169 m
406 169 l
406 0 l
0 0 l
h
0 169 m
W
0 0 406 169 rc
-1 169 m
407 169 l
407 -1 l
-1 -1 l
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 13.174013 141.43785 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!)s
0 15.541179 m
(")s
20 w
1 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
561.82251 1776.0156 m
561.82251 2063.9844 l
S
561.82251 2063.9844 m
738.48981 2121.387 l
S
919.91608 2037.0541 m
1004.9609 1920 l
S
1004.9609 1920 m
835.69708 1687.0284 l
S
835.69708 1687.0284 m
561.82251 1776.0156 l
S
1004.9609 1920 m
1292.9296 1920 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 43.510738 165.56804 cm
0 7.1972656 m
(#$)[ 6.669922 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
1351.0736 1761.6538 m
1400.9894 1790.4728 l
S
1332.9052 1814.7446 m
1364.0956 1832.7524 l
S
1314.7367 1867.8354 m
1327.2019 1875.0322 l
S
1292.9296 1920 m
1436.9139 2169.3882 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 28.173956 165.91553 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
1061.4597 1745.3505 m
1113.0461 1771.635 l
S
1042.7941 1806.0825 m
1074.8842 1822.4333 l
S
1024.1284 1866.8147 m
1036.7223 1873.2316 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 57.633297 140.71468 cm
0 7.3681641 m
(!%)[ 7.221680 0.000000 ] xS
/F1.1[ 7.5 0 0 -7.5 0 0]sf
15 9.6679688 m
(&)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
1436.9139 2169.3882 m
1635.869 2169.3882 l
S
3483.1348 1940 m
2166.6667 1940 l
S
CM
161 148 m
161 148 147.46484 144.61371 147.46484 144.61371 c
147.46484 144.61371 149.15674 146.51849 149.15674 148 c
149.15674 149.91901 147.46484 152.38629 147.46484 152.38629 c
147.46484 152.38629 161 148 161 148 c
161 148 161 148 161 148 c
h
f
0.050000001 0 0 -0.050000001 -25 245 cm
3100.5352 2212.366 m
3055.8352 2018.7498 2862.3958 1897.8754 2668.7795 1942.5752 c
2510.7642 1979.0559 2389.762 2131.1765 2389.762 2293.3484 c
S
CM
130.4881 130.33258 m
130.4881 130.33258 128.80145 133.96014 128.80145 133.96014 c
128.80145 133.96014 129.73145 134.127 130.02675 134.3817 c
130.32205 134.63641 131.12024 135.96014 131.12024 135.96014 c
131.12024 135.96014 130.4881 130.33258 130.4881 130.33258 c
130.4881 130.33258 130.4881 130.33258 130.4881 130.33258 c
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 84.333336 126.53353 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.7001953 m
('\(\)*)[ 5.742188 2.221680 7.221680 0.000000 ] xS
/F1.1[ 7.5 0 0 -7.5 0 0]sf
17.407227 10 m
(+)s
1 0 0 -1 183.17401 141.43785 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!)s
0 15.541179 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
3961.8223 1776.0156 m
3961.8223 2063.9844 l
S
3961.8223 2063.9844 m
4138.4897 2121.387 l
S
4319.916 2037.054 m
4404.9604 1920 l
S
4404.9604 1920 m
4235.6973 1687.0282 l
S
4235.6973 1687.0282 m
3961.8223 1776.0156 l
S
4404.9604 1920 m
4692.9292 1920 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 213.51073 165.56805 cm
0 7.1972656 m
(#$)[ 6.669922 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
4751.0732 1761.6537 m
4800.9893 1790.4725 l
S
4732.9048 1814.7445 m
4764.0952 1832.7523 l
S
4714.7363 1867.8354 m
4727.2017 1875.0321 l
S
4692.9292 1920 m
4836.9136 2169.3882 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 198.17395 165.91554 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
4461.4595 1745.3501 m
4513.0459 1771.6348 l
S
4442.7939 1806.0824 m
4474.8843 1822.4331 l
S
4424.1284 1866.8146 m
4436.7222 1873.2314 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 227.63329 140.61702 cm
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
4836.9136 2169.3882 m
5035.8687 2169.3882 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 233.43193 127.59734 cm
0 7.3681641 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
5186.2148 2275.6191 m
5213.4536 2322.7976 l
S
5141.3252 2301.5361 m
5168.5635 2348.7148 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 313.6897 142.77118 cm
0 7.1728516 m
(!)s
0 15.541179 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
6572.1362 1749.349 m
6572.1362 2037.3177 l
S
6572.1362 2037.3177 m
6748.8037 2094.7205 l
S
6913.8096 2032.988 m
7015.2744 1893.3334 l
S
7015.2744 1893.3334 m
6846.0107 1660.3616 l
S
6846.0107 1660.3616 m
6572.1362 1749.349 l
S
7015.2744 1893.3334 m
7303.2432 1893.3334 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 344.02643 166.90138 cm
0 7.1972656 m
(#$)[ 6.669922 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
7361.3872 1734.9871 m
7411.3032 1763.8059 l
S
7343.2188 1788.0779 m
7374.4092 1806.0857 l
S
7325.0503 1841.1687 m
7337.5156 1848.3655 l
S
7303.2432 1893.3334 m
7447.2275 2142.7214 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 328.68964 167.24887 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
7071.7734 1718.6835 m
7123.3599 1744.968 l
S
7053.1079 1779.4156 m
7085.1982 1795.7665 l
S
7034.4424 1840.1479 m
7047.0361 1846.5648 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 358.14899 141.95035 cm
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
7447.2275 2142.7214 m
7646.1826 2142.7214 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 365.06989 129.5786 cm
0 7.3681641 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
7796.5288 2248.9524 m
7822.4277 2293.8103 l
S
7841.4189 2223.0352 m
7867.3174 2267.8931 l
S
6096.4683 1906.6666 m
5400 1906.6666 l
S
CM
291.66666 149.66667 m
291.66666 149.66667 278.1315 146.28038 278.1315 146.28038 c
278.1315 146.28038 279.82339 148.18517 279.82339 149.66667 c
279.82339 151.58566 278.1315 154.05296 278.1315 154.05296 c
278.1315 154.05296 291.66666 149.66667 291.66666 149.66667 c
291.66666 149.66667 291.66666 149.66667 291.66666 149.66667 c
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 379.37555 129.48096 cm
0 7.1728516 m
('\()[ 5.742188 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
7981.2412 2392.1096 m
8058.7021 2392.1096 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 386.66754 117.10919 cm
0 7.3681641 m
(%")[ 7.778320 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
8219.9639 2483.5857 m
8250.7207 2536.8586 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 394.94586 130.04802 cm
0 7.3681641 m
(\)*)[ 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
8262.6885 2389.1589 m
8375.751 2385.667 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 389.21408 142.04802 cm
0 7.3681641 m
(\)*)[ 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
8253.9482 2277.7891 m
8289.3086 2231.2158 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 244.41521 96.952309 cm
0 7.1728516 m
(',)[ 6.108398 0.000000 ] xS
1 0 0 -1 223.69191 95.984863 cm
0 7.3681641 m
("%)[ 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
5360.0146 3050.1975 m
5300.9634 3055.1628 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 262.78339 97.049965 cm
0 7.3681641 m
(\)*)[ 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
5611.9468 3042.6824 m
5732.4253 3042.6824 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 254.0569 109.89787 cm
0 7.3681641 m
(\)*)[ 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
5543.8062 2923.9661 m
5584.4272 2872.7051 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 257.17807 84.87326 cm
0 7.3681641 m
(\)*)[ 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
5562.7471 3146.1355 m
5630.9043 3208.5249 l
S
7798.4165 2514.9485 m
7798.4165 2550.7437 7769.3989 2579.761 7733.604 2579.761 c
7697.8091 2579.761 7668.7915 2550.7437 7668.7915 2514.9485 c
7668.7915 2479.1536 7697.8091 2450.136 7733.604 2450.136 c
7769.3989 2450.136 7798.4165 2479.1536 7798.4165 2514.9485 c
h
S
0 J
7697.312 2510.136 m
7760.2705 2510.136 l
S
7728.7915 2478.657 m
7728.7915 2541.6152 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 117 125.86687 cm
0 7.7001953 m
('\(-%".\)*)[ 5.742188 2.221680 3.330078 7.778320 7.221680 3.330078 7.221680 0.000000 ] xS
/F1.1[ 7.5 0 0 -7.5 0 0]sf
39.067383 10 m
(+)s
1 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
5160 2480 m
5082.666 2613.9468 5128.6177 2785.4419 5262.5645 2862.7761 c
5280.5142 2873.1394 5299.6177 2881.5024 5319.4082 2887.6611 c
S
CM
245.13351 99.984131 m
245.13351 99.984131 239.37567 99.515381 239.37567 99.515381 c
239.37567 99.515381 240.70721 100.30324 240.9704 100.61694 c
241.23358 100.93065 241.37567 101.89931 241.37567 101.89931 c
241.37567 101.89931 245.13351 99.984131 245.13351 99.984131 c
245.13351 99.984131 245.13351 99.984131 245.13351 99.984131 c
h
f
0.050000001 0 0 -0.050000001 -25 245 cm
5560 3240 m
5513.6724 3286.3274 5513.6724 3361.5349 5560 3407.8623 c
5583.6753 3431.5376 5617.6357 3444.4238 5651.0576 3442.4138 c
S
CM
261.39313 74.60688 m
261.39313 74.60688 258.00427 71.532806 258.00427 71.532806 c
258.00427 71.532806 257.81604 72.58989 257.55286 72.879318 c
257.28967 73.168739 256.00427 73.732231 256.00427 73.732231 c
256.00427 73.732231 261.39313 74.60688 261.39313 74.60688 c
261.39313 74.60688 261.39313 74.60688 261.39313 74.60688 c
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 142.35637 57.437862 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
3145.4692 3456.0154 m
3145.4692 3743.9841 l
S
3145.4692 3743.9841 m
3322.1367 3801.3867 l
S
3494.0525 3730.1438 m
3588.6077 3599.9998 l
S
3588.6077 3599.9998 m
3419.344 3367.0281 l
S
3419.344 3367.0281 m
3145.4692 3456.0154 l
S
6980.1084 2173.8579 m
7077.0308 2399.0862 7338.5181 2503.231 7563.7461 2406.3083 c
7609.1392 2386.7744 7651.2305 2359.6025 7687.7202 2326.2773 c
S
CM
362.21216 131.8078 m
362.21216 131.8078 359.98227 127.24019 359.98227 127.24019 c
359.98227 127.24019 359.6492 128.42296 359.38602 128.68614 c
359.12283 128.94933 357.98227 129.24019 357.98227 129.24019 c
357.98227 129.24019 362.21216 131.8078 362.21216 131.8078 c
362.21216 131.8078 362.21216 131.8078 362.21216 131.8078 c
h
f
0.050000001 0 0 -0.050000001 -25 245 cm
8025.6284 2267.1538 m
8049.4019 2205.2214 8018.4287 2135.6545 7956.4961 2111.8809 c
7923.168 2099.0874 7884.25 2102.1504 7853.3335 2120 c
S
CM
373.67593 128.59167 m
373.67593 128.59167 375.65363 133.07812 375.65363 133.07812 c
375.65363 133.07812 376.03067 131.89305 376.2814 131.64232 c
376.53217 131.39157 377.65363 131.07812 377.65363 131.07812 c
377.65363 131.07812 373.67593 128.59167 373.67593 128.59167 c
373.67593 128.59167 373.67593 128.59167 373.67593 128.59167 c
h
f
0.050000001 0 0 -0.050000001 -25 245 cm
2403.532 3853.3333 m
2833.3333 3853.3333 l
S
CM
84.333336 52.333332 m
84.333336 52.333332 97.868492 56.719624 97.868492 56.719624 c
97.868492 56.719624 96.176598 54.252335 96.176598 52.333332 c
96.176598 50.851833 97.868492 48.947044 97.868492 48.947044 c
97.868492 48.947044 84.333336 52.333332 84.333336 52.333332 c
84.333336 52.333332 84.333336 52.333332 84.333336 52.333332 c
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 150.81955 45.789291 cm
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
3492.3914 3933.5505 m
3515.9702 3965.9946 l
S
3691.2737 4032.5845 m
3862.4819 3976.9556 l
S
3862.4819 3976.9556 m
3862.4819 3688.9868 l
S
3862.4819 3688.9868 m
3588.6077 3599.9998 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 159.28273 80.735016 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
3669.6394 3439.2693 m
3716.4316 3473.2656 l
S
3642.77 3494.8152 m
3671.9072 3515.9846 l
S
3615.9006 3550.3611 m
3627.3831 3558.7034 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 176.43771 73.11248 cm
0 7.1972656 m
(#$)[ 6.669922 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
3982.8962 3565.8389 m
4016.8127 3612.521 l
S
3943.3367 3607.9836 m
3964.5061 3637.1208 l
S
3903.7773 3650.1282 m
3912.1997 3661.7207 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 146.09186 32.193218 cm
0 7.3681641 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
3553.2036 4174.9053 m
3534.0408 4233.8828 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 131.9153 29.101957 cm
0 7.1728516 m
('\()[ 5.742188 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
3391.9233 4362.709 m
3320.6311 4377.8628 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 117.93027 39.899738 cm
0 7.3681641 m
(\)*)[ 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
3117.6748 4288.3286 m
3073.4541 4239.2163 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 120.33703 15.505886 cm
0 7.3681641 m
("%)[ 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
3184.5044 4502.6074 m
3169.5874 4548.5176 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 136.73575 42.893341 cm
0 7.3681641 m
(\)*)[ 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
3253.0852 4291.5376 m
3269.428 4241.2393 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 176.16185 41.775467 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
3862.4819 3976.9556 m
3998.4551 4075.7456 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 159.83333 11.200195 cm
0 7.7001953 m
(/0%)[ 8.330078 5.561523 0.000000 ] xS
/F1.1[ 7.5 0 0 -7.5 0 0]sf
21.669922 4.1137695 m
(1)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
3778.4668 4139.8022 m
3818.8354 4177.4463 3882.1577 4175.2349 3919.802 4134.8667 c
3936.8728 4116.5601 3946.6667 4091.6973 3946.6667 4066.6667 c
S
CM
162.33333 41.666668 m
162.33333 41.666668 165.19777 38.487503 165.19777 38.487503 c
165.19777 38.487503 164.18434 38.259117 163.92334 38.009899 c
163.66234 37.760681 163.1032 36.487503 163.1032 36.487503 c
163.1032 36.487503 162.33333 41.666668 162.33333 41.666668 c
162.33333 41.666668 162.33333 41.666668 162.33333 41.666668 c
h
f
0.050000001 0 0 -0.050000001 -25 245 cm
3644.3972 4326.6743 m
3662.8005 4294.8091 3651.8733 4254.0063 3620.0078 4235.603 c
3609.928 4229.7812 3598.3069 4226.6665 3586.6667 4226.6665 c
S
CM
154.33333 27 m
154.33333 27 156.63222 29.904312 156.63222 29.904312 c
156.63222 29.904312 157.01155 28.874582 157.21986 28.666273 c
157.42816 28.457964 158.63222 27.904312 158.63222 27.904312 c
158.63222 27.904312 154.33333 27 154.33333 27 c
154.33333 27 154.33333 27 154.33333 27 c
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 46.58794 50.753838 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
1062.328 3823.1519 m
1231.0223 4055.3396 l
S
1231.0223 4055.3396 m
1407.7843 3997.9062 l
S
1503.9756 3862.8921 m
1503.9756 3679.6519 l
S
1503.9756 3679.6519 m
1231.0223 3590.9639 l
S
1231.0223 3590.9639 m
1062.328 3823.1519 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 60.2356 46.319443 cm
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
1605.6215 3999.6885 m
1679.7214 4023.7607 l
S
1851.6372 3952.5122 m
1945.6232 3823.1519 l
S
1809.8435 3922.1472 m
1881.7679 3823.1519 l
S
1945.6232 3823.1519 m
1776.9288 3590.9639 l
S
1776.9288 3590.9639 m
1503.9756 3679.6519 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 46.58794 79.453835 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
1474.8973 3478.9702 m
1533.0538 3478.9702 l
S
1485.9678 3551.2185 m
1521.9834 3551.2185 l
S
1497.0382 3623.4668 m
1510.913 3623.4668 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 64.945869 83.198097 cm
0 7.1972656 m
(#$)[ 6.669922 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -25 245 cm
1807.4305 3403.2561 m
1862.5842 3421.1765 l
S
1797.535 3469.2698 m
1831.788 3480.3994 l
S
1787.6395 3535.2837 m
1800.9916 3539.6221 l
S
4613.6924 3880 m
7180 3880 l
S
CM
194.84135 51 m
194.84135 51 208.37651 55.386288 208.37651 55.386288 c
208.37651 55.386288 206.68462 52.919003 206.68462 51 c
206.68462 49.518497 208.37651 47.613712 208.37651 47.613712 c
208.37651 47.613712 194.84135 51 194.84135 51 c
194.84135 51 194.84135 51 194.84135 51 c
h
f
0.050000001 0 0 -0.050000001 -25 245 cm
7200 3860 m
7200 2720 l
S
4226.6665 4786.6665 m
4346.9404 4754.4395 4418.4072 4630.6553 4386.1797 4510.3818 c
4362.835 4423.2583 4283.4971 4354.876 4193.8828 4344.6396 c
S
CM
180.49475 27.456568 m
180.49475 27.456568 184.29407 29.014847 184.29407 29.014847 c
184.29407 29.014847 184.43097 28.084457 184.69415 27.768024 c
184.95734 27.45159 186.29407 26.610188 186.29407 26.610188 c
186.29407 26.610188 180.49475 27.456568 180.49475 27.456568 c
180.49475 27.456568 180.49475 27.456568 180.49475 27.456568 c
h
f
ep
end
%%Trailer
%%EOF
