%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.3 (Build 18D109) Quartz PS Context)
%%Title: decafluoropyrazoline_synthesis3.eps
%%Creator: ChemDraw Professional(tm) 16.0.1.4
%%CreationDate: 2020-06-07 12:42:30 +0000
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 364 112
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: © 1985–2017 PerkinElmer Informatics, Inc.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 364 112
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: NHNZMZ+Helvetica
%!FontType1-1.0: NHNZMZ+Helvetica 1.0000.0.0000
14 dict begin/FontName /NHNZMZ+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /N put
dup 34 /F put
dup 35 /three put
dup 36 /two put
dup 37 /one put
dup 38 /five put
dup 39 /four put
dup 40 /C put
dup 41 /H put
dup 42 /O put
dup 43 /P put
dup 44 /l put
dup 45 /D put
dup 46 /M put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<





F1EFDC733D1EC21A92AFFED7FF00AEE5ACBA01472805E5FEDABB8EA6FECFFEC5FEFEFEBFA95991E89DBD9BCD01AC0145D0E20000000200A50000056305BD000D00180067401F871196120232080B1E0F02001E17080831131A1A0D250E19191AD6217689182B2B4EF44DFD4E10F64DED003FFD3FFD3130437940260116112515260607050704070307020705060A10083201011608320109120B320107140032002B2B012B2B2A2B2B815D2532373637363736351002232111032120171611140702290102D06541744A3B1A0FD9F1FE9FC80253012FA795589BFE86FDAFAA15276F598B53470111012EFB980513D7C2FED1EABDFEB20000000100AF000004AA05BD000900394018071E040409031E0100020908066B011A0B03082500190A0BB80157B32195DC182B2B4EF44DFD3C4E10F64DE4003F3F3CED12392FFD313013211521112115211123AF03FBFCCC02D1FD2FC705BDB4FE42AFFD6400000100A10000052F05BD000B003F402108091E0302020401020A070804072506051A0D010A250B00190C0C0DA0217670182B2B104EF43C4DFD3C4E10F63C4DFD3C003F3C3F3C392F3CFD3C3130133311211133112311211123A1C902FCC9C9FD04C905BDFDA1025FFA4302AFFD510000000100970000061705BD001300CB405944014B03020601090316011903D7010513011C03140B1B0C57015803D401DB03D40BDB0C0A040A040D45028602045102970202290A280D380A380D4702570276020725640D0A0203120301020B0C120306081517171A040405B8019B400D0A1F030B06FD0C0102FD0D1F12B8019BB6130019147670182B4E10F43C4DFDE419F43939F4393918E4FD3C4E10456544E6003F173C3F3C1217394B5279B10D0CB801AAB40201020A0BB801AAB202020387054D2E7AFD047DC487052E7AFD047DC43130005D727101725D71132109012111231134363501230115141615112397011D01A601A3011ABD04FE5DC5FE5A05BE05BDFB2604DAFA4303632DD077FB2904D72D36DD34FC9D00000002009C0000052A05BD0009000A007640143701380602070117012701470158020507010202B8019B4017120606070207080301020806080A030A0A010608020302B8019BB505041A0C0708B8019B400A0900190B0CA0217670182B2B4EF43C4DFD3C4E10F63C4DFD3C11123939392F003F3F3C3F3C12393904872E2B877DC53130005D015D13330111331123011123019CEB02E6BDDFFD0FBE023A05BDFB5A04A6FA4304A5FB5B05BD000000030050FFD505E805E5000F001B001C008A402C8705C700C701C302C808C90A064308153A0F031B3A07091C021C1C0B1231031A1E18310B191D1ED8216A66182B2B4EF44DED4E10F64DED12392F003F3FED3FED313043794032001A0D26012509250526160E18320014001232011A08


00>] def
/CharStrings 16 dict dup begin
/.notdef 0 def
/one 1 def
/two 2 def
/three 3 def
/four 4 def
/five 5 def
/C 6 def
/D 7 def
/F 8 def
/H 9 def
/M 10 def
/N 11 def
/O 12 def
/P 13 def
/l 14 def
/u20B8 15 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4179358 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B2145C684A74C06611B00C1FA345EA5AA002A80B57843F114AFEA926699F2E8022F1D1331DFE6254733147DDB94E77EAC1EAD51170D66C31355D7FFC56C96F93071D2CDD5F60123EB639124E6FA384D09402728516BADCC77378B244CD24D665A083342B300443D55EE013E9AE4D84B5CE492E3969CE9C0083D4134FE23DBDF6A6F1CBAC3D4605323562D527CAEFB8D5A8E3D76C433A4C2B8576FD5E57B9DE6683293D2BAE3CE1B07C12A2E2BBFD1D4939FD3094DE340076320A38E9F237DC188BBBBED6C3EFCC4DECF53FAE2FB3D12CFF7B52FD6F54B4D691B0FA78397DA18EDFBF4A057889E82F6B0438BCB4D2D6FBEA3CC3B168B8EC368DD4705EBF9597AAE37BCC50B6434CC0D2D81A5C0779AF23431DA10DF8787291AC6185D92EEE8042F69630D2C3982BD2FBF03B1001DEC58A408E22F993C7CB50929778B0A3BBD9D5E5A0BEADF21F5B21CBC0AC79734B9D0C31EB2EAACFE469DA2454F16A6DD8B4F3047DDD8FCDF9F8561A36CBC1A53A8EAACF47B176BB1E5CC53868054A57ACF1C5CAEB8F8A3EA9CFD9D98102D83E89DC8D02D0FE4CBFAA59A804068D240B10EDF6A705FAF6F9CECD33807CEA253ABF9386F62D3DE79C4BE2C52964AB2959AA298BA4BBD5364E662A399238B8D602488059F36D34ED1C9CEC3706CD0ABA42023A602DD8BF2CFDDB921EC7BECAA05D5030FAC62E4EEC9C65E7471092D15A3449D554C8783F1CAC0C6EA666F17FEFF3082A11626E300B48803DAA0B1C0C17E8FE2BCC
01DC893F48211B9EEF5A5DAD03B23B7BF559A7BB1B88657F3697DB07D2542EF945E61F95B78FD98E265EB35DC62B720F0FA8D38AF0291AD5808E48F46E87BB7723C1FBC16310C92B9918B3FB8B9D4CA3540D09AF1014051A0890C230390FF3A2CFE5978E3E60371E172AEEF84308F5281EA316C0D61E771DB2716C6660AD15594FF4EB51E15C4F869DD995F18A42E16D21148F6E4D8A81BA292D65A5BA4EC800F3534D033654CB64D1B39C49642C05F0C499A2730655616E450167111C117CCE72632EDE7A0861C0C52595030B716B3070ADD0EB14F6B936F38A6C778C5ED31554CFFEAC18295BD2E911AEB9176F36A8559F80A20D553D6936BF407402BA6785BFFF45627E7AB3C93A12653AD9C6C6CAACCF1BAC5000CB5167DEA0907C7E1CFF6B325888C74ECFF6AFFCD2F22CD68E05A59C8AB7F76EBB3B0B2A9258513F460C91ED2A7B66D33292AB72FAE57D2619A36AA6A0511460B45E77C1B8369083A5036E9A0849E79FE9DDFB279457AFD60C094815559D36593F9F77D291A888999AE47B20A053D1701E44C46C18D761D9EBFAE5D52B513D6318803C5F6443A6AF26E509519B4F524D777E9831E1EE69D5413EB668F0539F9071C1DD398C978F934BCF91BFAB6B3D6E0AA9305F19A2867D63992DBD09849B61BA67A3F099D282903DF237D363966591671CD920098C0BF448A5F62568FBB9C7EE49F007300A689395F6D339DDAF02EFD52109516DEEBE87E3C24CFECB0FD29DB3C524F384E16CB2945FE4F1EF19826A2094CBA7A5A6B7C11E30F966C810DA5E98C02990BFE356D02864BFE3DDC822DAEA6B0F65A518B88BB7B17510043D6DA167EB6360A5B7DDDD383C9C239EAF179263DDE66166680A4C0485F2FA6A242CCE9F9351B41E5EF4A126CDB5DBC36B1ACBE7C7DCAC962FA0BDAC930326F9EB356FF160B54B8FF8D8752FF6130057C471C005D94B22552237A155656ED9597FC2EAC6863FD9E307C326F101F5779B2E288986506D7BC762AB4165B652849E6F29D6A06319137CA2BA72AF0FAA79C14EA9668E16668CFECBC0779D4396CEEBF8FEB0DED9719603C8A718026FA68BE59C47E26B8454352ABF472A575E2B2D201713DD77FC6E2B30ED9C0A0D32843820156E56D39E06E576681DCFB27B6778B2814507CDEDA4B75F68586B576E7005678D17D2EA3A0D4DCF1DAE1FBA453BFFD1B1E4D4FF05CDD765AFB1F92D8614B965C3FDD62C163791B7E440900382E0775135A66D77825F0DF0E896F81893E4C7480643A78EB805D467E45E47730F1513CEF6892200F25C3A6050D87AEB629DFB8027D91F6FD80C66516EC15C16E388B9FC3F6288F0C47658623E5C9ABBDE1B7CE8CECBE7A72B0484F4B8F87BF6D699D4BB6AC0EF9596C5F8C2E85FBD8A6019C517F8E54C0A2C6EBDF04419C5AD57AF8B46687FFB70A4BAB00B7827FBB1EF
AD99CF1C537F9E7DC0635A1526EB9B5505A8C7D49533836A763588751D52E5EB6E8DE9D262A3D1F1719FA79EDBFC0707CB00EFC55EB397241EEB4BD0C30ADF2ED0EF74DAD9389A086852BAA7F533EA3E6BA3754B4BD567F6FA90D4376CDCA8B155D85774DB9FC77DF6D494FDDE217E402BC5CADD971908E4D46D4916DCA1602CB2782A8035815BFE5A32A50DBE311D7B50B707A3F2333F4DFB7EB9585764F531ACF100C95A366E5E0DBFD3BF8E066BF8C45441BCBC618CD02D104CE7DDCCB89EA6796F970B96DE32BEF22A5CCC36A2E3AD5743B43C50D3B405B639034B5B7787BEBBAE2A5E57362B1E7CC5BBF26F67527C5ED985E948F40346B0528CA9D4CFECFFE5E0FC00A23829E63006DD70C859C64D7CB2C8421611070A5999A541421A4821F507AE1284571484969369DC2D55D65A3B57FD3E4BF12F2611C044110F4031C79FBFE0BBC70F31532F976795A1C1AA310819E120E79A336C076FBB346B3F7E2BE17F0EAFF81ADB53FB346CCC3E6E7A1FCA88CE66068FA502E246E10AE41583BE625CCD34780C9CA0C02BB155A7B765F00E36CA0C372B7104FD9B55CAA56FD140D46D858B53CA4CB089280B9498B837D2E3576C5D31E6D99A2CCF9313980D144961D22E11E600B81A5005141CE69AD2CF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/NHNZMZ+Helvetica cguidfix
/F1.1/NHNZMZ+Helvetica renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 sc
q
0 112 m
364 112 l
364 0 l
0 0 l
h
0 112 m
W
0 0 364 112 rc
-1 112 m
365 112 l
365 -1 l
-1 -1 l
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 59.228973 50.773102 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!)s
1 0 0 -1 73.573944 50.393097 cm
0 7.1728516 m
(!)s
20 w
1 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -65 218 cm
2475.3677 3151.0605 m
2518.1653 3295.7041 l
S
2535.554 3172.394 m
2567.7024 3281.0471 l
S
2651.7896 3428.783 m
2754.7332 3431.51 l
S
2888.0837 3308.6399 m
2939.5806 3163.3574 l
S
2939.5806 3163.3574 m
2711.9412 2988.574 l
S
2711.9412 2988.574 m
2475.3677 3151.0605 l
S
2904.5569 3522.478 m
3006.1821 3670.4404 l
S
3006.1821 3670.4404 m
3292.3044 3648.0098 l
S
3039.9543 3719.6113 m
3266.6072 3701.8428 l
S
3292.3044 3648.0098 m
3454.791 3884.583 l
S
3454.791 3884.583 m
3331.1553 4143.5879 l
S
3395.3215 3889.2454 m
3297.3831 4094.4167 l
S
3331.1553 4143.5879 m
3045.0332 4166.0186 l
S
3045.0332 4166.0186 m
2882.5466 3929.4446 l
S
3070.7305 4112.1855 m
2942.0161 3924.7825 l
S
2882.5466 3929.4446 m
3006.1821 3670.4404 l
S
2939.5806 3163.3574 m
3214.7866 3081.929 l
S
2475.3677 3151.0605 m
2204.8586 3055.1755 l
S
3214.7866 3081.929 m
3281.8704 2802.8794 l
S
3271.9871 3065.0044 m
3325.1279 2843.9541 l
S
3281.8704 2802.8794 m
3557.0764 2721.4504 l
S
3557.0764 2721.4504 m
3765.1987 2919.0718 l
S
3543.1333 2779.45 m
3707.998 2935.9963 l
S
3765.1987 2919.0718 m
3698.115 3198.1213 l
S
3698.115 3198.1213 m
3422.9089 3279.5503 l
S
3654.8574 3157.0466 m
3436.8521 3221.5508 l
S
3422.9089 3279.5503 m
3214.7866 3081.929 l
S
2204.8586 3055.1755 m
2152.6431 2772.9653 l
S
2148.6345 3035.2461 m
2107.2717 2811.6924 l
S
2152.6431 2772.9653 m
1882.134 2677.0803 l
S
1882.134 2677.0803 m
1663.8409 2863.4058 l
S
1892.9869 2735.7366 m
1720.0652 2883.335 l
S
1663.8409 2863.4058 m
1716.0565 3145.6155 l
S
1716.0565 3145.6155 m
1986.5656 3241.5005 l
S
1761.428 3106.8887 m
1975.7128 3182.8442 l
S
1986.5656 3241.5005 m
2204.8586 3055.1755 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 85.633209 91.823517 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -65 218 cm
3281.8704 2802.8794 m
3125.9827 2654.8572 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 113.15381 99.966385 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -65 218 cm
3557.0764 2721.4504 m
3598.7537 2548.0847 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 133.96603 80.204269 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -65 218 cm
3765.1987 2919.0718 m
3956.104 2862.5862 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 127.25766 52.299301 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -65 218 cm
3698.115 3198.1213 m
3824.0581 3317.71 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 100.57561 47.644547 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -65 218 cm
3422.9089 3279.5503 m
3399.4446 3377.1558 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 23.441727 102.34291 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -65 218 cm
1882.134 2677.0803 m
1847.1656 2488.0862 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 50.492615 92.75441 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -65 218 cm
2152.6431 2772.9653 m
2287.4097 2657.9348 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 33.884857 45.900894 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -65 218 cm
1986.5656 3241.5005 m
2018.665 3414.9893 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 6.8339691 55.48938 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -65 218 cm
1716.0565 3145.6155 m
1589.946 3253.2578 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 1.6123962 83.710388 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -65 218 cm
1663.8409 2863.4058 m
1461.2242 2791.5859 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 278.52191 77.00824 cm
/F1.1[ 7.5 0 0 -7.5 0 0]sf
0 5.2514648 m
(#)s
1 0 0 -1 281.03427 57.936935 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!)s
1 0 0 -1 276.57019 52.137203 cm
/F1.1[ 7.5 0 0 -7.5 0 0]sf
0 5.2624512 m
($)s
1 0 0 -1 295.37924 57.556931 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!)s
1 0 0 -1 303.77115 53.294987 cm
/F1.1[ 7.5 0 0 -7.5 0 0]sf
0 5.222168 m
(%)s
1 0 0 -1 301.72513 76.747177 cm
0 5.15625 m
(&)s
1 0 0 -1 290.50861 83.073723 cm
0 5.2587891 m
(')s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -65 218 cm
6911.4736 3007.7837 m
6954.271 3152.4275 l
S
6971.6597 3029.1174 m
7003.8081 3137.7703 l
S
7087.8955 3285.5063 m
7190.8394 3288.2332 l
S
7324.1895 3165.3633 m
7375.6865 3020.0808 l
S
7375.6865 3020.0808 m
7148.0474 2845.2974 l
S
7148.0474 2845.2974 m
6911.4736 3007.7837 l
S
7340.6626 3379.2012 m
7442.2881 3527.1636 l
S
7442.2881 3527.1636 m
7728.4102 3504.7329 l
S
7476.0605 3576.3347 m
7702.7134 3558.5659 l
S
7728.4102 3504.7329 m
7890.897 3741.3064 l
S
7890.897 3741.3064 m
7767.2612 4000.311 l
S
7831.4277 3745.9685 m
7733.4893 3951.1401 l
S
7767.2612 4000.311 m
7481.1392 4022.7417 l
S
7481.1392 4022.7417 m
7318.6528 3786.168 l
S
7506.8364 3968.9087 m
7378.1221 3781.5059 l
S
7318.6528 3786.168 m
7442.2881 3527.1636 l
S
7375.6865 3020.0808 m
7650.8926 2938.6523 l
S
6911.4736 3007.7837 m
6640.9648 2911.8989 l
S
7650.8926 2938.6523 m
7717.9766 2659.6025 l
S
7708.0933 2921.7278 m
7761.2339 2700.6775 l
S
7717.9766 2659.6025 m
7993.1826 2578.1738 l
S
7993.1826 2578.1738 m
8201.3047 2775.7949 l
S
7979.2393 2636.1733 m
8144.104 2792.7195 l
S
8201.3047 2775.7949 m
8134.2207 3054.8447 l
S
8134.2207 3054.8447 m
7859.0146 3136.2734 l
S
8090.9634 3013.77 m
7872.958 3078.2742 l
S
7859.0146 3136.2734 m
7650.8926 2938.6523 l
S
6640.9648 2911.8989 m
6588.749 2629.6887 l
S
6584.7402 2891.9695 m
6543.3774 2668.4158 l
S
6588.749 2629.6887 m
6318.2402 2533.8037 l
S
6318.2402 2533.8037 m
6099.9468 2720.1289 l
S
6329.0928 2592.46 m
6156.1709 2740.0581 l
S
6099.9468 2720.1289 m
6152.1626 3002.3389 l
S
6152.1626 3002.3389 m
6422.6714 3098.2239 l
S
6197.5337 2963.6118 m
6411.8188 3039.5676 l
S
6422.6714 3098.2239 m
6640.9648 2911.8989 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 307.43851 98.98735 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -65 218 cm
7717.9766 2659.6025 m
7562.0889 2511.5806 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 334.95911 107.13022 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -65 218 cm
7993.1826 2578.1738 m
8034.8599 2404.8079 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 355.77136 87.368103 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -65 218 cm
8201.3047 2775.7949 m
8392.21 2719.3096 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 349.06299 59.463135 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -65 218 cm
8134.2207 3054.8447 m
8260.1641 3174.4333 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 322.38092 54.808395 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -65 218 cm
7859.0146 3136.2734 m
7835.5503 3233.8787 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 245.24702 109.50674 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -65 218 cm
6318.2402 2533.8037 m
6283.2715 2344.8093 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 272.29791 99.918243 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -65 218 cm
6588.749 2629.6887 m
6723.5156 2514.6582 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 255.69016 53.064728 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -65 218 cm
6422.6714 3098.2239 m
6454.771 3271.7124 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 228.63927 62.653214 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -65 218 cm
6152.1626 3002.3389 m
6026.0522 3109.9812 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 223.41769 90.874222 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -65 218 cm
6099.9468 2720.1289 m
5897.3301 2648.3093 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 327.90399 10.299927 cm
0 7.3681641 m
(\(\)*)[ 7.221680 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -65 218 cm
7767.2612 4000.311 m
7863.856 4140.9487 l
S
5260.5796 3247.7146 m
4383.8911 3247.7146 l
S
CM
209.87375 55.614273 m
209.87375 55.614273 196.33859 52.224976 196.33859 52.224976 c
196.33859 52.224976 198.02898 54.131268 198.02898 55.614273 c
198.02898 57.534836 196.33859 60.003571 196.33859 60.003571 c
196.33859 60.003571 209.87375 55.614273 209.87375 55.614273 c
209.87375 55.614273 209.87375 55.614273 209.87375 55.614273 c
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 167.73849 69.856705 cm
0 7.7001953 m
(+*\(,)[ 6.669922 7.778320 7.221680 0.000000 ] xS
/F1.1[ 7.5 0 0 -7.5 0 0]sf
23.891602 10 m
(#)s
1 0 0 -1 170.9404 53.042007 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.7001953 m
(-.")[ 7.221680 8.330078 0.000000 ] xS
ep
end
%%Trailer
%%EOF
