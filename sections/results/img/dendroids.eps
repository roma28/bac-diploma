%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.3 (Build 18D109) Quartz PS Context)
%%Title: dendroids.eps
%%Creator: ChemDraw Professional(tm) 16.0.1.4
%%CreationDate: 2020-05-21 09:50:58 +0000
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 311 224
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: © 1985–2017 PerkinElmer Informatics, Inc.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 311 224
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: FVPXMX+Helvetica
%!FontType1-1.0: FVPXMX+Helvetica 1.0000.0.0000
14 dict begin/FontName /FVPXMX+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /O put
dup 34 /C put
dup 35 /l put
dup 36 /S put
dup 37 /F put
dup 38 /three put
dup 39 /T put
dup 40 /A put
dup 41 /B put
dup 42 /I put
dup 43 /D put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<







6560234560B089766818B080622020B172424565234520B003266062636820B003266165B042236544B072234420B1625D4565234520B003266062636820B003266165B05D236544B0622344B1005D455458B15D406544B262406245236144592B2B2B2B456953427374B8019A2045694B20B02853B049515A58B020615944B801A6204569447500
00>] def
/CharStrings 13 dict dup begin
/.notdef 0 def
/three 1 def
/A 2 def
/B 3 def
/C 4 def
/D 5 def
/F 6 def
/I 7 def
/O 8 def
/S 9 def
/T 10 def
/l 11 def
/u20B8 12 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4179358 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B71CCBEC8DADBFCB2CF6F614DCF0404E4678133CDA654CD39ADC4A8DD9DC9E199CA389B3097EA53D68A2728AA3C6C75ED53FA8420C021D872E28D46F54806A8A409E053FBF428B872BD7670370D1C6BC11C4F08B535F81FEC9405627CAD2249D628B04A373A2DB6C8BA319AF16D975F2ABB21206FAC66E527D14E529A12FEAD6FDFF84C7687E751EFE9025D2AB5EABD84E4FF17BF9A61DB3E7590955506DA06977ECF57FB5E314B6ED7B03A535F97D4BC250931C12648C77D01373B9102B52CFCF3A2C000B000201D37551BEB70CA411BBE5498E4D94112030013623DDAFCD5743BE60E9235EA8A39204922E4930104D1CF16618D10680596DD8C3633EBE52AC715C2E85B37634EBA45D726930CBEE6FE2CC4D5544556ACC4317C6AF9E765A8FC7AF9E1677E7E4CE2FBBBBCBC2FB3CC77CB25F1DF7E9522791A1629BD31038C87E0C19E6D507DD1815F0A98ED486B8CB11F0EDAA6901DD30F1F82B82060DED72A3F81C169C76C97BAA8F2264D8989A923DDABF347C5E9093DEA0CE520B93CC9EF79B3B9BB447AA1525D515A8942CD0744D283A107E3FDCD1E7B2D0248A04C82B3283C6B237F9267B10CC87420BD5A1324574A2C3D76EF376CC9E49F69D139D9CCFF346B900C66D3AE274C07AFFA8AF19DB5CB1F16F4BB5CD62203065E0F45098A884B6EDFE94F48E2E1801D6B3BE074718EB30120454F549B1F70CCAFAC78398CF63338296A04FAC3FAE1915D3FB900A79F3D8633759CC5B67D8842D79E95705
52B28C1F29D2CF24D15C1D407894407712DF69FD46D34A31A4DE5F8112AF821265019FED1A5002E5CDC66FC88260553ED585B444D7F1D7815E37380DC41A14E7FDE8FA07973983297AE3E3041AE174AF57ACC5A279BB31E144F31F65F7DCDF6662B48C74D170D95B16F3C07C6CEB83A6D16F80AE1B932860D2CE3E9B3AF74D27FDF7F5A12E543CB41BAE44425BB6E712CDBCB2C34266983522B3FFC4C4CDA3A17974AC5953599270981789569AEBA7BC53B5E80574A66FBCA87B64D2FB365D2CF09ECEDE65F8FF739879A1B21D0F7E437D455668E4DA62E059F8C843085B2C2FCC1FFDFFB962CB58F3EB017725E405BE698CC021869BD3CDD5FECD7AC82F5858752870CDE99CFB6D12F86846AB52EC1C6918D174520D673D24DC74E5AE62CFB283537749D4AB47A925D17EF7523FE07A9C76E082A5256876025C46123013018D7B8C8AA3A88A2B65B5A9869CFF6EE9BAC8F95C2D9F07B5452ABD21C74B068927E639AFDE067909AEEC76705DDAE797293104D2D79ACBF4148D86CBA3449E49D778AB272C626353B9DDBDD7A0E66C60017B4E326D79D0E085EC9A019223009A8A68917A7124412EB4C2C20F9CCD10BA58E93596C5A183555BBAACF3A2564227F9DBAF2DFAC25DBF28ECC41A0237483A8B9E15B71530CE9CC63087C5F020F990D68BCA80C1264B7DD24D56B98D073FBC8F6F080FDACE1B752EACA4A7BFB7C616E1B811BEC9EDD2491147C19A5D337A4A5DDC71E0EA2390A5393EE54A5603144F98284DD0CD6F115FF6677AD982DC3D53423EFBD8CA6F67A82479248F69DD51067F5A2554D338996AD84293514DDBEFB0E0967B26DAF09BD9C16159000AD6BF1A83878D9521EED0A414A6B01891A0C8AC11ACFBBB47F2F908C1218EE89AE02E0CE8AC650A7DE2E38557F6494815EE0EAFFEDC3AFCA4E17327D0A88C4F8E54DA65C691334686E5EEC07381A7F1D15D38C9B11260DA94F5734690BF9B1A78FB92A8CB3FCD5DEEA62CA19E5DF0764D2EFF3D87BEA3E086668A66CDB01DB86B345FA855EA56B163091287D218F982630F49407F42BD8D8FA6F0553C9FF35F5FE5C9304CDD9B6D88D380C9B4B03FCC3C04DB23AB2A776D448AF339EC0EB9F31C5B97FC4A6A9757396387612477FA577D670812CF5F2777BD4FE3E29F6BFC8BCE17B06A81881AE204816C1D54E39AA19D8FB627692AC4F57C7805E01BEF7228B2FE27E3FC4D5C87A3BDF79EAC28853AFB6865C4C6321E003096C5B68F86C60146BC0FBF1AD52918529A9FABDCA1E94A82797F745761DF66DC45437F8E9C051B29F2502C22C4072C0B8E73241A2F6679AE5FE86174F541889E5E050FDAC7C56F13C47D351A1AF34D0B8F580A53EC1832D0BAEB198BFF8A0C19C610897ADFE8063587E1D05406CD7BF7EEAD68F99FE691A2A1AD9DB31C0DA58EEFF696F1453A21DE84E97B2E
7E1D0C206304F25C8341B4FF96260EC422CF56EDCE639DA83249EB9C81426D68FEAB5C01E2D53998D9384374A4E4F114ECC3FEFA71A46C47CABFDF9F9D6AF7C1F29BE80F5C70CA0488898D393D87794C77C1F5771806E3F30F070C35268FB6B7FB6F9960888DCFEEAD215FC31334FF8A1B0177B595334A291BC84E551DEC3882ED4AD6C6B4EAB91CD521E34DB22547912CA7A7D95429D787D9452B07068F8B401C3E7D8C706B65245591D31F91B2214C3C0EE569
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/FVPXMX+Helvetica cguidfix
/F1.1/FVPXMX+Helvetica renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 sc
q
0 224 m
311 224 l
311 0 l
0 0 l
h
0 224 m
W
0 0 311 224 rc
-1 224 m
312 224 l
312 -1 l
-1 -1 l
h
f
20 w
1 J
0 sc
0.050000001 0 0 -0.050000001 -149 273 cm
5818.5649 3273.2207 m
6105.5645 3273.9158 l
S
5848.5161 3221.6333 m
6075.8633 3222.1836 l
S
6105.5645 3273.9158 m
6249.6655 3025.7148 l
S
6249.6655 3025.7148 m
6106.7681 2776.8186 l
S
6190.0137 3025.5703 m
6076.8169 2828.4062 l
S
6106.7681 2776.8186 m
5819.7686 2776.1235 l
S
5819.7686 2776.1235 m
5675.6675 3024.325 l
S
5849.4692 2827.8557 m
5735.3188 3024.4695 l
S
5675.6675 3024.325 m
5818.5649 3273.2207 l
S
5675.6675 3024.325 m
5388.668 3023.6299 l
S
6249.6655 3025.7148 m
6536.6646 3026.4097 l
S
6105.5645 3273.9158 m
6248.4619 3522.812 l
S
6106.7681 2776.8186 m
6250.8696 2528.6177 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 109.39937 138.44739 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.3681641 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -149 273 cm
5373.6929 3049.4236 m
5271.7212 2871.8115 l
S
5418.4941 3023.7019 m
5316.5225 2846.0898 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 104.89581 113.59253 cm
0 7.3681641 m
("#)[ 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -149 273 cm
5388.668 3023.6299 m
5293.1826 3188.095 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 153.03951 163.24001 cm
0 7.3681641 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -149 273 cm
6250.8696 2528.6177 m
6167.6113 2383.6008 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 152.85875 88.591553 cm
0 7.3681641 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -149 273 cm
6248.4619 3522.812 m
6162.7095 3670.5125 l
S
6163.9966 3876.5701 m
6247.2544 4021.5869 l
S
6166.3247 2177.5435 m
6252.0771 2029.8425 l
S
6247.2544 4021.5869 m
6101.6201 4270.0151 l
S
6276.9834 4073.3684 m
6161.6924 4270.0352 l
S
6101.6201 4270.0151 m
6248.145 4520.3447 l
S
6248.145 4520.3447 m
6536.103 4519.8311 l
S
6277.8335 4468.4595 m
6506.229 4468.0518 l
S
6536.103 4519.8311 m
6681.7329 4268.9795 l
S
6681.7329 4268.9795 m
6535.2124 4021.0728 l
S
6621.6606 4269.2139 m
6505.6685 4072.96 l
S
6535.2124 4021.0728 m
6247.2544 4021.5869 l
S
6252.0771 2029.8425 m
6540.043 2031.1436 l
S
6281.6938 1978.1415 m
6510.3506 1979.1744 l
S
6540.043 2031.1436 m
6685.1523 1782.4082 l
S
6685.1523 1782.4082 m
6539.1523 1532.3777 l
S
6624.8081 1782.4203 m
6509.2646 1584.5476 l
S
6539.1523 1532.3777 m
6251.1899 1532.8918 l
S
6251.1899 1532.8918 m
6106.0835 1783.4421 l
S
6281.2637 1584.9547 m
6166.4834 1783.1418 l
S
6106.0835 1783.4421 m
6252.0771 2029.8425 l
S
6536.103 4519.8311 m
6680.0117 4769.2627 l
S
6680.0117 4769.2627 m
6535.9517 5018.6074 l
S
6680.0117 4769.2627 m
6967.9805 4769.3496 l
S
6680.0117 4769.2627 m
6824.4414 5018.3931 l
S
6539.1523 1532.3777 m
6682.2998 1282.5079 l
S
6682.2998 1282.5079 m
6537.48 1033.6038 l
S
6682.2998 1282.5079 m
6970.2671 1281.5424 l
S
6682.2998 1282.5079 m
6825.8389 1032.8632 l
S
7826.9194 3273.2205 m
8113.9185 3273.9158 l
S
7856.8701 3221.6328 m
8084.2178 3222.1836 l
S
8113.9185 3273.9158 m
8258.0195 3025.7144 l
S
8258.0195 3025.7144 m
8115.1221 2776.8186 l
S
8198.3682 3025.5701 m
8085.1714 2828.4062 l
S
8115.1221 2776.8186 m
7828.123 2776.1235 l
S
7828.123 2776.1235 m
7684.0215 3024.3247 l
S
7857.8237 2827.8557 m
7743.6733 3024.469 l
S
7684.0215 3024.3247 m
7826.9194 3273.2205 l
S
7684.0215 3024.3247 m
7397.0225 3023.6299 l
S
8258.0195 3025.7144 m
8545.0186 3026.4092 l
S
8113.9185 3273.9158 m
8256.8164 3522.8115 l
S
8115.1221 2776.8186 m
8259.2236 2528.6172 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 209.81706 138.4474 cm
0 7.3681641 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -149 273 cm
7382.0469 3049.4236 m
7280.0747 2871.8113 l
S
7426.8481 3023.7019 m
7324.8765 2846.0896 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 205.31352 113.59254 cm
0 7.3681641 m
("#)[ 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -149 273 cm
7397.0225 3023.6299 m
7306.5786 3179.4102 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 253.45721 163.24002 cm
0 7.3681641 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -149 273 cm
8259.2236 2528.6172 m
8175.9658 2383.6006 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 253.27646 88.591553 cm
0 7.3681641 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -149 273 cm
8256.8164 3522.8115 m
8171.0635 3670.5125 l
S
8172.3506 3876.5701 m
8255.6084 4021.5867 l
S
8174.6787 2177.543 m
8260.4316 2029.8423 l
S
8255.6084 4021.5867 m
8109.9741 4270.0151 l
S
8285.3379 4073.3679 m
8170.0469 4270.0352 l
S
8109.9741 4270.0151 m
8256.499 4520.3447 l
S
8256.499 4520.3447 m
8544.457 4519.8306 l
S
8286.1875 4468.459 m
8514.583 4468.0513 l
S
8544.457 4519.8306 m
8690.0869 4268.979 l
S
8690.0869 4268.979 m
8543.5664 4021.0723 l
S
8630.0146 4269.2139 m
8514.0225 4072.9597 l
S
8543.5664 4021.0723 m
8255.6084 4021.5867 l
S
8260.4316 2029.8423 m
8548.3965 2031.1432 l
S
8290.0479 1978.1411 m
8518.7051 1979.1742 l
S
8548.3965 2031.1432 m
8693.5068 1782.4078 l
S
8693.5068 1782.4078 m
8547.5068 1532.3773 l
S
8633.1621 1782.4199 m
8517.6191 1584.5474 l
S
8547.5068 1532.3773 m
8259.5439 1532.8916 l
S
8259.5439 1532.8916 m
8114.438 1783.4418 l
S
8289.6172 1584.9545 m
8174.8374 1783.1415 l
S
8114.438 1783.4418 m
8260.4316 2029.8423 l
S
8544.457 4519.8306 m
8688.3662 4769.2622 l
S
8688.3662 4769.2622 m
8544.3057 5018.6074 l
S
8688.3662 4769.2622 m
8976.335 4769.3496 l
S
8688.3662 4769.2622 m
8832.7949 5018.3931 l
S
8547.5068 1532.3773 m
8690.6543 1282.5076 l
S
8690.6543 1282.5076 m
8545.834 1033.6035 l
S
8690.6543 1282.5076 m
8978.6211 1281.5424 l
S
8690.6543 1282.5076 m
8834.1924 1032.8628 l
S
7828.123 2776.1235 m
7684.7422 2526.3877 l
S
7826.9194 3273.2205 m
7682.3311 3522.2595 l
S
3751.8599 3248.6499 m
4038.8589 3249.3452 l
S
3781.8108 3197.0623 m
4009.1582 3197.613 l
S
4038.8589 3249.3452 m
4182.96 3001.1438 l
S
4182.96 3001.1438 m
4040.0625 2752.248 l
S
4123.3086 3000.9993 m
4010.1116 2803.8354 l
S
4040.0625 2752.248 m
3753.0635 2751.553 l
S
3753.0635 2751.553 m
3608.9622 2999.7539 l
S
3782.7642 2803.2852 m
3668.6138 2999.8984 l
S
3608.9622 2999.7539 m
3751.8599 3248.6499 l
S
3608.9622 2999.7539 m
3321.9629 2999.0591 l
S
4182.96 3001.1438 m
4469.9595 3001.8386 l
S
4038.8589 3249.3452 m
4181.7568 3498.241 l
S
4040.0625 2752.248 m
4184.1641 2504.0466 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 6.0640869 139.67593 cm
0 7.3681641 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -149 273 cm
3306.9873 3024.853 m
3205.0154 2847.2407 l
S
3351.7888 2999.1313 m
3249.8167 2821.519 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 1.5605469 114.82108 cm
0 7.3681641 m
("#)[ 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -149 273 cm
3321.9629 2999.0591 m
3226.4773 3163.5239 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 49.704239 164.46855 cm
0 7.3681641 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -149 273 cm
4184.1641 2504.0466 m
4100.9062 2359.03 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 49.523483 89.820084 cm
0 7.3681641 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -149 273 cm
4181.7568 3498.241 m
4096.0039 3645.9419 l
S
4097.291 3851.9993 m
4180.5488 3997.0161 l
S
4099.6191 2152.9724 m
4185.3716 2005.2716 l
S
4180.5488 3997.0161 m
4034.9146 4245.4443 l
S
4210.2778 4048.7974 m
4094.9873 4245.4644 l
S
4034.9146 4245.4443 m
4181.4395 4495.7744 l
S
4181.4395 4495.7744 m
4469.3975 4495.2598 l
S
4211.1284 4443.8887 m
4439.5239 4443.481 l
S
4469.3975 4495.2598 m
4615.0273 4244.4087 l
S
4615.0273 4244.4087 m
4468.5068 3996.5017 l
S
4554.9551 4244.6431 m
4438.9629 4048.3889 l
S
4468.5068 3996.5017 m
4180.5488 3997.0161 l
S
4185.3716 2005.2716 m
4473.3374 2006.5725 l
S
4214.9883 1953.5706 m
4443.6455 1954.6035 l
S
4473.3374 2006.5725 m
4618.4468 1757.8372 l
S
4618.4468 1757.8372 m
4472.4468 1507.8066 l
S
4558.103 1757.8494 m
4442.5591 1559.9767 l
S
4472.4468 1507.8066 m
4184.4844 1508.3209 l
S
4184.4844 1508.3209 m
4039.3784 1758.8711 l
S
4214.5581 1560.3838 m
4099.7783 1758.5709 l
S
4039.3784 1758.8711 m
4185.3716 2005.2716 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 78.168884 214.28723 cm
0 7.3681641 m
("%)[ 7.221680 0.000000 ] xS
/F1.1[ 7.5 0 0 -7.5 0 0]sf
13.330078 9.6679688 m
(&)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -149 273 cm
4472.4468 1507.8066 m
4560.3359 1354.3929 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 49.968063 214.13821 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -149 273 cm
4184.4844 1508.3209 m
4076.4746 1321.3373 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 93.266571 189.19746 cm
0 7.1728516 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -149 273 cm
4618.4468 1757.8372 m
4830.3901 1757.7946 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 78.755478 164.256 cm
0 7.1728516 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -149 273 cm
4473.3374 2006.5725 m
4558.5806 2155.7705 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 35.516449 189.07129 cm
0 7.1728516 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -149 273 cm
4039.3784 1758.8711 m
3839.4482 1759.8651 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 78.054474 39.949493 cm
0 7.3681641 m
("%)[ 7.221680 0.000000 ] xS
/F1.1[ 7.5 0 0 -7.5 0 0]sf
13.330078 9.6679688 m
(&)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -149 273 cm
4469.3975 4495.2598 m
4558.2222 4649.2163 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 93.09549 64.922211 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -149 273 cm
4615.0273 4244.4087 m
4826.9692 4243.5811 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 78.495514 89.773666 cm
0 7.1728516 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -149 273 cm
4468.5068 3996.5017 m
4555.0186 3844.564 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 35.293091 64.819016 cm
0 7.1728516 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -149 273 cm
4034.9146 4245.4443 m
3834.9829 4245.3774 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 49.866913 39.800507 cm
0 7.1728516 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -149 273 cm
4181.4395 4495.7744 m
4099.064 4639.7383 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 56 23.200195 cm
0 7.7001953 m
('\(%$)[ 5.371094 6.669922 6.108398 0.000000 ] xS
1 0 0 -1 169 11.200195 cm
0 7.7001953 m
('\('\)$)[ 5.371094 5.932617 6.108398 6.669922 0.000000 ] xS
1 0 0 -1 273.77588 11.200195 cm
0 7.7001953 m
(*+\('\)$)[ 2.778320 7.221680 5.932617 6.108398 6.669922 0.000000 ] xS
ep
end
%%Trailer
%%EOF
