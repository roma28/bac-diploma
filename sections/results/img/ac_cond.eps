%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.3 (Build 18D109) Quartz PS Context)
%%Title: ac_cond.eps
%%Creator: ChemDraw Professional(tm) 16.0.1.4
%%CreationDate: 2020-04-13 13:38:40 +0000
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 455 276
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: © 1985–2017 PerkinElmer Informatics, Inc.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 455 276
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: UTYRQH+Helvetica
%!FontType1-1.0: UTYRQH+Helvetica 1.0000.0.0000
14 dict begin/FontName /UTYRQH+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /N put
dup 34 /F put
dup 35 /C put
dup 36 /H put
dup 37 /O put
dup 38 /P put
dup 39 /h put
dup 40 /l put
dup 41 /E put
dup 42 /t put
dup 43 /three put
dup 44 /parenleft put
dup 45 /D put
dup 46 /M put
dup 47 /A put
dup 48 /parenright put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<








00>] def
/CharStrings 18 dict dup begin
/.notdef 0 def
/parenleft 1 def
/parenright 2 def
/three 3 def
/A 4 def
/C 5 def
/D 6 def
/E 7 def
/F 8 def
/H 9 def
/M 10 def
/N 11 def
/O 12 def
/P 13 def
/h 14 def
/l 15 def
/t 16 def
/u20B8 17 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4179358 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91BC64A62485D7C863002D39D4194FF17CC8AA420E752C449BD1094F4D1EC7207B0530DDF71009828522A260EFA1903C8C21148B5AEA74F5F54E03FE286DAB2E21B3D5193F167FB7002A92B0E61DF27B872185B9CE455AEE3573114DFFA99E3AC617F130A6427B874675718AA95975294767BFB514C441B2FCAF7CFA3DD90717EFC7F13DC1399C067E6DE082D3B2CE9B0E507817062193AB63CA2801055C653882CB78DDCA57314AE448EFA5A0946CBC0EB50BDF8A615849337919543BA6F2CCB96F70277B5D4BD4A341D623FF43D9F2554AAD7DC96B43DA3D5BDBDA791C2C536DC79F07624251F732A6945788EA6E28FE2514A924B4291D3E9D1F0CC2402383E14B6D15548756EE4B5173CF8AF598B696723DD570DC9E5855E2A0FADCBF96A974A854E07615E311DE5196EC6405CB6C6476D1B5EA3CF6E79BF5DC26A759775B41C624719CF9FA63B42E7D67451CE94B44736F03D2B1F6B52C7ECEF93BE5B38B42BDCD5FDA8FCD84EBE1FC59B74C199E2EC8B2DA75B1AAF669F1ECCD2F3AF967C37E0D830D2074036C1D0AE36E00E2794C0FB4AD91698EE963BEED4D5E8FF3AD9990F2B63CF2DC0CB012045E21D4A999DE278F8B62C7AAE78F5449E4B58748A8D8074FE673CCEE85F39998FC48F87FF786A523F203D80D039044201B2A364151F4F5FCFA1EF43E6F1FC1285A75ED1577F0B02A498024BFBE2DBD583062156E8DDBE824B7E4B9E7F40656CB1F0E9C9D2D72B4EDBDC8EE9E49E3A3CFE2FE21F1EBFF
7A0B0DBFA5BEA9E74611C7939EE80F42BEB27E4486B2E14458CF84111DD370CB33A01B2AF6FDCAC1843D325BC04AC4820FDEBD6FE9308FDAF7ED3811F5B4FEEF0A9F12434C7AABA5FB7701A3A1F4539ABEDC29B3E87DCE13EEEC102477C3BBF458D77A7C46A4F040C750B51B4560BA9B9D172662747EB9D046448769A18F4F7679E7B3153A842D998DEF2DB310D982E1CDEE44D3CD1B95229E5D25ED782F374F9638CA515F11D07E552A2A8B2F530551E67FA4789D20B3368E390EEC6CFF7021542FD44B0F764CFC96232E402672EFC1DC634C930FD3539E660E9F346CCCB10C1726134137D7F9B7566BFFD8980169814684941453C0952FF52D76CBC1E7997B84947D748A0A931385EF6C8B15F49321497464D3C00BA6BBB4E38E85C338490F669D9362A5598A571ABB8C145F3B6F459E729CA80BE6C5B4965EB7FDD9EB60ADF2F70B8C8B53F9DCB320229E7A7508BDD9AEA46819A8F045758D98D3AAA1F16611D3908C799D3635211DDA0FB90A7369F5484505BACDE478785EC3E06EFD359475B49D886E0CFFA7E8EFBE657C24230C75E61AF6280B67B4D3CEF6EF3CCF42E668823092364C9300AB3F08B7354CE45C568EE96CF2144EE0CEDA54641C371ED176A168136200A40C0996DD2FB14AB2337DBF56CA5A42AA63745458D222B7F18DDEE45BC0973BCE682543591CDB32806B4D377035FB94903E5B882D346A755944D58D259DB356C25174D542CD819A1C7F16519C3A2A5B4742E95ACFB5D90B14448E18B6B27BADA03A465BC57A7F2993FE9CE81A4D0E27C3295EC127BAAF4BA3175ECB78B95F7B2929A90450B6DFB5A66F02DEF5833C8982C1D889BE1D07A8E76CC9DB1C1B72B149954A1518E193F2C7158C09004D2A2C11216946946B133E1AC7062D669813326D43BEF471A6F9D775E6721DF8794F8BD59062139575EE839AE01162DF3C350D71CC419112A47BDFE6A20466D793B73493C4C435DA2861C6AC31E4C2FF874CBB30047134F1EE080AD0FA6C024D5BF9214D701593D3614543BEDC1C291F1FEAB2C44EB5D028C277B21CD9004B425DBA40585A7011DD8DCD8184CC0997F78A0DE993807B93E6880763E56BB1730BF694BF8166AE517F25F04BE3B9514BFE442CC563D8D95675F2DFD706E37536922BB853C0C5689663B71EF84150B7D018FE39D3BBE8D4E771AD37DCD0D43919DC25276187441FE94354B05FA74BFCF0CC95D92C05B44F8836FE1D77A13BA9C838CCAB4A9D9121951BF9833BAFC2DE40BF3C5A9225B0F8C19355D285D0D4AE14A11CDEF7D2D291E49269306627DBC366850433E1B0267F5D8AB2068DEE6D38F9572B27A3D5272692C989BE95EC42770E40E6D1419EF7184AA219511BDEEB5B22AC6E30D4C6B98398869309DD5122EF27927A02D522BC31D236502FC8257F9476A95E88EA25296B5DBC0AB3435C8F
73A25465685505A116186FF9FA8E3FCF07F036247253A0728B92BCB3AD2903F7857197051E139B74629D9BEEB939AE5EFDE9682DB32C4DD89519A9B4162AC1DB52E968955E5329F208304017935BB2E155D35BB48C5624A2DEF4D4F4DA7DD2BCB9F8A8D59DAB41E186EAF62F069939561DFA10A10716920BC35B83FC7D8437E21966E2DB06A052C4589A8B7EE9703B3C0990A165405DAD917D7C619DD2B50C8AD90CFC2784F68BDC193961DA9E314992DE09EC793747CB2F2EF7081FC4D16953BA65132AEFF5DABC07262397D1875A2EF08CBE49DE7749CF826F5FC47C0CCECC682AFCEC01E56339791580C7A70150B2389E246F4E7C7E36D109C6F5510FF146A88BB2C51BEA8A07D44E678124D666DBABB2C24F5686F557E9E3724583ED26A22B89A19666BD43C231DF5F0858BD1C75FE55FBC65D5C37EA8EA4FDE9F4B1AB4B17F9F79C64F8BEEB45C626761E6883540FDD9B19E14CD8EEA899D9F6039DE4EB014A0E8660332B958FB2E72DFC6309FEE37010E6FDA7E0EA22030AD1DEDCA5FE33D129575450D00B3A71F35327C58CBF026B25606884085F1700A56804A23932EB50E5E745A1FDD23AB28DFB83962036F9BD2D20F9235D14E8722CACC5011172A26514D7D576E70354D67C3E3A9C32A0720D51522F73CCC65546DA2CE0AFC410916439ED4918F55567D32718A561AC03CBAF90DBA1D7EC5CDF5AF82094E099B233EABED914ED264D301010C6CF89C07BEF83278F1DFEFDBAEA242BC41A9401DC919354DF0D4421A02908868D267B7E543ADEEBD34FF2E7C7AC4A0603E3876E51B02C5D70646948F890755C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/UTYRQH+Helvetica cguidfix
/F1.1/UTYRQH+Helvetica renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 sc
q
0 276 m
455 276 l
455 0 l
0 0 l
h
0 276 m
W
0 0 455 276 rc
-1 276 m
456 276 l
456 -1 l
-1 -1 l
h
f
20 w
1 J
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
2739.1208 2080.3674 m
1697.149 2080.3674 l
S
CM
133.80081 229.98163 m
133.80081 229.98163 120.26566 226.59233 120.26566 226.59233 c
120.26566 226.59233 121.95605 228.49861 121.95605 229.98163 c
121.95605 231.90219 120.26566 234.37093 120.26566 234.37093 c
120.26566 234.37093 133.80081 229.98163 133.80081 229.98163 c
133.80081 229.98163 133.80081 229.98163 133.80081 229.98163 c
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 301.47382 223.80876 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!)s
1 0 0 -1 315.82382 223.81911 cm
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
6312.8091 2012.6637 m
6359.2959 2155.3865 l
S
6373.5532 2032.3523 m
6408.416 2139.3875 l
S
6496.7422 2285.4846 m
6599.6797 2285.4104 l
S
6731.4653 2153.384 m
6777.1846 2012.329 l
S
6777.1846 2012.329 m
6544.875 1843.8021 l
S
6544.875 1843.8021 m
6312.8091 2012.6637 l
S
6752.3203 2372.7883 m
6857.5552 2517.4124 l
S
6857.5552 2517.4124 m
7142.9609 2487.207 l
S
6892.6523 2565.6462 m
7118.7378 2541.719 l
S
7142.9609 2487.207 m
7311.8228 2719.2729 l
S
7311.8228 2719.2729 m
7195.2783 2981.5447 l
S
7252.502 2725.551 m
7160.1812 2933.3108 l
S
7195.2783 2981.5447 m
6909.8721 3011.7505 l
S
6909.8721 3011.7505 m
6741.0107 2779.6841 l
S
6934.0952 2957.2383 m
6800.3311 2773.406 l
S
6741.0107 2779.6841 m
6857.5552 2517.4124 l
S
6777.1846 2012.329 m
7050.0737 1923.4446 l
S
6312.8091 2012.6637 m
6039.7915 1924.1729 l
S
7050.0737 1923.4446 m
7109.5415 1642.6731 l
S
7106.7925 1904.9701 m
7153.9004 1682.556 l
S
7109.5415 1642.6731 m
7382.4312 1553.7883 l
S
7382.4312 1553.7883 m
7595.8521 1745.675 l
S
7370.0708 1612.1455 m
7539.1328 1764.1493 l
S
7595.8521 1745.675 m
7536.3833 2026.4462 l
S
7536.3833 2026.4462 m
7263.4946 2115.3311 l
S
7492.0249 1986.5634 m
7275.855 2056.9739 l
S
7263.4946 2115.3311 m
7050.0737 1923.4446 l
S
6039.7915 1924.1729 m
5979.9189 1643.4878 l
S
5983.0459 1905.7803 m
5935.6177 1683.4344 l
S
5979.9189 1643.4878 m
5706.9019 1554.9962 l
S
5706.9019 1554.9962 m
5493.7573 1747.1904 l
S
5719.3462 1613.3357 m
5550.5029 1765.583 l
S
5493.7573 1747.1904 m
5553.6304 2027.8759 l
S
5553.6304 2027.8759 m
5826.6475 2116.3669 l
S
5597.9316 1987.929 m
5814.2031 2058.0276 l
S
5826.6475 2116.3669 m
6039.7915 1924.1729 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 326.75183 265.54709 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
7109.5415 1642.6731 m
6949.6851 1498.9463 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 354.04077 274.43558 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
7382.4312 1553.7883 m
7419.5342 1378.6116 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 374.82623 255.2469 cm
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
7595.8521 1745.675 m
7772.5532 1688.1206 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 369.43604 227.16978 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
7536.3833 2026.4462 m
7665.9951 2142.98 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 342.89047 221.79095 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
7263.4946 2115.3311 m
7241.6167 2218.6257 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 264.29724 274.37088 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
5706.9019 1554.9962 m
5666.5957 1366.0425 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 291.59894 265.52176 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
5979.9189 1643.4878 m
6111.0557 1525.24 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 276.27182 218.23383 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
5826.6475 2116.3669 m
5863.2891 2288.1428 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 248.97011 227.08293 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
5553.6304 2027.8759 m
5430.8379 2138.5991 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 242.42618 255.15144 cm
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
5493.7573 1747.1904 m
5322.396 1691.6484 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 349.62466 177.46437 cm
0 7.3681641 m
(#$%)[ 7.221680 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
7195.2783 2981.5447 m
7286.2612 3106.582 l
S
5141.5161 1730.1366 m
5006.8765 1851.5424 l
S
5006.8765 1851.5424 m
4732.9375 1762.7527 l
S
4732.9375 1762.7527 m
4672.8628 1481.12 l
S
4672.8628 1481.12 m
4886.7261 1288.2772 l
S
4886.7261 1288.2772 m
5160.6646 1377.0667 l
S
5160.6646 1377.0667 m
5192.8628 1528.0107 l
S
7895.8198 1528.9442 m
7928.4102 1375.0713 l
S
7928.4102 1375.0713 m
8202.2207 1285.8871 l
S
8202.2207 1285.8871 m
8416.3623 1478.4213 l
S
8416.3623 1478.4213 m
8356.6934 1760.1403 l
S
8356.6934 1760.1403 m
8082.8823 1849.3248 l
S
8082.8823 1849.3248 m
7951.4082 1731.1162 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 201.05704 268.5676 cm
0 7.3681641 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
4672.8628 1481.12 m
4488.2534 1421.2838 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 415.61945 268.72226 cm
0 7.3681641 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
8416.3623 1478.4213 m
8570.625 1428.1754 l
S
4303.561 1478.3198 m
4185.0605 1585.1729 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 171.10539 263.27948 cm
0 7.1972656 m
(&')[ 6.669922 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
4185.0605 1585.1729 m
3999.1848 1524.9261 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 193.3676 244.84381 cm
0 7.3681641 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
4207.2856 1565.1321 m
4246.5923 1749.402 l
S
4156.5918 1575.9456 m
4195.8984 1760.2155 l
S
8764.6855 1456.2317 m
8904.3135 1581.7712 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 440.57123 263.4693 cm
0 7.1972656 m
(&')[ 6.669922 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
8904.3135 1581.7712 m
9088.6738 1521.7219 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 423.34308 245.00958 cm
0 7.3681641 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
8932.7686 1572.5029 m
8892.8613 1760.9187 l
S
8882.0596 1561.7625 m
8842.1523 1750.1783 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 83.401398 241.99139 cm
0 7.7001953 m
(&'#%#\()[ 6.669922 5.561523 7.221680 7.778320 7.221680 0.000000 ] xS
1 0 0 -1 91.190704 227.40936 cm
0 7.7001953 m
(!\)*)[ 7.221680 6.669922 0.000000 ] xS
/F1.1[ 7.5 0 0 -7.5 0 0]sf
16.669922 10 m
(+)s
1 0 0 -1 84.06546 212.40367 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.7001953 m
(,-./&0)[ 3.330078 7.221680 8.330078 6.669922 6.669922 0.000000 ] xS
1 0 0 -1 130.12338 119.23521 cm
0 7.1728516 m
(!)s
1 0 0 -1 144.45943 118.6022 cm
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
2898.1233 4100.4248 m
2938.5017 4246.3027 l
S
2957.9238 4122.8169 m
2988.2896 4232.522 l
S
3069.5796 4381.2144 m
3172.5337 4385.7603 l
S
3310.5105 4258.5435 m
3362.0471 4120.9087 l
S
3362.0471 4120.9087 m
3137.5266 3942.1367 l
S
3137.5266 3942.1367 m
2898.1233 4100.4248 l
S
3320.448 4478.9834 m
3419.6934 4629.0874 l
S
3419.6934 4629.0874 m
3706.1665 4611.707 l
S
3452.593 4678.8462 m
3679.5237 4665.0786 l
S
3706.1665 4611.707 m
3864.4546 4851.1104 l
S
3864.4546 4851.1104 m
3736.2695 5107.8936 l
S
3804.9121 4854.7227 m
3703.3699 5058.1343 l
S
3736.2695 5107.8936 m
3449.7964 5125.2739 l
S
3449.7964 5125.2739 m
3291.5081 4885.8706 l
S
3476.439 5071.9023 m
3351.0505 4882.2583 l
S
3291.5081 4885.8706 m
3419.6934 4629.0874 l
S
3362.0471 4120.9087 m
3638.6467 4044.3469 l
S
2898.1233 4100.4248 m
2629.3481 3999.7827 l
S
3638.6467 4044.3469 m
3710.6423 3766.5237 l
S
3696.137 4028.4338 m
3753.1685 3808.355 l
S
3710.6423 3766.5237 m
3987.2419 3689.9619 l
S
3987.2419 3689.9619 m
4191.8457 3891.2236 l
S
3972.2781 3747.7063 m
4134.3555 3907.1365 l
S
4191.8457 3891.2236 m
4119.8501 4169.0464 l
S
4119.8501 4169.0464 m
3843.2507 4245.6084 l
S
4077.324 4127.2148 m
3858.2148 4187.8638 l
S
3843.2507 4245.6084 m
3638.6467 4044.3469 l
S
2629.3481 3999.7827 m
2582.1189 3716.6956 l
S
2573.4841 3978.8647 m
2536.0713 3754.6162 l
S
2582.1189 3716.6956 m
2313.3433 3616.054 l
S
2313.3433 3616.054 m
2091.7971 3798.4993 l
S
2323.1597 3674.8926 m
2147.6611 3819.4172 l
S
2091.7971 3798.4993 m
2139.0264 4081.5864 l
S
2139.0264 4081.5864 m
2407.802 4182.228 l
S
2185.074 4043.6658 m
2397.9856 4123.3896 l
S
2407.802 4182.228 m
2629.3481 3999.7827 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 157.24771 159.82332 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
3710.6423 3766.5237 m
3557.3899 3615.7749 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 184.90768 167.47949 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
3987.2419 3689.9619 m
4031.8552 3517.8044 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 204.81143 147.35333 cm
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
4191.8457 3891.2236 m
4372.2373 3841.292 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 198.1685 119.57104 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
4119.8501 4169.0464 m
4243.3999 4290.5781 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 171.40851 115.38766 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
3843.2507 4245.6084 m
3818.2319 4342.1533 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 95.251488 171.4381 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
2313.3433 3616.054 m
2282.4666 3430.9836 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 122.12905 161.37392 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
2582.1189 3716.6956 m
2719.2212 3603.7905 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 104.69736 114.82066 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
2407.802 4182.228 m
2438.1174 4363.9351 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 77.819817 124.88484 cm
0 7.1728516 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
2139.0264 4081.5864 m
2010.7783 4187.2002 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 72.540237 153.19356 cm
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
2091.7971 3798.4993 m
1924.1396 3735.7205 l
S
3736.2695 5107.8936 m
3894.5579 5347.2964 l
S
1740.6526 3765.689 m
1601.4756 3880.3022 l
S
1601.4756 3880.3022 m
1332.7 3779.6604 l
S
1332.7 3779.6604 m
1285.4711 3496.5732 l
S
1285.4711 3496.5732 m
1507.0171 3314.1282 l
S
1507.0171 3314.1282 m
1775.7924 3414.77 l
S
1775.7924 3414.77 m
1802.8613 3577.0183 l
S
4502.7212 3682.3958 m
4540.4409 3536.8386 l
S
4540.4409 3536.8386 m
4817.0405 3460.2776 l
S
4817.0405 3460.2776 m
5021.6445 3661.5391 l
S
5021.6445 3661.5391 m
4949.6489 3939.3618 l
S
4949.6489 3939.3618 m
4673.0493 4015.9233 l
S
4673.0493 4015.9233 m
4547.4409 3892.3669 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 31.945627 168.38751 cm
0 7.3681641 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
1285.4711 3496.5732 m
1105.7812 3429.2891 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 246.02304 158.93521 cm
0 7.3681641 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
5021.6445 3661.5391 m
5177.0391 3618.5266 l
S
917.7312 3477.4294 m
795.14941 3578.3767 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 1.8680214 164.2119 cm
0 7.1972656 m
(&')[ 6.669922 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
795.14941 3578.3767 m
614.30792 3510.6611 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 23.229771 145.11089 cm
0 7.3681641 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
818.17316 3559.4165 m
850.62549 3753.9326 l
S
767.21741 3567.9177 m
799.66974 3762.4338 l
S
5369.6621 3655.2288 m
5502.8481 3786.239 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 270.63742 152.61476 cm
0 7.1972656 m
(&')[ 6.669922 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
5502.8481 3786.239 m
5690.1504 3734.3945 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 252.65347 134.98097 cm
0 7.3681641 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
5531.5933 3778.2825 m
5483.6738 3963.1975 l
S
5481.585 3765.3232 m
5433.666 3950.2383 l
S
3894.5579 5347.2964 m
3766.3733 5604.0796 l
S
3940.7788 5370.3696 m
3825.9155 5600.4673 l
S
3766.3733 5604.0796 m
3924.6616 5843.4829 l
S
3924.6616 5843.4829 m
4211.1348 5826.1021 l
S
3957.561 5893.2417 m
4184.4922 5879.4736 l
S
4211.1348 5826.1021 m
4369.4233 6065.5054 l
S
4369.4233 6065.5054 m
4241.2383 6322.2886 l
S
4241.2383 6322.2886 m
3954.7651 6339.6689 l
S
3954.7651 6339.6689 m
3796.4766 6100.2656 l
S
3796.4766 6100.2656 m
3924.6616 5843.4829 l
S
4369.4233 6065.5054 m
4655.8965 6048.125 l
S
4396.0659 6012.1338 m
4622.9971 5998.3662 l
S
3954.7651 6339.6689 m
3715.3621 6497.9575 l
S
3954.7651 6339.6689 m
3972.1453 6626.1421 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 220.59322 48.617001 cm
0 7.3681641 m
(#!)[ 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
4655.8965 6048.125 m
4730.6074 5898.4619 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 222.0984 23.80768 cm
0 7.3681641 m
(#!)[ 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
4655.8965 6048.125 m
4752.5283 6194.2759 l
S
5876.8955 5240 m
8126.5869 5240 l
S
CM
268 72 m
268 72 281.53516 76.389297 281.53516 76.389297 c
281.53516 76.389297 279.84476 73.920563 279.84476 72 c
279.84476 70.516991 281.53516 68.610703 281.53516 68.610703 c
281.53516 68.610703 268 72 268 72 c
268 72 268 72 268 72 c
h
f
0.050000001 0 0 -0.050000001 -15 334 cm
6678.5957 4617.3091 m
6680.481 4904.3027 l
S
6730.4507 4646.7949 m
6731.9438 4874.1382 l
S
6680.481 4904.3027 m
6929.9678 5046.1675 l
S
6929.9678 5046.1675 m
7177.5688 4901.0376 l
S
7177.5688 4901.0376 m
7175.6841 4614.0439 l
S
7175.6841 4614.0439 m
6926.1973 4472.1797 l
S
6926.1973 4472.1797 m
6678.5957 4617.3091 l
S
6926.1973 4472.1797 m
6924.312 4185.186 l
S
6874.3428 4442.6938 m
6872.8491 4215.3506 l
S
7177.5688 4901.0376 m
7322.6982 5148.6392 l
S
7177.5688 4901.0376 m
7464.5625 4899.1523 l
S
6680.481 4904.3027 m
6432.8799 5049.4326 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 339.98486 136.18126 cm
0 7.3681641 m
(#!)[ 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
6924.312 4185.186 m
7076.8643 4095.7688 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 307.90875 136.01801 cm
0 7.3681641 m
(!#)[ 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
6924.312 4185.186 m
6775.4365 4100.5312 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 314.01147 57.273849 cm
0 7.3681641 m
(%)s
1 0 0 -1 343.08655 57.083374 cm
0 7.1728516 m
(!$)[ 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -15 334 cm
7090.7676 5370.21 m
6802.8003 5369.2817 l
S
6802.8003 5369.2817 m
6713.7324 5522.4102 l
S
6713.6553 5715.3018 m
6801.1924 5868.0557 l
S
6801.1924 5868.0557 m
7089.1597 5868.9839 l
S
7089.1597 5868.9839 m
7173.7656 5723.5273 l
S
7172.9912 5513.6919 m
7090.7676 5370.21 l
S
8146.5869 5220 m
8146.5869 3280 l
S
ep
end
%%Trailer
%%EOF
