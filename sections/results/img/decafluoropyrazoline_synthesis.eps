%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.3 (Build 18D109) Quartz PS Context)
%%Title: decafluoropyrazoline_synthesis.eps
%%Creator: ChemDraw Professional(tm) 16.0.1.4
%%CreationDate: 2020-06-07 06:34:22 +0000
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 381 77
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: © 1985–2017 PerkinElmer Informatics, Inc.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 381 77
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: KXOBFP+Helvetica
%!FontType1-1.0: KXOBFP+Helvetica 1.0000.0.0000
14 dict begin/FontName /KXOBFP+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /O put
dup 34 /C put
dup 35 /H put
dup 36 /F put
dup 37 /N put
dup 38 /a put
dup 39 /E put
dup 40 /t put
dup 41 /slash put
dup 42 /two put
dup 43 /plus put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<



B080441BB04044591B21212045B0C05058B0C0441B2159592DB8004F2C2020456944B001602020457D691844B001602DB800502CB8004F2A2DB800512C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800522C4B535845441B2121592DB800532C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800542C2020456944B001602DB800552CB800542A212DB800562C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800572C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800582C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800592C2020456944B001602020457D691844B001602DB8005A2CB800592A2DB8005B2C4B20B003265358B0401BB000598A8A20B0032653582321B0808A8A1B8A235920B0032653582321B800C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB8005C2C4B535845441B2121592D00000000020042000004D005BD000300070043B800532BB800082FB800042FB8000810B80000D0B800002FB8000410B80003DCB8000010B80007DCB8000310B80009DC00BA0007000000562BBA0002000500562B3031331121112711211142048EB8FCE205BDFA43B8044DFBB300000001005C0000046F0415000B0037401C037A050220080B7A0A0A0D17171A067A040920030A7A00190C3F52182B4E10F44DF43CFD3CF44E456544E6003F4DF43CFD3CF431301335211133112115211123115C01B4AB01B4FE4CAB01B6A801B7FE49A8FE4A01B60000000100000000026A05BD0003002B4017070117019701030102021C1203030002030A0100020003192F18D4003F3C3F3C05872E2B7D10C4015D0133012301D298FE2E9805BDFA4300000100400000041E059D002200A6404E3604460457056B1D6E1E7A1E84018702082A085A196B197C197C1CB519050022010F041C0E1921071C19040100051F0F0F22130A351305201F7521220C217F0738166F220E270F811F38222447231076C418D4EDF4ED10F5EDE4003F3CFD3C3FED1112392F1217390111123912393911391239005D31304379401C04190C2511260B120E2800091407280119040D100A280108150A2801002B2B1010012B2B2B2B81005D36123F0136373635
3426232207060723363736213212151407060F01060706072115214A85C1C0813452967DB9472604B70342750128F6E37946B5896238641A030EFC29B90112706F4B35536B7D938C4B85BB76D0FEF6A3AC7A47654C3631576AAA00000002005AFFDA057105E5001D001E00B1403B1B0597019605031F011F0482018705891305530803861D111115063A1D030C3A15091E021E1E190331023B1031111A20093119191F20A1216A66182B2B4EF44DED4E10F64DEDF4ED12392F003F3FED3FED12392F10ED31304379403A001C172513260E251B260B160932000D1410320112110F10071C0932000500033201010204030A180C32000F120C3200081A06320104010632012B2B2B2B01103C103C2B2B103C103C2B2B2B2B2B2B815D015D080117232E0123220011101233323736373306070621202726111037362123041E013411C221C5B2D9FEF5F1EFDC733D1EC21A92AFFED7FF00AEE5ACBA01472805E5FEDABB8EA6FECFFEC5FEFEFEBFA95991E89DBD9BCD01AC0145D0E20000000200AF000004ED05BD000B000C004E4024071E04040B031E01000209081E0A0B080C020C0C02000669023B091A0E03082500190D0EB8010BB3219589182B2B4EF44DFD3C4E10F64DF4E41112392F003F3F3CFD3C3F3CED12392FFD313013211521112115211121152101AF042FFC93032BFCD5037CFBC2021F05BDB4FE42AAFE0EAF05BD000000000100AF000004AA05BD000900394018071E040409031E0100020908066B011A0B03082500190A0BB80157B32195DC182B2B4EF44DFD3C4E10F64DE4003F3F3CED12392FFD313013211521112115211123AF03FBFCCC02D1FD2FC705BDB4FE42AFFD6400000100A10000052F05BD000B003F402108091E0302020401020A070804072506051A0D010A250B00190C0C0DA0217670182B2B104EF43C4DFD3C4E10F63C4DFD3C003F3C3F3C392F3CFD3C3130133311211133112311211123A1C902FCC9C9FD04C905BDFDA1025FFA4302AFFD5100000002009C0000052A05BD0009000A007640143701380602070117012701470158020507010202B8019B4017120606070207080301020806080A030A0A010608020302B8019BB505041A0C0708B8019B400A0900190B0CA0217670182B2B4EF43C4DFD3C4E10F63C4DFD3C11123939392F003F3F3C3F3C12393904872E2B877DC53130005D015D13330111331123011123019CEB02E6BDDFFD0FBE023A05BDFB5A04A6FA4304A5FB5B05BD000000030050FFD505E805E5000F001B001C008A402C8705C700C701C302C808C90A064308153A0F031B3A07091C021C1C0B1231031A1E18310B191D1ED8216A66182B2B4EF44DED4E10F64DED12392F003F3FED3FED313043794032001A0D26012509250526160E18320014001232011A081832001006123201170C1532


00>] def
/CharStrings 13 dict dup begin
/.notdef 0 def
/plus 1 def
/slash 2 def
/two 3 def
/C 4 def
/E 5 def
/F 6 def
/H 7 def
/N 8 def
/O 9 def
/a 10 def
/t 11 def
/u20B8 12 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4179358 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B71CCBEC8DADBFCB2CF6F614DCF0404E4678133CDA654CD39ADC4A8DD9DC9E199CA389B3097EA53D68A2728AA3C6C75ED53FA8420C021D872E28D46F54806A8A409E053FBF428B872BD7670370D1C6BC11C4F08B535F81FEC940562304FB837D274AA33B01A2477C12472B48D6843B4AB3776FCE01781C75BC91BC1961BDB71D49A186E92927241AA0AB745D52AD82E199E70E658A3232210DF74C8485D7887817D42206B632406A0B5C8420C0D991EB585C6F3931FFEC4D1A0125AD08B2A72BD130B2D0A1953C87A766131290B815566C925310567A505F04A8CA6526ED6C1787BF2A613C5723A7713EF23D55B6B87882196D2DBECFBAA4913B33C0FE1328B5FA45DE14B785434EABBB1B29F8D38149BC277D8306F202DE38ECFD2984A15EAEA4BD30DFD101EF89E0033F96BD770AEB2784D3BB232BF3BE59E589F68019C73B5B2D8FEF4D5D4B0271998B110F8D6B3DEC5DB6619218BB54F5240AACAF0098A68E457FD0FFFD0F97826685CCFB93FA3FA876F03294B3DD9666703801F706EE05CDBADC4547F96FF476654B1B9E5AA5A84205EC42A128AAFCA567548A9B3022FF2FD44C1D6A0CDE6079196AA1311A7A21FAE07FC1CCF2F6F7B8BFCBC2DE34479DE76FF3277D5A9EB59423AADD543D5DE844D45D35CFA1E776B8D016D87CDB4489D50242CEF24DE61383A019093FD325E28F915B7A08A71ACA2D2AFA8ED2859AD5BEA5C812980012D0B02B4B76B7F7A46907E8BD724496F776DDA351325C7B3FAA

67CA356CCCBA9F9411CFAD24A6C4800EC5B7E8C2A3FA0F6CE92EC853CC6A08AE9E199D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/KXOBFP+Helvetica cguidfix
/F1.1/KXOBFP+Helvetica renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 sc
q
0 77 m
381 77 l
381 0 l
0 0 l
h
0 77 m
W
0 0 381 77 rc
-1 77 m
382 77 l
382 -1 l
-1 -1 l
h
f
20 w
1 J
0 sc
0.050000001 0 0 -0.050000001 -4 103 cm
430.61157 1216.0156 m
430.61157 1503.9844 l
S
482.44595 1245.9423 m
482.44595 1474.0577 l
S
430.61157 1503.9844 m
679.99969 1647.9688 l
S
679.99969 1647.9688 m
929.38812 1503.9844 l
S
679.99969 1588.1155 m
877.55371 1474.0577 l
S
929.38812 1503.9844 m
929.38812 1216.0156 l
S
929.38812 1216.0156 m
679.99969 1072.0312 l
S
877.55371 1245.9423 m
679.99969 1131.8845 l
S
679.99969 1072.0312 m
430.61157 1216.0156 l
S
2205.4692 1144.0234 m
2205.4692 1431.9922 l
S
2257.3037 1173.9501 m
2257.3037 1402.0656 l
S
2205.4692 1431.9922 m
2454.8574 1575.9766 l
S
2454.8574 1575.9766 m
2704.2458 1431.9922 l
S
2454.8574 1516.1233 m
2652.4116 1402.0656 l
S
2704.2458 1431.9922 m
2704.2458 1144.0234 l
S
2704.2458 1144.0234 m
2454.8574 1000.0391 l
S
2652.4116 1173.9501 m
2454.8574 1059.8923 l
S
2454.8574 1000.0391 m
2205.4692 1144.0234 l
S
679.99969 1072.0312 m
679.99969 784.0625 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 13.641418 75.180176 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.3681641 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -4 103 cm
679.99969 813.98907 m
517.97125 720.44189 l
S
705.91687 769.09918 m
543.88843 675.552 l
S
679.99969 784.0625 m
929.38812 640.07782 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 115.13203 71.580566 cm
0 7.3681641 m
("#!)[ 7.221680 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -4 103 cm
2454.8574 1000.0391 m
2454.8574 830.41992 l
S
4539.1167 1287.0312 m
3297.1204 1287.0312 l
S
CM
234.8006 38.648438 m
234.8006 38.648438 221.26544 35.25914 221.26544 35.25914 c
221.26544 35.25914 222.95583 37.165432 222.95583 38.648438 c
222.95583 40.569 221.26544 43.037735 221.26544 43.037735 c
221.26544 43.037735 234.8006 38.648438 234.8006 38.648438 c
234.8006 38.648438 234.8006 38.648438 234.8006 38.648438 c
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 26.945786 10.289551 cm
0 7.1728516 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -4 103 cm
679.99969 1647.9688 m
679.99969 1832.1777 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 51.884613 53.484863 cm
0 7.1728516 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -4 103 cm
929.38812 1216.0156 m
1088.4784 1124.1648 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 51.884613 24.687988 cm
0 7.1728516 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -4 103 cm
929.38812 1503.9844 m
1095.6417 1599.9709 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 2.0069733 53.484863 cm
0 7.1728516 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -4 103 cm
430.61157 1216.0156 m
254.54936 1114.366 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 2.0069733 24.687988 cm
0 7.1728516 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -4 103 cm
430.61157 1503.9844 m
282.02707 1589.7698 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 140.6275 57.084473 cm
0 7.1728516 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -4 103 cm
2704.2458 1144.0234 m
2863.3362 1052.1726 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 140.6275 28.287598 cm
0 7.1728516 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -4 103 cm
2704.2458 1431.9922 m
2870.4995 1527.9788 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 115.68867 13.88916 cm
0 7.1728516 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -4 103 cm
2454.8574 1575.9766 m
2454.8574 1760.1855 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 90.749847 28.287598 cm
0 7.1728516 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -4 103 cm
2205.4692 1431.9922 m
2056.8845 1517.7776 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 90.749847 57.084473 cm
0 7.1728516 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -4 103 cm
2205.4692 1144.0234 m
2029.4069 1042.3738 l
S
5357.3628 1144.0234 m
5357.3628 1431.9922 l
S
5409.1973 1173.9501 m
5409.1973 1402.0656 l
S
5357.3628 1431.9922 m
5606.7515 1575.9766 l
S
5606.7515 1575.9766 m
5856.1396 1431.9922 l
S
5606.7515 1516.1234 m
5804.3052 1402.0657 l
S
5856.1396 1431.9922 m
5856.1396 1144.0234 l
S
5856.1396 1144.0234 m
5606.7515 1000.0391 l
S
5804.3052 1173.95 m
5606.7515 1059.8922 l
S
5606.7515 1000.0391 m
5357.3628 1144.0234 l
S
5856.1396 1144.0234 m
6105.5278 1000.0391 l
S
6105.5278 1000.0391 m
6354.916 1144.0234 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 297.38724 71.580566 cm
0 7.3681641 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -4 103 cm
6079.6108 1015.0023 m
6079.6108 830.41992 l
S
6131.4453 1015.0024 m
6131.4453 830.41992 l
S
6354.916 1144.0234 m
6604.3047 1000.0391 l
S
6354.916 1084.1702 m
6578.3872 955.14917 l
S
6604.3047 1000.0391 m
6853.6924 1144.0234 l
S
6853.6924 1144.0234 m
6853.6924 1431.9922 l
S
6905.5269 1173.9501 m
6905.5269 1402.0656 l
S
6853.6924 1431.9922 m
7103.0806 1575.9766 l
S
7103.0806 1575.9766 m
7352.4692 1431.9922 l
S
7103.0806 1516.1233 m
7300.6348 1402.0656 l
S
7352.4692 1431.9922 m
7352.4692 1144.0234 l
S
7352.4692 1144.0234 m
7103.0806 1000.0391 l
S
7300.6348 1173.9501 m
7103.0806 1059.8923 l
S
7103.0806 1000.0391 m
6853.6924 1144.0234 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 273.28339 71.48291 cm
0 7.1728516 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -4 103 cm
5606.7515 1000.0391 m
5606.7515 812.37305 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 248.34454 57.084473 cm
0 7.1728516 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -4 103 cm
5357.3628 1144.0234 m
5181.3008 1042.3738 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 248.34454 28.287598 cm
0 7.1728516 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -4 103 cm
5357.3628 1431.9922 m
5208.7783 1517.7776 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 273.28339 13.88916 cm
0 7.1728516 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -4 103 cm
5606.7515 1575.9766 m
5606.7515 1760.1855 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 298.2222 28.287598 cm
0 7.1728516 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -4 103 cm
5856.1396 1431.9922 m
6022.3936 1527.9788 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 348.09985 71.48291 cm
0 7.1728516 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -4 103 cm
7103.0806 1000.0391 m
7103.0806 812.37305 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 373.03867 57.084473 cm
0 7.1728516 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -4 103 cm
7352.4692 1144.0234 m
7511.5596 1052.1726 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 373.03867 28.287598 cm
0 7.1728516 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -4 103 cm
7352.4692 1431.9922 m
7518.7227 1527.9788 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 348.09985 13.88916 cm
0 7.1728516 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -4 103 cm
7103.0806 1575.9766 m
7103.0806 1760.1855 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 323.16101 28.287598 cm
0 7.1728516 m
($)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -4 103 cm
6853.6924 1431.9922 m
6705.1079 1517.7776 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 183.92694 50.658203 cm
0 7.7001953 m
(%&!#)[ 7.221680 5.561523 7.778320 0.000000 ] xS
1 0 0 -1 174.39996 34.032471 cm
0 7.7001953 m
('\(!#\)#)[ 6.669922 2.778320 7.778320 7.221680 2.778320 0.000000 ] xS
/F1.1[ 7.5 0 0 -7.5 0 0]sf
34.448242 10 m
(*)s
/F1.1[ 10 0 0 -10 0 0]sf
38.619385 7.7001953 m
(!)s
1 0 0 -1 71.66391 44.297363 cm
0 7.7001953 m
(+)s
ep
end
%%Trailer
%%EOF
