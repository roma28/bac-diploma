%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.3 (Build 18D109) Quartz PS Context)
%%Title: fluorine_substitution.eps
%%Creator: ChemDraw Professional(tm) 16.0.1.4
%%CreationDate: 2020-03-30 08:33:20 +0000
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 411 227
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: © 1985–2017 PerkinElmer Informatics, Inc.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 411 227
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: SDDEXS+Helvetica
%!FontType1-1.0: SDDEXS+Helvetica 1.0000.0.0000
14 dict begin/FontName /SDDEXS+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /N put
dup 34 /H put
dup 35 /D put
dup 36 /M put
dup 37 /F put
dup 38 /comma put
dup 39 /space put
dup 40 /C put
dup 41 /O put
dup 42 /plus put
dup 43 /percent put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<





120301020B0C120306081517171A040405B8019B400D0A1F030B06FD0C0102FD0D1F12B8019BB6130019147670182B4E10F43C4DFDE419F43939F4393918E4FD3C4E10456544E6003F173C3F3C1217394B5279B10D0CB801AAB40201020A0BB801AAB202020387054D2E7AFD047DC487052E7AFD047DC43130005D727101725D71132109012111231134363501230115141615112397011D01A601A3011ABD04FE5DC5FE5A05BE05BDFB2604DAFA4303632DD077FB2904D72D36DD34FC9D00000002009C0000052A05BD0009000A007640143701380602070117012701470158020507010202B8019B4017120606070207080301020806080A030A0A010608020302B8019BB505041A0C0708B8019B400A0900190B0CA0217670182B2B4EF43C4DFD3C4E10F63C4DFD3C11123939392F003F3F3C3F3C12393904872E2B877DC53130005D015D13330111331123011123019CEB02E6BDDFFD0FBE023A05BDFB5A04A6FA4304A5FB5B05BD000000030050FFD505E805E5000F001B001C008A402C8705C700C701C302C808C90A064308153A0F031B3A07091C021C1C0B1231031A1E18310B191D1ED8216A66182B2B4EF44DED4E10F64DED12392F003F3FED3FED313043794032001A0D26012509250526160E18320014001232011A081832001006123201170C1532011302153201190A1B320011041B32002B2B2B2B012B2B2B2B2B2B2B2B81005D0017161110070221202726111037122100123510002322001114122103049BBB92A7C4FE95FEADC2AD94BE0174011BEBFEF1EBE4FEE0F701150E05E5FAC3FED0FEB7DAFF00E0D8014A012AD40110FAA20179F50103013CFEC7FECFF4FEB1055E0002002F0000044205930007000B00001335211521112311013521152F0413FE4FB2FE50041303A6A8A8FC5A03A60146A7A7000000010000000000004E8ABC9E5F0F3CF500110800000000005F4D8F0000000000D7C5A882F865FC270B9108F9000000090001000000000000000100000629FE2900000C01F865FCED0B9100010000000000000000000000000000000D0512004202390000071D004204AC005C023900AA05C7005A05C700A504E300AF05C700A106AA009705C7009C063900500473002F00000036003600FE0132016401F40256028802C0034C03A20420043A00010000000D00920009006B0007000200100010005D000007E80A1D00040001B800532BB800492BB8003F2BB800352BB8002B2B4118008001A6009001A600A001A600030069018B0079018B0089018B0099018B00040089018B0099018B00A9018B00B9018BB2040840BA0179001A014A400B041F5414191F180A0B1FD2B80106B49E1FD918E3BB0119000D00E10119B20D0009410A01A0019F0064001F01A50025017A00480028019AB3296C1F60410A01A9007001A900

00>] def
/CharStrings 13 dict dup begin
/.notdef 0 def
/space 1 def
/percent 2 def
/plus 3 def
/comma 4 def
/C 5 def
/D 6 def
/F 7 def
/H 8 def
/M 9 def
/N 10 def
/O 11 def
/u20B8 12 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4179358 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B71CCBEC8DADBFCB2CF6F614DCF0404E4678133CDA654CD39ADC4A8DD9DC9E199CA389B3097EA53D68A2728AA3C6C75ED53FA8420C021D872E28D46F54806A8A409E053FBF428B872BD7670370D1C6BC11C4F08B535F81FEC94056208D56B3E982A5E36DE60871FA74C366B184A73F65FADE21B4128ABF694E130FC35B20B58BCA1A2FE432A9687FF0AF9163DA5BBE85B7CB0BCD1592216894FDEF75BBCD4719CC8D0BEF18E6B215A14FB5585D292CF99C1B623A1F6647A7370A999B7D537319FC7250C4C53DE03BDE96B1F5131501C9C34E2D0DD515EB54121A603A526FA89668255EBF98B7F5454F20E50C75DBF7EA81794E223BE35D9882E68FDE172A44FBBB1C17AC1076129DABD0A4AD343FB25DFE0949005FB9815CEC6A30422FECDCA91513CED182F1C054FA479F30AD6E8F6D254A34B68F3AA96AFF8794F2A46B63193F03E15B4BC9B4769067BE0E98DFC6CE35C6ACC8EE755BA528EDA47570D0B4E90F1A4CE426F2776741679444077B485DF744643E09C507BFD590D667B159EC6CFEDFA22D78AABA0ECB6A2427A16311607F602399906CD273D390667F054EC86FA6BF90A3E14793D0902E5AA2C9F51C5F81CCDD5CE687AC4AA75DC9A6C77B344EE6F0B7AA8EB2AC02607C7DF2FC9F6BDE627DC760DEAF8CF099740580C00E4F25E0E18883736E8C81916E4AB9031090B58119B0F5037806B8ECEE643E68D266F5D2AA264A4FC83C4FD4A97CF8F96B551814DD594E75C5C807F847601C2639937B
E5631F92196F7B8586A6EE3B7FF46B87DFFB7E98FAA413134089F57A13C68C22FE14F2CBB5E17D8371E642DEACE09587AC682752F08202C738016D800C32D807F18AB41966DB340A27D723158C8AF8FC0921189210248CBF39C0E8D75AF59049D90AE7EFA88798AD69ED7EA9A208567177FC230BE5E26CA5ADB1AC0FCA4AA8C10424C0DE8463983A4940FC02D25A8FFDF9CE58BA619F0EFAD310A157AE2F5213DDFD809DEA9B9A22C22C4DA6E40895A307D41A78C5D6C4500BBD013EED17B3BE71306A50590494DDB6275F545046DACC05BA18F154ED6CA1C1E02FB8B7446C43D5774F70FD554A6152509C799C581D0F634A4468CA8524F18419E4D801593C28650B8D7CF18A3A6D64C07EFD4A1778FAEBE6F39A8D2E61C439894F6E7275F6BCE98808CDF6AE9FBBA625CEDBDFE87EFEAD10D628CA2F34E057F78480DE02C491A4F0F1354C37B902AF74351474FEE1285E2E65CAFD24F1CBE1F1FCE445FE956E02DBFA47623B9B705E3A06F6E50CBDEB3685B621EF59D1FFB9992F87A722F94B1F0BDAB1C84A4ABE3DAE8C19827D6D03DD8C536B4A65D055B169FF2F99B5A0B915140158C95EB39FA1F9517A2F6490C2B52D83754D1DDB8BE3BE5A331817FB19AF3FD5C67C2A86BF3CA8969CA48D891F53176E939F4AF744E83513E8BF38EEC854847994C83B669E321EF2F9B563DE4E573A588AB5CBF6061C5781D50736B8EE00BE625FC603491C67351FF68B4C0DC7A0FB854D43E1EB9C4C4DB95935D97E6A6BF3B004C076A30EF5FBE01E49D4C8FB9C6E36CF5F980E651FD7837D15E77934380A17BB871CD7D4005F86ECEF8789A2A28B8156F47A29BB2F8ECE361663D68C0C52CD2ED6C3300F2BCBF624280DB55DA4A6026438926CE719438495D8E4DF0F51BFFA58EA536C54BEFB887E6E2B046008859154C1806A744F1303496C4CD7232D42BC1BEB3713437B9EC6D2AC9F78A50A7067CED8CC0A4E4F3D38314EBBAB6E1F0FECB59FB7D39AD197AC00C12E28F0499B3CA6AC781976E41504CCCDD6B6E3DC9EEAE8FE0FE2CABE1EEC395C5A32F62040B2EF80D5AE3F54C6C335667ADFB8017914FC3C3D4FECBEDB21E340E7E9A423045E3CBD81682B5436E6FA0956DA32658BCB04F60B4290C952E4A758DDAB2FF3072830B85F45427D116828A6F6AE88CDEB72AF30A364D26EA676D19CF4069CF81A27FA4699F4B5160A9AA0DABF936366918696EF63AEA80C19306B3D4BAFA81FEDB71944AE9CAC0FD1980460E480B87E9957648F4F0F112A3AC91E49167F4621220E83FB02BA63095CF32C7AF26313D5D85BA284663CB74567631FEA8A9723D55CA11171ED3DEFF545700F8768509F65D21A3FDDC69F99120337F004299C3EDF7D1FAA6AC6C5B1183E3B08F02FF543AAF69944A84204AC6017EFC8966EBE0991653D0972510209462BC5AEBD599765
848EE835E4367D8382CDB3327374E540A4A0A27B6AB00E9C1B155C72BB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/SDDEXS+Helvetica cguidfix
/F1.1/SDDEXS+Helvetica renmfont
%RBIBeginFontSubset: BEZGGC+Symbol
%!FontType1-1.0: BEZGGC+Symbol 1.0000.1.0000
/FontInfo 1 dict dup begin
/FSType 4 def
end readonly def
14 dict begin/FontName /BEZGGC+Symbol def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /Delta put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -342 1 index div -612 2 index div 2240 3 index div 1694 5 -1 roll div]cvx def
/sfnts [<




5A00640003005900FE0003005800FE0003005700FE0003005600FE0003005500FE0003005400FE00030053007D0003005200FE0003005000FE0003004F00FE0003004E00FE0003004D00FE0003004C00FE0003004B00FE00030048FFE00004004700640003004600FE0003004400230004004300FE0003004200FE0003004100FE0003004000260003003F00FE0003003E00FE0003003D00FE0003003C00FE0003003B00FE0003003A00FE0003003900430003003800FE0003003700FE0003003400FE0003003300FE0003003200FE0003003100340003003000FE0003002F00FE0003002E00FE0003002D00FE0003002C00480003002B00FE0003002A00FE0003002900FE000300280027003A0005002800FE00030027003A0003002600FE0003002500FE00030024000F00030023001B0003002200960003002100FE0003002000550003001F003A0003001E00FE0003001D003A0003001C003A0003001B417600640003001A00640003001900480003001800FE0003001700FE0003001600FE0003001500FE00030015001000040014001100250005001400FE000300130012004B000500130096000300120011002500050012004B0003001100250003001000FE0003001000100004000F00FA0003000E00FE0003000D00FE0003000C00FE0003000B00FE0003000A00FE0003000900FE0003000800FE0003000700350003000600CE0003000500FE0003000400FE0003000300FE00030002001D00030002001000040001006400030060001B0060001D0080000D0090000D00A0000D00B0000D00C0000D00070001014C858D01732B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B002B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B1D00
00>] def
/CharStrings 3 dict dup begin
/.notdef 0 def
/Delta 1 def
/per 2 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 4 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-342 -612 2240 1694}def
/UniqueID 4166474 def
currentdict currentfile eexec

552B390C6F0BE2E48C4C35D6975002A01D6C84FBBC0A64D5D06971BD51273D47AF1AD2FE8C172FDB202BF14B9E63BADBAC6326982CD8AB62C5BCB43F9CB5256609C487A5665F8AF4590DBE007C1D79044A2A00088760B7CFE9DB6C371A22D39BA7C52DC04C7885CA3378E82FB268106EB4F5CBF2F90549BAA8861B202B4818D4CAF859CEC2A438E7532563CA79AE2E64C9DB0EC1336C86EFA3BB77E1CE6C9E9649904176B1F84974060EB095EAC13DB387701B767653B872EF8E13BAE027C74A9225AF6E37B38EBC2CFE23B190E63E54040FB09E521454D27ED1B6C42100D7ED1002E80D353C343EACD171FC627173F56836C3C928B8CEA6B683E8EF22FB68941FFE5A47580A2055D4C3E6949B9EDF0AEE8543D4C69E53E371C62957336B5A462BBD0AE4B9B1879384C9065C1AB2DBCF8F5C77C3E922DAF965E960C4C04F5644A1C46505997B97518FC10A641ED7669B173541BE5AA997BE2CE44821C6EED18B5123CE328EDE12084BA3F1283043B9808F74502001FA2F794D4905B5CFC13816B736F3D6106676D29D5460073FB087FDE28E00A41DE1E81FD3023023340798F4D45D0A5FED43D6F1992052D80E77860779347CA41441CBFE17D5BD9FE798CC304AD4A5A0410CEF27D3B97E157812725551480DEF108E47CA2060975787266E2ADE133E5676C5E34372BBE5BE3E2902343F741E3840B3E35E3480988AC3D041D1D19A32AB3E18BA3F3341E0F89696975CE9AAA1E99EEAEF3B794024E98C3A64CBCB36C7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/BEZGGC+Symbol cguidfix
/F2.1/BEZGGC+Symbol renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 sc
q
0 227 m
411 227 l
411 0 l
0 0 l
h
0 227 m
W
0 0 411 227 rc
-1 227 m
412 227 l
412 -1 l
-1 -1 l
h
f
20 w
1 J
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
4410.583 4128.2754 m
3000 4128.2754 l
S
CM
126.37392 113.58624 m
126.37392 113.58624 112.83877 110.19695 112.83877 110.19695 c
112.83877 110.19695 114.52916 112.10323 114.52916 113.58624 c
114.52916 115.50681 112.83877 117.97554 112.83877 117.97554 c
112.83877 117.97554 126.37392 113.58624 126.37392 113.58624 c
126.37392 113.58624 126.37392 113.58624 126.37392 113.58624 c
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 98.274315 134.04248 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!")[ 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
3725.75 4050.2673 m
4013.7188 4050.2673 l
S
4013.7188 4050.2673 m
4092.8794 3913.1567 l
S
4091.3823 3686.0083 m
4013.7188 3551.4907 l
S
4013.7188 3551.4907 m
3725.75 3551.4907 l
S
3725.75 3551.4907 m
3581.7656 3800.8789 l
S
3581.7656 3800.8789 m
3725.75 4050.2673 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 63.737202 109.61359 cm
0 7.7001953 m
(#$%&')[ 7.221680 8.330078 5.000000 2.778320 0.000000 ] xS
/F2.1[ 10 0 0 -10 0 0]sf
26.108398 7.7001953 m
(!)s
1 0 0 -1 197.79753 127.46562 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!)s
1 0 0 -1 198.60735 113.13849 cm
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
5870.6445 3859.2729 m
6051.1646 3906.8503 l
S
5893.7725 3918.7927 m
6037.999 3956.8044 l
S
6153.8218 4032.4504 m
6158.5146 4115.4785 l
S
6068.7036 4256.1304 m
5896.8501 4322.9087 l
S
5896.8501 4322.9087 m
5715.3218 4100.6108 l
S
5715.3218 4100.6108 m
5870.6445 3859.2729 l
S
6266.9287 4284.9688 m
6405.7012 4374.2812 l
S
6405.7012 4374.2812 m
6391.8569 4660.9468 l
S
6455.8623 4406.5645 m
6444.8955 4633.6479 l
S
6391.8569 4660.9468 m
6633.1948 4816.2695 l
S
6633.1948 4816.2695 m
6888.377 4684.9263 l
S
6636.0723 4756.687 m
6838.2158 4652.6431 l
S
6888.377 4684.9263 m
6902.2217 4398.2603 l
S
6902.2217 4398.2603 m
6660.8838 4242.938 l
S
6849.1826 4425.5596 m
6658.0063 4302.5205 l
S
6660.8838 4242.938 m
6405.7012 4374.2812 l
S
5896.8501 4322.9087 m
5823.7075 4600.4316 l
S
5870.6445 3859.2729 m
5766.6943 3591.7598 l
S
5823.7075 4600.4316 m
5546.7935 4675.8496 l
S
5808.5049 4658.1138 m
5589.1465 4717.8564 l
S
5546.7935 4675.8496 m
5473.6504 4953.373 l
S
5473.6504 4953.373 m
5677.4209 5155.478 l
S
5531.2056 4937.6973 m
5692.6235 5097.7959 l
S
5677.4209 5155.478 m
5954.3345 5080.0601 l
S
5954.3345 5080.0601 m
6027.478 4802.5371 l
S
5911.9814 5038.0532 m
5969.9224 4818.2124 l
S
6027.478 4802.5371 m
5823.7075 4600.4316 l
S
5766.6943 3591.7598 m
5483.0459 3548.0264 l
S
5745.0889 3536.158 m
5520.3955 3501.5146 l
S
5483.0459 3548.0264 m
5379.0957 3280.5129 l
S
5379.0957 3280.5129 m
5558.7939 3056.7329 l
S
5438.0513 3289.6028 m
5580.3999 3112.3345 l
S
5558.7939 3056.7329 m
5842.4424 3100.4661 l
S
5842.4424 3100.4661 m
5946.3926 3367.9795 l
S
5805.0928 3146.9778 m
5887.4375 3358.8896 l
S
5946.3926 3367.9795 m
5766.6943 3591.7598 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 158.09695 100.39922 cm
0 7.1728516 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
5546.7935 4675.8496 m
5398.1338 4528.4043 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 150.78264 72.646896 cm
0 7.1728516 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
5473.6504 4953.373 m
5292.8965 5002.6016 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 170.60306 52.436356 cm
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
5677.4209 5155.478 m
5632.9121 5324.3569 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 198.85106 59.978134 cm
0 7.1728516 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
5954.3345 5080.0601 m
6077.3223 5202.043 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 202.70393 86.787735 cm
0 7.1728516 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
6027.478 4802.5371 m
6151.062 4768.8789 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 145.71817 162.24744 cm
0 7.1728516 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
5379.0957 3280.5129 m
5181.8101 3250.0952 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 156.11317 135.49611 cm
0 7.1728516 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
5483.0459 3548.0264 m
5380.3774 3675.8801 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 202.44785 153.50079 cm
0 7.1728516 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
5946.3926 3367.9795 m
6155.4111 3400.2061 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 192.05284 180.25212 cm
0 7.1728516 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
5842.4424 3100.4661 m
5951.5078 2964.6462 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 163.13136 184.62546 cm
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
5558.7939 3056.7329 m
5497.7612 2899.666 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 246.91562 82.145416 cm
0 7.3681641 m
(\("\))[ 7.221680 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
6888.377 4684.9263 m
7034.314 4778.8501 l
S
5526.7822 2699.634 m
5635.1489 2564.6838 l
S
5635.1489 2564.6838 m
5530.8481 2296.2673 l
S
5530.8481 2296.2673 m
5246.2427 2252.3865 l
S
5246.2427 2252.3865 m
5065.9375 2476.9216 l
S
5065.9375 2476.9216 m
5170.2383 2745.3381 l
S
5170.2383 2745.3381 m
5367.5278 2775.7566 l
S
5508.0859 5459.1992 m
5326.4297 5508.6738 l
S
5326.4297 5508.6738 m
5253.04 5787.1338 l
S
5253.04 5787.1338 m
5457.498 5989.9214 l
S
5457.498 5989.9214 m
5735.3467 5914.2485 l
S
5735.3467 5914.2485 m
5808.7363 5635.7886 l
S
5808.7363 5635.7886 m
5692.9224 5520.9209 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 47.578999 134.14015 cm
0 7.3681641 m
("\))[ 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
3581.7656 3800.8789 m
3399.334 3800.8787 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 152.09457 10.76503 cm
0 7.3681641 m
("\))[ 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
5457.498 5989.9214 m
5413.9048 6155.3257 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 139.98622 224.98558 cm
0 7.3681641 m
("\))[ 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
5246.2427 2252.3865 m
5184.4561 2093.3806 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 337.65662 109.81057 cm
0 7.1728516 m
(!)s
1 0 0 -1 338.46643 95.483437 cm
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
8667.8262 4212.374 m
8848.3467 4259.9517 l
S
8690.9541 4271.894 m
8835.1807 4309.9058 l
S
8951.0039 4385.5513 m
8955.6963 4468.5796 l
S
8865.8857 4609.2314 m
8694.0322 4676.0098 l
S
8694.0322 4676.0098 m
8512.5039 4453.7119 l
S
8512.5039 4453.7119 m
8667.8262 4212.374 l
S
9064.1104 4638.0698 m
9202.8828 4727.3823 l
S
9202.8828 4727.3823 m
9189.0391 5014.0479 l
S
9253.0439 4759.6655 m
9242.0771 4986.749 l
S
9189.0391 5014.0479 m
9430.376 5169.3706 l
S
9430.376 5169.3706 m
9685.5586 5038.0273 l
S
9433.2539 5109.7881 m
9635.3975 5005.7441 l
S
9685.5586 5038.0273 m
9699.4033 4751.3613 l
S
9699.4033 4751.3613 m
9458.0654 4596.0391 l
S
9646.3643 4778.6606 m
9455.1875 4655.6216 l
S
9458.0654 4596.0391 m
9202.8828 4727.3823 l
S
8694.0322 4676.0098 m
8620.8887 4953.5327 l
S
8667.8262 4212.374 m
8563.876 3944.8608 l
S
8620.8887 4953.5327 m
8343.9756 5028.9507 l
S
8605.6865 5011.2148 m
8386.3281 5070.9575 l
S
8343.9756 5028.9507 m
8270.832 5306.4741 l
S
8270.832 5306.4741 m
8474.6025 5508.5791 l
S
8328.3877 5290.7988 m
8489.8057 5450.897 l
S
8474.6025 5508.5791 m
8751.5166 5433.1611 l
S
8751.5166 5433.1611 m
8824.6592 5155.6382 l
S
8709.1631 5391.1543 m
8767.1045 5171.3135 l
S
8824.6592 5155.6382 m
8620.8887 4953.5327 l
S
8563.876 3944.8608 m
8280.2275 3901.1274 l
S
8542.2705 3889.259 m
8317.5771 3854.6157 l
S
8280.2275 3901.1274 m
8176.2773 3633.614 l
S
8176.2773 3633.614 m
8355.9756 3409.834 l
S
8235.2324 3642.7039 m
8377.5811 3465.4355 l
S
8355.9756 3409.834 m
8639.624 3453.5671 l
S
8639.624 3453.5671 m
8743.5742 3721.0806 l
S
8602.2744 3500.0789 m
8684.6191 3711.9907 l
S
8743.5742 3721.0806 m
8563.876 3944.8608 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 297.95605 82.744164 cm
0 7.1728516 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
8343.9756 5028.9507 m
8195.3154 4881.5054 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 290.64172 54.99184 cm
0 7.1728516 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
8270.832 5306.4741 m
8090.0781 5355.7026 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 310.46216 34.7813 cm
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
8474.6025 5508.5791 m
8430.0938 5677.458 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 338.71014 42.323078 cm
0 7.1728516 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
8751.5166 5433.1611 m
8874.5039 5555.144 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 342.56302 69.132683 cm
0 7.1728516 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
8824.6592 5155.6382 m
8948.2441 5121.98 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 285.57727 144.59238 cm
0 7.1728516 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
8176.2773 3633.614 m
7978.9917 3603.1963 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 295.97226 117.84106 cm
0 7.1728516 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
8280.2275 3901.1274 m
8177.5596 4028.9812 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 342.30695 135.84573 cm
0 7.1728516 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
8743.5742 3721.0806 m
8952.5928 3753.3074 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 331.91193 162.59706 cm
0 7.1728516 m
(%)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
8639.624 3453.5671 m
8748.6895 3317.7476 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 302.99045 166.9704 cm
0 7.1728516 m
(!)s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
8355.9756 3409.834 m
8294.9434 3252.7671 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 386.77472 64.490364 cm
0 7.3681641 m
(\("\))[ 7.221680 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
9685.5586 5038.0273 m
9822.3936 5126.0933 l
S
8323.9639 3052.7351 m
8432.3311 2917.7849 l
S
8432.3311 2917.7849 m
8328.0303 2649.3684 l
S
8328.0303 2649.3684 m
8043.4243 2605.4875 l
S
8043.4243 2605.4875 m
7863.1191 2830.0227 l
S
7863.1191 2830.0227 m
7967.4199 3098.4392 l
S
7967.4199 3098.4392 m
8164.7095 3128.8579 l
S
8305.2676 5812.3003 m
8123.6113 5861.7749 l
S
8605.918 5988.8896 m
8490.1035 5874.022 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 279.84531 207.33052 cm
0 7.3681641 m
("\))[ 7.221680 0.000000 ] xS
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -106 320 cm
8043.4243 2605.4875 m
7981.6377 2446.4817 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 268.69101 119.23517 cm
0 7.7001953 m
(*)s
1 1 1 sc
1 0 0 -1 2 118.2002 cm
0 7.7001953 m
(++++)[ 8.891602 8.891602 8.891602 0.000000 ] xS
ep
end
%%Trailer
%%EOF
